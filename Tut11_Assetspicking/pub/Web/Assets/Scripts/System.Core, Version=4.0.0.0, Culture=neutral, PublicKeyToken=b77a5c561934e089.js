/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm15 = JSIL.DeclareAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.GenericParameter("T")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm0F.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0F.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCapacity", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnionWith", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Collections.Generic.HashSet`1+Slot", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_freeList", $.Int32);

    $.Field({Static:false, Public:false}, "m_comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Field({Static:false, Public:false}, "m_siInfo", $asm0F.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0F.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm0F.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 6 */ $asm0F.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "next", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "set", $asm15.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic");
JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSiteBinder");

/* class System.Dynamic.DynamicMetaObjectBinder */ 

(function DynamicMetaObjectBinder$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
      Name: "System.Dynamic.DynamicMetaObjectBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject */ 

(function DynamicObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoClass */ 

(function ExpandoClass$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNewClass", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Keys", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransitionList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $asm15.TypeRef("System.Dynamic.ExpandoObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseInsensitive", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm15.TypeRef("System.Dynamic.ExpandoObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseSensitive", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "_transitions", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.WeakReference")])]));

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Property({Static:false, Public:false}, "Keys", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject */ 

(function ExpandoObject$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "ExpandoContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDeletedMember", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClassCore", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), [$asm15.TypeRef("System.Dynamic.ExpandoClass"), $asm15.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Add", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "ContainsKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Keys", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Values", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")]), "TryGetValue");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "TryAddMember", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValueForKey", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "LockObject", $.Object);

    $.Field({Static:false, Public:false}, "_data", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Uninitialized", $.Object);

    $.Field({Static:false, Public:false}, "_propertyChanged", $asm12.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Keys", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Values", $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.String")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject+KeyCollection"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$ln$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject+ValueCollection"));

    $.Field({Static:false, Public:false}, "$ldata$g5__1", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ExpandoData */ 

(function ExpandoData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ExpandoData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Dynamic.ExpandoClass"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlignedSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateClass", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Class", $asm15.TypeRef("System.Dynamic.ExpandoClass"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46 */ 

(function $lGetExpandoEnumerator$gd__46$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0F.TypeRef("System.String"), $asm0F.TypeRef("System.Object")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "data", $asm15.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Current", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.GetMemberBinder */ 

(function GetMemberBinder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.SetMemberBinder */ 

(function SetMemberBinder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic.Utils");
/* class System.Dynamic.Utils.TypeUtils */ 

(function TypeUtils$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AreEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_mscorlib", $asm0F.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_systemCore", $asm0F.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.CacheDict`2 */ 

(function CacheDict$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CacheDict`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AlignSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "mask", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "entries", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Dynamic.Utils.CacheDict`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Property({Static:false, Public:false}, "Item", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.CacheDict`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CacheDict`2+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.GenericParameter("TKey"), 
          $.GenericParameter("TValue")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "hash", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ContractUtils */ 

(function ContractUtils$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1 */ 

(function ReadOnlyCollectionBuilder$b1$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm0F.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidTypeException", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNullValue", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm0F.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_builder", $asm15.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq");
/* interface System.Linq.IQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["out T"], function ($) {
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1").out()]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Enumerable */ 

(function Enumerable$Members () {
  var $, $thisType;


































  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm0F.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm0F.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+Iterator`1 */ 

(function Iterator$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32);

    $.Field({Static:false, Public:false}, "state", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereEnumerableIterator`1 */ 

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereEnumerableIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereEnumerableIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereArrayIterator`1 */ 

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereArrayIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereArrayIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereListIterator`1 */ 

(function WhereListIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereListIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereListIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectEnumerableIterator`2 */ 

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectArrayIterator`2 */ 

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectArrayIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectArrayIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectListIterator`2 */ 

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectListIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectListIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm0F.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+<>c__DisplayClass6_0`1 */ 

(function $l$gc__DisplayClass6_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass6_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombinePredicates$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "predicate1", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "predicate2", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass7_0`3 */ 

(function $l$gc__DisplayClass7_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass7_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TMiddle", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombineSelectors$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "selector2", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:true }, "selector1", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__17`2 */ 

(function $lSelectManyIterator$gd__17$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__17`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm0F.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeIterator>d__25`1 */ 

(function $lTakeIterator$gd__25$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeIterator>d__25`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipIterator>d__31`1 */ 

(function $lSkipIterator$gd__31$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipIterator>d__31`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "$le$g5__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ConcatIterator>d__59`1 */ 

(function $lConcatIterator$gd__59$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ConcatIterator>d__59`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DistinctIterator>d__64`1 */ 

(function $lDistinctIterator$gd__64$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DistinctIterator>d__64`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ExceptIterator>d__73`1 */ 

(function $lExceptIterator$gd__73$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ExceptIterator>d__73`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm15.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ReverseIterator>d__75`1 */ 

(function $lReverseIterator$gd__75$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ReverseIterator>d__75`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lbuffer$g5__1", $asm15.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<OfTypeIterator>d__95`1 */ 

(function $lOfTypeIterator$gd__95$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<OfTypeIterator>d__95`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<CastIterator>d__97`1 */ 

(function $lCastIterator$gd__97$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<CastIterator>d__97`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm0F.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 4 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* interface System.Linq.IGrouping`2 */ 

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["out TKey", "out TElement"], function ($) {
  }, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2").out()]), $asm0F.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Linq.Set`1+Slot", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Set`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Set`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Buffer`1 */ 

(function Buffer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "System.Linq.Buffer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), null)
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Strings */ 

(function Strings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Error */ 

(function Error$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SR */ 

(function SR$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Parallel");
/* class System.Linq.Parallel.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_dict", $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "m_defaultKeyGrouping", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10 */ 

(function $lGetEnumerator$gd__10$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm15.TypeRef("System.Linq.Parallel.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm15.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm0F.TypeRef("System.IDisposable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Linq.Expressions");
/* class System.Linq.Expressions.Strings */ 

(function Strings$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionReadOnly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationIsDone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidArgumentValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeReducible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustReduceToDifferent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducedNotCompatible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidNullValue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidObjectType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

    $.Property({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String);

    $.Property({Static:true , Public:false}, "MustReduceToDifferent", $.String);

    $.Property({Static:true , Public:false}, "ReducedNotCompatible", $.String);

    $.Property({Static:true , Public:false}, "MustBeReducible", $.String);

    $.Property({Static:true , Public:false}, "CollectionReadOnly", $.String);

    $.Property({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String);

    $.Property({Static:true , Public:false}, "EnumerationIsDone", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Error */ 

(function Error$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionReadOnly", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerationIsDone", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBeReducible", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustReduceToDifferent", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducedNotCompatible", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression */ 

(function Expression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReduceAndCheck", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitChildren", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_LambdaDelegateCache", $asm15.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false}, "_legacyCtorSupportTable", $asm0F.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $asm15.TypeRef("System.Linq.Expressions.Expression+ExtensionInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ExtensionInfo */ 

(function ExtensionInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ExtensionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, ReadOnly:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm0F.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionVisitor */ 

(function ExpressionVisitor$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionStringBuilder */ 

(function ExpressionStringBuilder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.ExpressionStringBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParam", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm0F.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char, $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:false, Public:false}, "_out", $asm0F.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "_ids", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.ExpressionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.ExpressionType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
    Assign: 46, 
    Block: 47, 
    DebugInfo: 48, 
    Decrement: 49, 
    Dynamic: 50, 
    Default: 51, 
    Extension: 52, 
    Goto: 53, 
    Increment: 54, 
    Index: 55, 
    Label: 56, 
    RuntimeVariables: 57, 
    Loop: 58, 
    Switch: 59, 
    Throw: 60, 
    Try: 61, 
    Unbox: 62, 
    AddAssign: 63, 
    AndAssign: 64, 
    DivideAssign: 65, 
    ExclusiveOrAssign: 66, 
    LeftShiftAssign: 67, 
    ModuloAssign: 68, 
    MultiplyAssign: 69, 
    OrAssign: 70, 
    PowerAssign: 71, 
    RightShiftAssign: 72, 
    SubtractAssign: 73, 
    AddAssignChecked: 74, 
    MultiplyAssignChecked: 75, 
    SubtractAssignChecked: 76, 
    PreIncrementAssign: 77, 
    PreDecrementAssign: 78, 
    PostIncrementAssign: 79, 
    PostDecrementAssign: 80, 
    TypeEqual: 81, 
    OnesComplement: 82, 
    IsTrue: 83, 
    IsFalse: 84, 
  }
);

/* class System.Linq.Expressions.LabelTarget */ 

(function LabelTarget$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.LabelTarget", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LambdaExpression */ 

(function LambdaExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.Type"), $.String, 
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.Boolean, 
          $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tailCall", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Body", $asm15.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression`1 */ 

(function Expression$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.LambdaExpression"), 
      Name: "System.Linq.Expressions.Expression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TDelegate"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm0F.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("TDelegate")]), [$asm15.TypeRef("System.Linq.Expressions.Expression"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm15.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ParameterExpression */ 

(function ParameterExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ParameterExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Linq.Expressions.Expression"), [$asm15.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm15.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.StackGuard+<>c__4`3 */ 

(function $l$gc__4$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.StackGuard+<>c__4`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunOnEmptyStack$gb__4_0", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm15.TypeRef("System.Linq.Expressions.StackGuard+<>c__4`3", [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3")
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__4_0", $asm0F.TypeRef("System.Func`2", [$.Object, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SR */ 

(function SR$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm0F.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm0F.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm0F.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
/* class System.Linq.Expressions.Compiler.KeyedQueue`2 */ 

(function KeyedQueue$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.KeyedQueue`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $asm12.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("V")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

