/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm01 = JSIL.DeclareAssembly("Fusee.Base.Core, Version=0.7.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Base");
JSIL.DeclareNamespace("Fusee.Base.Core");
/* class Fusee.Base.Core.AssetStorage */ 

(function AssetStorage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm00.Fusee.Base.Common.IAssetProvider))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm11.ProtoBuf.ProtoContractAttribute)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Reflection.MemberInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0C.Fusee.Serialization.Serializer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.IO.MemoryStream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm11.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.IO.Stream)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm00.Fusee.Base.Common.IAssetProvider), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.IO.MemoryStream, null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.IO.Stream, $asm0F.System.Object]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [
        $asm0F.System.IO.Stream, $asm0F.System.Object, 
        $asm0F.System.Type
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("Fusee.Base.Common.IAssetProvider")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider.CanGet)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IAssetProvider.GetAsset)) ();
  };


  function AssetStorage__ctor () {
    this._providers = $S00().Construct();
  }; 

  function AssetStorage_DeepCopy$b1 (T, source) {
    var flag = $T04().OfType$b1($T03())($T05().$Cast((JSIL.GetType(source)).GetCustomAttributes(true))) === null;
    if (flag) {
      throw $S01().Construct(("DeepCopy: ProtoBuf.ProtoContractAttribute is not defined on '" + (JSIL.GetType(source)).get_Name() + "'!"));
    }
    var ser = new ($T09())();
    var stream = $S02().Construct();
    $S03().CallVirtual("Serialize", null, ser, stream, JSIL.CloneParameter(T, source));
    stream.set_Position($T0D().Create(0, 0, 0));
    return T.$As($S04().CallVirtual("Deserialize", null, ser, stream, null, T));
  }; 

  function AssetStorage_Get$b1 (T, id) {
    return $thisType.get_Instance().GetAsset$b1(T)(id);
  }; 

  function AssetStorage_get_Instance () {
    var arg_14_0 = null;
    if ((arg_14_0 = $thisType._instance) === null) {
      arg_14_0 = $thisType._instance = new $thisType();
    }
    return arg_14_0;
  }; 

  function AssetStorage_GetAsset$b1 (T, id) {
    var $temp00;

    for (var a$0 = this._providers._items, i$0 = 0, l$0 = (this._providers._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var assetProvider = a$0[i$0];
      var flag = $IM00().Call(assetProvider, null, id, T);
      if (flag) {
        var result = JSIL.CloneParameter(T, T.$Cast($IM01().Call(assetProvider, null, id, T)));
        return result;
      }
    }
    result = (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
    return result;
  }; 

  function AssetStorage_RegisterAssetProvider (assetProvider) {
    var flag = (this._providers).Contains(assetProvider);
    if (flag) {
      throw $S01().Construct(JSIL.ConcatString("Asset Provider already registered ", assetProvider));
    }
    $S05().CallVirtual("Add", null, this._providers, assetProvider);
  }; 

  function AssetStorage_RegisterProvider (assetProvider) {
    $thisType.get_Instance().RegisterAssetProvider(assetProvider);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.AssetStorage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AssetStorage__ctor
    );

    $.Method({Static:true , Public:true }, "DeepCopy", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      AssetStorage_DeepCopy$b1
    );

    $.Method({Static:true , Public:true }, "Get", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      AssetStorage_Get$b1
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      AssetStorage_get_Instance
    );

    $.Method({Static:false, Public:true }, "GetAsset", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      AssetStorage_GetAsset$b1
    );

    $.Method({Static:false, Public:true }, "RegisterAssetProvider", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IAssetProvider")), 
      AssetStorage_RegisterAssetProvider
    );

    $.Method({Static:true , Public:true }, "RegisterProvider", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IAssetProvider")), 
      AssetStorage_RegisterProvider
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_providers", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Fusee.Base.Common.IAssetProvider")]));

    $.Field({Static:true , Public:false}, "_instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.Diagnostics */ 

(function Diagnostics$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Fusee.Base.Core.Diagnostics", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalProperty({Static:true , Public:true }, "Timer", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.Font */ 

(function Font$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm00.Fusee.Base.Common.GlyphInfo))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm0A.Fusee.Math.Core.Curve))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm0F.System.Single))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.Curve)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Fusee.Base.Common.GlyphInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm00.Fusee.Base.Common.GlyphInfo), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm0A.Fusee.Math.Core.Curve), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.UInt32, $asm0F.System.Single), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.get_PixelHeight)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.get_UseKerning)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetGlyphCurve)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetGlyphInfo)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetKerning)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetUnscaledAdvance)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.GetUnscaledKerning)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.RenderGlyph)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.set_PixelHeight)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm00.Fusee.Base.Common.IFontImp.set_UseKerning)) ();
  };


  function Font__ctor () {
    this._glyphInfoCache = $S00().Construct();
    this._glyphCurveChache = $S01().Construct();
    this._glyphAdvanceCache = $S02().Construct();
  }; 

  function Font_get_PixelHeight () {
    return $IM00().Call(this._fontImp, null);
  }; 

  function Font_get_UseKerning () {
    return $IM01().Call(this._fontImp, null);
  }; 

  function Font_GetGlyphCurve (c) {
    var curve = new JSIL.BoxedVariable(null);
    var flag = (this._glyphCurveChache).TryGetValue(c, /* ref */ curve);
    if (flag) {
      var result = curve.get();
    } else {
      curve.set($IM02().Call(this._fontImp, null, c));
      (this._glyphCurveChache).set_Item(c, curve.get());
      result = curve.get();
    }
    return result;
  }; 

  function Font_GetGlyphInfo (c) {
    var ret = new JSIL.BoxedVariable(new ($T07())());
    var flag = (this._glyphInfoCache).TryGetValue(c, /* ref */ ret);
    if (flag) {
      var result = ret.get().MemberwiseClone();
    } else {
      ret.set($IM03().Call(this._fontImp, null, c).MemberwiseClone());
      (this._glyphInfoCache).set_Item(c, ret.get().MemberwiseClone());
      result = ret.get().MemberwiseClone();
    }
    return result;
  }; 

  function Font_GetKerning (leftC, rightC) {
    return $IM04().Call(this._fontImp, null, leftC, rightC);
  }; 

  function Font_GetUnscaledAdvance (c) {
    var ret = new JSIL.BoxedVariable(0);
    var flag = (this._glyphAdvanceCache).TryGetValue(c, /* ref */ ret);
    if (flag) {
      var result = +ret.get();
    } else {
      ret.set($IM05().Call(this._fontImp, null, c));
      (this._glyphAdvanceCache).set_Item(c, ret.get());
      result = +ret.get();
    }
    return result;
  }; 

  function Font_GetUnscaledKerning (leftC, rightC) {
    return $IM06().Call(this._fontImp, null, leftC, rightC);
  }; 

  function Font_RenderGlyph (c, /* ref */ bitmapLeft, /* ref */ bitmapTop) {
    return $IM07().Call(this._fontImp, null, c, /* ref */ bitmapLeft, /* ref */ bitmapTop);
  }; 

  function Font_set_PixelHeight (value) {
    $IM08().Call(this._fontImp, null, value);
  }; 

  function Font_set_UseKerning (value) {
    $IM09().Call(this._fontImp, null, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.Font", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Font__ctor
    );

    $.Method({Static:false, Public:true }, "get_PixelHeight", 
      JSIL.MethodSignature.Return($.UInt32), 
      Font_get_PixelHeight
    );

    $.Method({Static:false, Public:true }, "get_UseKerning", 
      JSIL.MethodSignature.Return($.Boolean), 
      Font_get_UseKerning
    );

    $.Method({Static:false, Public:true }, "GetGlyphCurve", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.Curve"), [$.UInt32]), 
      Font_GetGlyphCurve
    );

    $.Method({Static:false, Public:true }, "GetGlyphInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.GlyphInfo"), [$.UInt32]), 
      Font_GetGlyphInfo
    );

    $.Method({Static:false, Public:true }, "GetKerning", 
      new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32]), 
      Font_GetKerning
    );

    $.Method({Static:false, Public:true }, "GetUnscaledAdvance", 
      new JSIL.MethodSignature($.Single, [$.UInt32]), 
      Font_GetUnscaledAdvance
    );

    $.Method({Static:false, Public:true }, "GetUnscaledKerning", 
      new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32]), 
      Font_GetUnscaledKerning
    );

    $.Method({Static:false, Public:true }, "RenderGlyph", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.IImageData"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Font_RenderGlyph
    );

    $.Method({Static:false, Public:true }, "set_PixelHeight", 
      JSIL.MethodSignature.Action($.UInt32), 
      Font_set_PixelHeight
    );

    $.Method({Static:false, Public:true }, "set_UseKerning", 
      JSIL.MethodSignature.Action($.Boolean), 
      Font_set_UseKerning
    );

    $.Field({Static:false, Public:true }, "_fontImp", $asm00.TypeRef("Fusee.Base.Common.IFontImp"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_glyphInfoCache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm00.TypeRef("Fusee.Base.Common.GlyphInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_glyphCurveChache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm0A.TypeRef("Fusee.Math.Core.Curve")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_glyphAdvanceCache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $.Single]));

    $.Property({Static:false, Public:true }, "UseKerning", $.Boolean);

    $.Property({Static:false, Public:true }, "PixelHeight", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.ImageData */ 

(function ImageData$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorFormat)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData_CopyFunc)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm00.Fusee.Base.Common.ScanLine))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Fusee.Base.Common.ScanLine)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Fusee.Base.Common.ColorUint)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Buffer)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData_$lScanLines$gd__15)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Array, $asm0F.System.Int32, 
        $asm0F.System.Array, $asm0F.System.Int32, 
        $asm0F.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [System.Array.Of($asm0F.System.Byte), $asm0F.System.Int32]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Width)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_Height)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_PixelFormat)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.ScanLines)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm00.Fusee.Base.Common.ScanLine).get_Current)) ();
  };


  function ImageData__ctor (pixelData, width, height, colorFormat) {
    this.ImageData$PixelData$value = pixelData;
    this.ImageData$Width$value = (width | 0);
    this.ImageData$Height$value = (height | 0);
    this.ImageData$PixelFormat$value = colorFormat.MemberwiseClone();
  }; 

  function ImageData_$lBlt$gb__14_0 (srcScanLineBytes, destinationIndex) {
    $S00().CallStatic($T03(), "Copy", null, 
      srcScanLineBytes, 
      0, 
      this.ImageData$PixelData$value, 
      destinationIndex, 
      srcScanLineBytes.length
    );
  }; 

  function ImageData_$lBlt$gb__14_1 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 3) | 0)) {
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] = (srcLineBytes[((i + 1) | 0)] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] = (srcLineBytes[((i + 2) | 0)] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 3) | 0)] = 255;
    }
  }; 

  function ImageData_$lBlt$gb__14_2 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 1) | 0)) {
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 3) | 0)] = 255;
    }
  }; 

  function ImageData_$lBlt$gb__14_3 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 4) | 0)) {
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] = (srcLineBytes[((i + 1) | 0)] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] = (srcLineBytes[((i + 2) | 0)] | 0);
    }
  }; 

  function ImageData_$lBlt$gb__14_4 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 1) | 0)) {
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] = (srcLineBytes[i] | 0);
      this.ImageData$PixelData$value[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] = (srcLineBytes[i] | 0);
    }
  }; 

  function ImageData_$lBlt$gb__14_5 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 3) | 0)) {
      var r = (srcLineBytes[(((destinationIndex | 0) + i) | 0)] | 0);
      var g = (srcLineBytes[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] | 0);
      var b = (srcLineBytes[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] | 0);
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (((((((((((((r + r) | 0) + b) | 0) + g) | 0) + g) | 0) + g) | 0) / 6) | 0) & 0xFF);
    }
  }; 

  function ImageData_$lBlt$gb__14_6 (srcLineBytes, destinationIndex) {

    for (var i = 0; i < (srcLineBytes.length | 0); i = ((i + 4) | 0)) {
      var r = (srcLineBytes[(((destinationIndex | 0) + i) | 0)] | 0);
      var g = (srcLineBytes[(((((destinationIndex | 0) + i) | 0) + 1) | 0)] | 0);
      var b = (srcLineBytes[(((((destinationIndex | 0) + i) | 0) + 2) | 0)] | 0);
      this.ImageData$PixelData$value[(((destinationIndex | 0) + i) | 0)] = (((((((((((((r + r) | 0) + b) | 0) + g) | 0) + g) | 0) + g) | 0) / 6) | 0) & 0xFF);
    }
  }; 

  function ImageData_Blt ($xDst, $yDst, src, $xSrc, $ySrc, $width, $height) {
    var height = new JSIL.BoxedVariable($height);
    var ySrc = new JSIL.BoxedVariable($ySrc);
    var yDst = new JSIL.BoxedVariable($yDst);
    var width = new JSIL.BoxedVariable($width);
    var xSrc = new JSIL.BoxedVariable($xSrc);
    var xDst = new JSIL.BoxedVariable($xDst);
    var flag = (width.get() | 0) === 0;
    if (flag) {
      width.set($IM00().Call(src, null));
    }
    var flag2 = (height.get() | 0) === 0;
    if (flag2) {
      height.set($IM01().Call(src, null));
    }
    $thisType.ClipBlt(
      /* ref */ xDst, 
      this.get_Width(), 
      /* ref */ xSrc, 
      $IM00().Call(src, null), 
      /* ref */ width
    );
    $thisType.ClipBlt(
      /* ref */ yDst, 
      this.get_Height(), 
      /* ref */ ySrc, 
      $IM01().Call(src, null), 
      /* ref */ height
    );
    var flag3 = ((width.get() | 0) <= 0) || 
    ((height.get() | 0) <= 0);
    if (!flag3) {
      var flag4 = (JSIL.ObjectEqualsInstance(this.get_PixelFormat().ImagePixelFormat$ColorFormat$value, $IM02().Call(src, null).ImagePixelFormat$ColorFormat$value, !false, $T08().__Type__));
      if (flag4) {
        var copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_0", $S01(), false, false));
      } else {
        switch ((this.get_PixelFormat().ImagePixelFormat$ColorFormat$value).valueOf()) {
          case 0: 
            var colorFormat = $IM02().Call(src, null).ImagePixelFormat$ColorFormat$value;
            if (colorFormat !== $T07().RGB) {
              if (colorFormat !== $T07().Intensity) {
                throw $S02().Construct("src", "Unknown source pixel format to copy to RGBA");
              }
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_2", $S03(), false, false));
            } else {
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_1", $S04(), false, false));
            }
            break;

          case 1: 
            var colorFormat2 = $IM02().Call(src, null).ImagePixelFormat$ColorFormat$value;
            if ((colorFormat2.valueOf() | 0) !== 0) {
              if (colorFormat2 !== $T07().Intensity) {
                throw $S02().Construct("src", "Unknown source pixel format to copy to RGB");
              }
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_4", $S05(), false, false));
            } else {
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_3", $S06(), false, false));
            }
            break;

          case 2: 
            var colorFormat3 = $IM02().Call(src, null).ImagePixelFormat$ColorFormat$value;
            if ((colorFormat3.valueOf() | 0) !== 0) {
              if (colorFormat3 !== $T07().RGB) {
                throw $S02().Construct("src", "Unknown source pixel format to copy to RGB");
              }
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_5", $S07(), false, false));
            } else {
              copyLine = $T09().New(this, null, new JSIL.MethodPointerInfo($thisType, "$lBlt$gb__14_6", $S08(), false, false));
            }
            break;

          default: 
            throw $S02().Construct(this.toString(), "Unknown destination pixel format");

        }
      }

      for (var srcEnumerator = $IM03().Call(src, null, xSrc.get(), ySrc.get(), width.get(), height.get()); $IM04().Call(srcEnumerator, null); ) {
        var srcScanLine = $IM05().Call(srcEnumerator, null);
        if (srcScanLine !== null) {
          var srcScanLineBytes = srcScanLine.GetScanLineBytes();
          var destinationIndex = ((Math.imul(Math.imul(yDst.get(), (this.get_PixelFormat()).get_BytesPerPixel()), this.get_Width()) + Math.imul(xDst.get(), (this.get_PixelFormat()).get_BytesPerPixel())) | 0);
          copyLine(srcScanLineBytes, destinationIndex);
          yDst.set((((yDst.get() | 0) + 1) | 0));
        }
      }
    }
  }; 

  function ImageData_ClipBlt (/* ref */ iDst, sizeDst, /* ref */ iSrc, sizeSrc, /* ref */ sizeBlk) {
    var iDeltaL = ((
      ((iDst.get() | 0) < (iSrc.get() | 0))
         ? iDst.get()
         : iSrc.get())
     | 0);
    var flag = iDeltaL > 0;
    if (flag) {
      iDeltaL = 0;
    }
    var dstRb = (((((iDst.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeDst | 0)) | 0);
    var srcRb = (((((iSrc.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeSrc | 0)) | 0);
    var iDeltaR = ((
      (dstRb > srcRb)
         ? dstRb
         : srcRb)
     | 0);
    var flag2 = iDeltaR < 0;
    if (flag2) {
      iDeltaR = 0;
    }
    iDst.set((((iDst.get() | 0) - iDeltaL) | 0));
    iSrc.set((((iSrc.get() | 0) - iDeltaL) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) + iDeltaL) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) - iDeltaR) | 0));
    var flag3 = (sizeBlk.get() | 0) < 0;
    if (flag3) {
      sizeBlk.set(0);
    }
  }; 

  function ImageData_CreateImage (width, height, color) {
    var nPixels = Math.imul(width, height);
    var nBytes = Math.imul(nPixels, 4);
    var pxls = JSIL.Array.New($T01(), nPixels);

    for (var i = 0; i < (pxls.length | 0); i = ((i + 1) | 0)) {
      pxls[i] = (color.ToBgra() | 0);
    }
    var ret = new $thisType(JSIL.Array.New($T04(), nBytes), width, height, new ($T02())($T07().RGBA));
    $T10().BlockCopy(
      pxls, 
      0, 
      ret.ImageData$PixelData$value, 
      0, 
      nBytes
    );
    return ret;
  }; 

  function ImageData_get_Height () {
    return this.ImageData$Height$value;
  }; 

  function ImageData_get_IsEmpty () {
    return (((this.get_Width() | 0) <= 0) || ((this.get_Height() | 0) <= 0));
  }; 

  function ImageData_get_PixelData () {
    return this.ImageData$PixelData$value;
  }; 

  function ImageData_get_PixelFormat () {
    return this.ImageData$PixelFormat$value;
  }; 

  function ImageData_get_Width () {
    return this.ImageData$Width$value;
  }; 

  function ImageData_ScanLines (xSrc, ySrc, width, height) {
    var expr_06 = new ($T11())(0);
    expr_06.$l$g4__this = this;
    expr_06.xSrc = (xSrc | 0);
    expr_06.ySrc = (ySrc | 0);
    expr_06.width = (width | 0);
    expr_06.height = (height | 0);
    return expr_06;
  }; 

  function ImageData_set_PixelData (value) {
    this.ImageData$PixelData$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.ImageData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat")
        ]), 
      ImageData__ctor
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_0", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_0
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_1", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_1
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_2", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_2
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_3", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_3
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_4", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_4
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_5", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_5
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__14_6", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      ImageData_$lBlt$gb__14_6
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Blt", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Fusee.Base.Common.IImageData"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      ImageData_Blt
    );

    $.Method({Static:true , Public:false}, "ClipBlt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ImageData_ClipBlt
    );

    $.Method({Static:true , Public:true }, "CreateImage", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Fusee.Base.Common.ColorUint")
        ]), 
      ImageData_CreateImage
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      ImageData_get_Height
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean), 
      ImageData_get_IsEmpty
    );

    $.Method({Static:false, Public:true }, "get_PixelData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      ImageData_get_PixelData
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PixelFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat")), 
      ImageData_get_PixelFormat
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      ImageData_get_Width
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ScanLines", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Fusee.Base.Common.ScanLine")]), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      ImageData_ScanLines
    );

    $.Method({Static:false, Public:true }, "set_PixelData", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      ImageData_set_PixelData
    );

    $.Field({Static:false, Public:false}, "ImageData$PixelData$value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ImageData$Width$value", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ImageData$Height$value", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ImageData$PixelFormat$value", $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"));

    $.Property({Static:false, Public:true }, "PixelData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "PixelFormat", $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmpty", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Fusee.Base.Common.IImageData")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Base.Core.ImageData+CopyFunc */ 

JSIL.MakeDelegate("Fusee.Base.Core.ImageData+CopyFunc", false, [], 
  new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Byte")]), $asm0F.TypeRef("System.Int32")]));

/* class Fusee.Base.Core.ImageData+<ScanLines>d__15 */ 

(function $lScanLines$gd__15$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Fusee.Base.Common.ScanLine)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lScanLines$gd__15__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
  }; 

  function $lScanLines$gd__15_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      if (num !== 1) {
        return false;
      }
      this.$l$g1__state = -1;
      var num2 = (this.$li$g5__1 | 0);
      this.$li$g5__1 = ((num2 + 1) | 0);
    } else {
      this.$l$g1__state = -1;
      var flag = (((this.xSrc | 0) + (this.width | 0)) | 0) > ((this.$l$g4__this).get_Width() | 0);
      if (flag) {
        throw $S00().Construct(JSIL.ConcatString("Cannot get ScanLineEnumerator due to exceeding ImageData Width=", $T00().$Box((this.$l$g4__this).get_Width()), ". Choose xSrc+width to be smaller than Width of ImageData"));
      }
      var flag2 = (((this.ySrc | 0) + (this.height | 0)) | 0) > ((this.$l$g4__this).get_Height() | 0);
      if (flag2) {
        throw $S00().Construct(JSIL.ConcatString("Cannot get ScanLineEnumerator due to exceeding ImageData Height=", $T00().$Box((this.$l$g4__this).get_Height()), ". Choose ySrc+height to be smaller than Height of ImageData"));
      }
      this.$li$g5__1 = (this.ySrc | 0);
    }
    if ((this.$li$g5__1 | 0) >= (((this.ySrc | 0) + (this.height | 0)) | 0)) {
      return false;
    }
    this.$lsrcOffset$g5__2 = ((Math.imul(Math.imul(((this.$l$g4__this).get_PixelFormat()).get_BytesPerPixel(), (this.$l$g4__this).get_Width()), this.$li$g5__1) + Math.imul(this.xSrc, ((this.$l$g4__this).get_PixelFormat()).get_BytesPerPixel())) | 0);
    this.$l$g2__current = new ($T06())(this.$l$g4__this.ImageData$PixelData$value, this.$lsrcOffset$g5__2, this.width, (this.$l$g4__this).get_PixelFormat().MemberwiseClone());
    this.$l$g1__state = 1;
    return true;
  }; 

  function $lScanLines$gd__15_System_Collections_Generic_IEnumerator$lFusee_Base_Common_ScanLine$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lScanLines$gd__15_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lScanLines$gd__15_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  }; 

  function $lScanLines$gd__15_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.ImageData+<ScanLines>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lScanLines$gd__15__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lScanLines$gd__15_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Base.Common.ScanLine$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ScanLine")), 
      $lScanLines$gd__15_System_Collections_Generic_IEnumerator$lFusee_Base_Common_ScanLine$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Fusee.Base.Common.ScanLine")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lScanLines$gd__15_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lScanLines$gd__15_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lScanLines$gd__15_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Fusee.Base.Common.ScanLine"));

    $.Field({Static:false, Public:true }, "xSrc", $.Int32);

    $.Field({Static:false, Public:true }, "ySrc", $.Int32);

    $.Field({Static:false, Public:true }, "width", $.Int32);

    $.Field({Static:false, Public:true }, "height", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm01.TypeRef("Fusee.Base.Core.ImageData"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lsrcOffset$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Base.Common.ScanLine$g.Current", $asm00.TypeRef("Fusee.Base.Common.ScanLine"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Fusee.Base.Common.ScanLine")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.IO */ 

(function IO$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Fusee.Base.Common.IIOImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.FileMode)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IIOImp.StreamFromFile)) ();
  };


  function IO_get_IOImp () {
    return $thisType.IO$IOImp$value;
  }; 

  function IO_set_IOImp (value) {
    $thisType.IO$IOImp$value = value;
  }; 

  function IO_StreamFromFile (path, mode) {
    return $IM00().Call($thisType.IO$IOImp$value, null, path, mode);
  }; 

  JSIL.MakeStaticClass("Fusee.Base.Core.IO", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_IOImp", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.IIOImp")), 
      IO_get_IOImp
    );

    $.Method({Static:true , Public:true }, "set_IOImp", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.IIOImp")), 
      IO_set_IOImp
    );

    $.Method({Static:true , Public:true }, "StreamFromFile", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.IO.Stream"), [$.String, $asm00.TypeRef("Fusee.Base.Common.FileMode")]), 
      IO_StreamFromFile
    );

    $.Field({Static:true , Public:false}, "IO$IOImp$value", $asm00.TypeRef("Fusee.Base.Common.IIOImp"));

    $.Property({Static:true , Public:true }, "IOImp", $asm00.TypeRef("Fusee.Base.Common.IIOImp"))
      .Attribute($asm00.TypeRef("Fusee.Base.Common.InjectMeAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Fusee.Base.Core.NamespaceDoc", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Base.Core.ScanLineEnumerator */ 

(function ScanLineEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Buffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.ScanLine)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function ScanLineEnumerator__ctor (pixelData, pixelFormat, xSrc, ySrc, width, height, maxWidth) {
    this._pixelData = pixelData;
    this._pixelFormat = pixelFormat.MemberwiseClone();
    this._xSrc = (xSrc | 0);
    this._ySrc = (ySrc | 0);
    this._width = (width | 0);
    this._height = (height | 0);
    this._maxWidth = (maxWidth | 0);
    this._currentPosition = (((this._ySrc | 0) - 1) | 0);
  }; 

  function ScanLineEnumerator_Dispose () {
  }; 

  function ScanLineEnumerator_get_Current () {
    return this.GetCurrentScanLine();
  }; 

  function ScanLineEnumerator_GetCurrentScanLine () {
    var bytesPerLine = Math.imul(this._width, (this._pixelFormat).get_BytesPerPixel());
    var lineByteBuffer = JSIL.Array.New($T03(), bytesPerLine);
    var srcOffset = ((Math.imul(Math.imul((this._pixelFormat).get_BytesPerPixel(), this._maxWidth), this._currentPosition) + Math.imul(this._xSrc, (this._pixelFormat).get_BytesPerPixel())) | 0);
    $T04().BlockCopy(
      this._pixelData, 
      srcOffset, 
      lineByteBuffer, 
      0, 
      bytesPerLine
    );
    return new ($T05())(lineByteBuffer, 0, this._width, this._pixelFormat.MemberwiseClone());
  }; 

  function ScanLineEnumerator_MoveNext () {
    if ((this._currentPosition | 0) < (((this._ySrc | 0) + (this._height | 0)) | 0)) {
      this._currentPosition = (((this._currentPosition | 0) + 1) | 0);
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function ScanLineEnumerator_Reset () {
    this._currentPosition = (((this._ySrc | 0) - 1) | 0);
  }; 

  function ScanLineEnumerator_System_Collections_IEnumerator_get_Current () {
    return this.get_Current();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Base.Core.ScanLineEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      ScanLineEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ScanLineEnumerator_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ScanLine")), 
      ScanLineEnumerator_get_Current
    );

    $.Method({Static:false, Public:false}, "GetCurrentScanLine", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ScanLine")), 
      ScanLineEnumerator_GetCurrentScanLine
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      ScanLineEnumerator_MoveNext
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void, 
      ScanLineEnumerator_Reset
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      ScanLineEnumerator_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pixelData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pixelFormat", $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_xSrc", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ySrc", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_width", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_height", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxWidth", $.Int32);

    $.Field({Static:false, Public:false}, "_currentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm00.TypeRef("Fusee.Base.Common.ScanLine"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Fusee.Base.Common.ScanLine")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

