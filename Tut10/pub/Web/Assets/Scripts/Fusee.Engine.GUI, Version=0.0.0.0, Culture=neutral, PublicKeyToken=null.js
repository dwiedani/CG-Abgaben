/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm05 = JSIL.DeclareAssembly("Fusee.Engine.GUI, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.GUI");
/* delegate Fusee.Engine.GUI.GUIButtonHandler */ 

JSIL.MakeDelegate("Fusee.Engine.GUI.GUIButtonHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm05.TypeRef("Fusee.Engine.GUI.GUIButton"), $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonEventArgs")]));

/* class Fusee.Engine.GUI.GUIButtonEventArgs */ 

(function GUIButtonEventArgs$Members () {
  var $, $thisType;

  function GUIButtonEventArgs__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUI.GUIButtonEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GUIButtonEventArgs__ctor
    );

    $.Field({Static:false, Public:true }, "mouseX", $.Int32);

    $.Field({Static:false, Public:true }, "mouseY", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIElement */ 

(function GUIElement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.UInt32))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0A.Fusee.Math.Core.M)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.Fusee.Base.Core.ImageData)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm04.Fusee.Engine.Core.GlyphOnMap)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Fusee.Base.Common.GlyphInfo)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Fusee.Base.Core.Font)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [$asm00.Fusee.Base.Common.IImageData]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float4x4, [$asm0A.Fusee.Math.Core.float4x4, $asm0A.Fusee.Math.Core.float4x4]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };


  function GUIElement__ctor (text, fontMap, x, y, z, width, height, zRot, xPivot, yPivot) {
    this.GUIVS = "#version 300 es\r\n            uniform mat4 guiXForm;\r\n            in vec3 fuVertex;\r\n            in vec2 fuUV;\r\n            in vec4 fuColor;\r\n\r\n            out vec2 vUV;\r\n            out vec4 vColor;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                vColor = fuColor;\r\n\r\n                gl_Position = guiXForm * vec4(fuVertex, 1);\r\n            }";
    this.GUIPS = "#version 300 es\r\n                precision highp float; \r\n  \r\n            in vec2 vUV;\r\n            in vec4 vColor;\r\n\r\n            out vec4 fragColor;\r\n\r\n            void main(void) {\r\n                fragColor = vColor;\r\n            }";
    this.TEXTPS = "#version 300 es\r\n                precision highp float;\r\n  \r\n            in vec2 vUV;\r\n            in vec4 vColor;\r\n\r\n            uniform sampler2D tex;\r\n            uniform vec4 uColor;\r\n\r\n            out vec4 fragColor;\r\n\r\n            void main(void) {\r\n                fragColor = vec4(1.0, 1.0, 1.0, texture(tex, vUV).a) * uColor;\r\n            }";
    this.Dirty = false;
    this.set_PosX(x);
    this.set_PosY(y);
    this.PosZ = (z | 0);
    this.set_OffsetX(0);
    this.set_OffsetY(0);
    this.set_OffsetZ(0);
    this.Width = (width | 0);
    this.Height = (height | 0);
    this.set_Text(text);
    this.FontMap = fontMap;
    this.GUIElement$ZRot$value = +zRot;
    this.GUIElement$XPivot$value = (xPivot | 0);
    this.GUIElement$YPivot$value = (yPivot | 0);
  }; 

  function GUIElement_AttachToContext (rc) {
    var flag = this.RContext === rc;
    if (!flag) {
      if (this.RContext !== null) {
        this.TextShader = null;
      }
      this.RContext = rc;
      if (this.FontMap !== null) {
        this.CreateTextShader($S00().Construct((this.FontMap).get_Image()));
      }
      this.Refresh();
    }
  }; 

  function GUIElement_CreateGUIMesh (vertices, uvs, indices, colors) {
    var flag = this.GUIElement$GUIMesh$value === null;
    if (flag) {
      var expr_14 = new ($T0B())();
      expr_14.set_Vertices(vertices);
      expr_14.set_UVs(uvs);
      expr_14.set_Triangles(indices);
      expr_14.set_Colors(colors);
      this.GUIElement$GUIMesh$value = expr_14;
    } else {
      (this.GUIElement$GUIMesh$value).set_Vertices(vertices);
      (this.GUIElement$GUIMesh$value).set_UVs(uvs);
      (this.GUIElement$GUIMesh$value).set_Triangles(indices);
      (this.GUIElement$GUIMesh$value).set_Colors(colors);
    }
  }; 

  function GUIElement_CreateGUIShader () {
    var expr_08 = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = this.GUIVS;
    effectPassDeclaration.PS = this.GUIPS;
    var expr_33 = new ($T0E())();
    expr_33.set_AlphaBlendEnable(true);
    expr_33.set_SourceBlend($T0F().SourceAlpha);
    expr_33.set_DestinationBlend($T0F().InverseSourceAlpha);
    expr_33.set_ZEnable(true);
    effectPassDeclaration.StateSet = expr_33;
    expr_08[0] = effectPassDeclaration.MemberwiseClone();
    var expr_64 = JSIL.Array.New($T11(), 1);
    var effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "guiXForm";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_64[0] = effectParameterDeclaration.MemberwiseClone();
    this.GUIShader = new ($T13())(expr_08, $T14().$Cast(expr_64));
  }; 

  function GUIElement_CreateTextMesh (vertices, uvs, indices) {
    var flag = this.GUIElement$TextMesh$value === null;
    if (flag) {
      var expr_14 = new ($T0B())();
      expr_14.set_Vertices(vertices);
      expr_14.set_UVs(uvs);
      expr_14.set_Triangles(indices);
      this.GUIElement$TextMesh$value = expr_14;
    } else {
      (this.GUIElement$TextMesh$value).set_Vertices(vertices);
      (this.GUIElement$TextMesh$value).set_UVs(uvs);
      (this.GUIElement$TextMesh$value).set_Triangles(indices);
    }
  }; 

  function GUIElement_CreateTextShader (textAtlas) {
    var expr_08 = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = this.GUIVS;
    effectPassDeclaration.PS = this.TEXTPS;
    var expr_33 = new ($T0E())();
    expr_33.set_AlphaBlendEnable(true);
    expr_33.set_SourceBlend($T0F().SourceAlpha);
    expr_33.set_DestinationBlend($T0F().InverseSourceAlpha);
    expr_33.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_33;
    expr_08[0] = effectPassDeclaration.MemberwiseClone();
    var expr_64 = JSIL.Array.New($T11(), 3);
    var effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "tex";
    effectParameterDeclaration.Value = textAtlas;
    expr_64[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "uColor";
    effectParameterDeclaration.Value = this._textColor.MemberwiseClone();
    expr_64[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T11())();
    effectParameterDeclaration.Name = "guiXForm";
    effectParameterDeclaration.Value = $T12().Identity.MemberwiseClone();
    expr_64[2] = effectParameterDeclaration.MemberwiseClone();
    this.TextShader = new ($T13())(expr_08, $T14().$Cast(expr_64));
  }; 

  function GUIElement_DetachFromContext () {
    this.RContext = null;
  }; 

  function GUIElement_DrawRectangle (c1, c2, c3, c4, vtStart, indStart, color, /* ref */ vertices, /* ref */ indices, /* ref */ colors) {
    vertices.get()[vtStart] = $S01().Construct(c1, c3, 0);
    vertices.get()[(((vtStart | 0) + 1) | 0)] = $S01().Construct(c1, c4, 0);
    vertices.get()[(((vtStart | 0) + 2) | 0)] = $S01().Construct(c2, c3, 0);
    vertices.get()[(((vtStart | 0) + 3) | 0)] = $S01().Construct(c2, c4, 0);
    var colorInt = ($T18().Float4ToABGR(color) >>> 0);
    colors.get()[vtStart] = colorInt;
    colors.get()[(((vtStart | 0) + 1) | 0)] = colorInt;
    colors.get()[(((vtStart | 0) + 2) | 0)] = colorInt;
    colors.get()[(((vtStart | 0) + 3) | 0)] = colorInt;
    indices.get()[indStart] = ((((vtStart | 0) + 1) | 0) & 0xFFFF);
    indices.get()[(((indStart | 0) + 1) | 0)] = (vtStart & 0xFFFF);
    indices.get()[(((indStart | 0) + 2) | 0)] = ((((vtStart | 0) + 2) | 0) & 0xFFFF);
    indices.get()[(((indStart | 0) + 3) | 0)] = ((((vtStart | 0) + 1) | 0) & 0xFFFF);
    indices.get()[(((indStart | 0) + 4) | 0)] = ((((vtStart | 0) + 2) | 0) & 0xFFFF);
    indices.get()[(((indStart | 0) + 5) | 0)] = ((((vtStart | 0) + 3) | 0) & 0xFFFF);
  }; 

  function GUIElement_get_GUIMesh () {
    return this.GUIElement$GUIMesh$value;
  }; 

  function GUIElement_get_OffsetX () {
    return this._offsetX;
  }; 

  function GUIElement_get_OffsetY () {
    return this._offsetY;
  }; 

  function GUIElement_get_OffsetZ () {
    return this._offsetZ;
  }; 

  function GUIElement_get_PosX () {
    return this._posX;
  }; 

  function GUIElement_get_PosY () {
    return this._posY;
  }; 

  function GUIElement_get_Tag () {
    return this.GUIElement$Tag$value;
  }; 

  function GUIElement_get_Text () {
    return this._text;
  }; 

  function GUIElement_get_TextColor () {
    return this._textColor;
  }; 

  function GUIElement_get_TextMesh () {
    return this.GUIElement$TextMesh$value;
  }; 

  function GUIElement_get_XPivot () {
    return this.GUIElement$XPivot$value;
  }; 

  function GUIElement_get_YPivot () {
    return this.GUIElement$YPivot$value;
  }; 

  function GUIElement_get_ZIndex () {
    return (((this.PosZ | 0) + (this._offsetZ | 0)) | 0);
  }; 

  function GUIElement_get_ZRot () {
    return this.GUIElement$ZRot$value;
  }; 

  function GUIElement_PreRender (rc) {
    var flag = this.RContext !== rc;
    if (flag) {
      this.AttachToContext(rc);
    }
    var dirty = this.Dirty;
    if (dirty) {
      this.Refresh();
    }
  }; 

  function GUIElement_Refresh () {
    if (this.RContext !== null) {
      this.Dirty = false;
      this.CreateMesh();
    }
  }; 

  function GUIElement_Render (rc) {
    this.PreRender(rc);
    var clipPivot = $S01().Construct((+(((+(this.GUIElement$XPivot$value) * 2) / +(this.RContext.RenderContext$ViewportWidth$value))) - 1), (1 - +(((+(this.GUIElement$YPivot$value) * 2) / +(this.RContext.RenderContext$ViewportHeight$value)))), 0);
    var guiXForm = $S02().CallStatic($T12(), "op_Multiply", null, 
      $S02().CallStatic($T12(), "op_Multiply", null, 
        $S02().CallStatic($T12(), "op_Multiply", null, 
          $S02().CallStatic($T12(), "op_Multiply", null, 
            $T12().CreateTranslation(clipPivot.MemberwiseClone()).MemberwiseClone(), 
            $T12().CreateScale(1, +((+(this.RContext.RenderContext$ViewportWidth$value) / +(this.RContext.RenderContext$ViewportHeight$value))), 1).MemberwiseClone()
          ).MemberwiseClone(), 
          $T12().CreateRotationZ(this.GUIElement$ZRot$value).MemberwiseClone()
        ).MemberwiseClone(), 
        $T12().CreateScale(1, +((+(this.RContext.RenderContext$ViewportHeight$value) / +(this.RContext.RenderContext$ViewportWidth$value))), 1).MemberwiseClone()
      ).MemberwiseClone(), 
      $T12().CreateTranslation($T16().op_UnaryNegation(clipPivot.MemberwiseClone()).MemberwiseClone()).MemberwiseClone()
    ).MemberwiseClone();
    if (this.GUIShader !== null) {
      (this.RContext).SetShaderEffect(this.GUIShader);
      (this.GUIShader).SetEffectParam("guiXForm", guiXForm.MemberwiseClone());
      var flag2 = (this.GUIShader !== null) && 
      (this.GUIElement$GUIMesh$value !== null);
      if (flag2) {
        (this.RContext).Render(this.GUIElement$GUIMesh$value);
      }
    }
    if (this.FontMap !== null) {
      (this.RContext).SetShaderEffect(this.TextShader);
      (this.TextShader).SetEffectParam("guiXForm", guiXForm.MemberwiseClone());
      var flag4 = (this.TextShader !== null) && 
      (this.GUIElement$TextMesh$value !== null);
      if (flag4) {
        (this.TextShader).SetEffectParam("uColor", this._textColor.MemberwiseClone());
        (this.RContext).Render(this.GUIElement$TextMesh$value);
      }
    }
  }; 

  function GUIElement_set_GUIMesh (value) {
    this.GUIElement$GUIMesh$value = value;
  }; 

  function GUIElement_set_OffsetX (value) {
    var flag = (value | 0) !== (this._offsetX | 0);
    if (flag) {
      this.Dirty = true;
    }
    this._offsetX = (value | 0);
  }; 

  function GUIElement_set_OffsetY (value) {
    var flag = (value | 0) !== (this._offsetY | 0);
    if (flag) {
      this.Dirty = true;
    }
    this._offsetY = (value | 0);
  }; 

  function GUIElement_set_OffsetZ (value) {
    var flag = (value | 0) !== (this._offsetZ | 0);
    if (flag) {
      this.Dirty = true;
    }
    this._offsetZ = (value | 0);
  }; 

  function GUIElement_set_PosX (value) {
    var flag = (value | 0) !== (this._posX | 0);
    if (flag) {
      this.Dirty = true;
    }
    this._posX = (value | 0);
  }; 

  function GUIElement_set_PosY (value) {
    var flag = (value | 0) !== (this._posY | 0);
    if (flag) {
      this.Dirty = true;
    }
    this._posY = (value | 0);
  }; 

  function GUIElement_set_Tag (value) {
    this.GUIElement$Tag$value = value;
  }; 

  function GUIElement_set_Text (value) {
    var flag = (value != this._text);
    if (flag) {
      this.Dirty = true;
    }
    this._text = value;
  }; 

  function GUIElement_set_TextColor (value) {
    this._textColor = value.MemberwiseClone();
  }; 

  function GUIElement_set_TextMesh (value) {
    this.GUIElement$TextMesh$value = value;
  }; 

  function GUIElement_set_XPivot (value) {
    this.GUIElement$XPivot$value = (value | 0);
  }; 

  function GUIElement_set_YPivot (value) {
    this.GUIElement$YPivot$value = (value | 0);
  }; 

  function GUIElement_set_ZRot (value) {
    this.GUIElement$ZRot$value = +value;
  }; 

  function GUIElement_SetRectangleMesh (borderWidth, rectColor, borderColor) {
    var x = (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0);
    var y = (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0);
    var scaleX = +((2 / +(this.RContext.RenderContext$ViewportWidth$value)));
    var scaleY = +((2 / +(this.RContext.RenderContext$ViewportHeight$value)));
    var xS = -1 + (+x * scaleX);
    var yS = 1 - (+y * scaleY);
    var width = +(this.Width) * scaleX;
    var height = +(this.Height) * scaleY;
    var borderX = +$T1B().Max(0, +borderWidth * scaleX);
    var borderY = +$T1B().Max(0, +borderWidth * scaleY);
    var vertices = new JSIL.BoxedVariable(JSIL.Array.New($T16(), (
          (+borderWidth > 0)
             ? 8
             : 4)
      ));
    var uvs = JSIL.Array.New($T1C(), (
        (+borderWidth > 0)
           ? 8
           : 4)
    );
    var indices = new JSIL.BoxedVariable(JSIL.Array.New($T19(), (
          (+borderWidth > 0)
             ? 12
             : 6)
      ));
    var colors = new JSIL.BoxedVariable(JSIL.Array.New($T17(), (
          (+borderWidth > 0)
             ? 8
             : 4)
      ));
    var c = xS + borderX;
    var c2 = (xS - borderX) + width;
    var c3 = (yS - height) + borderY;
    var c4 = yS - borderY;
    this.DrawRectangle(
      c, 
      c2, 
      c3, 
      c4, 
      0, 
      0, 
      rectColor, 
      /* ref */ vertices, 
      /* ref */ indices, 
      /* ref */ colors
    );
    if (+borderWidth > 0) {
      c = xS;
      c2 = xS + width;
      c3 = yS - height;
      c4 = yS;
      this.DrawRectangle(
        c, 
        c2, 
        c3, 
        c4, 
        4, 
        6, 
        borderColor, 
        /* ref */ vertices, 
        /* ref */ indices, 
        /* ref */ colors
      );
    }
    this.CreateGUIMesh(vertices.get(), uvs, indices.get(), colors.get());
  }; 

  function GUIElement_SetTextMesh (posX, posY) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05;
    if (this.FontMap !== null) {
      var scaleX = +((2 / +(this.RContext.RenderContext$ViewportWidth$value)));
      var scaleY = +((2 / +(this.RContext.RenderContext$ViewportHeight$value)));
      var x = -1 + (+posX * scaleX);
      var y = 1 - (+posY * scaleY);
      var vertices = JSIL.Array.New($T16(), Math.imul(4, this.get_Text().length));
      var uvs = JSIL.Array.New($T1C(), Math.imul(4, this.get_Text().length));
      var indices = JSIL.Array.New($T19(), Math.imul(6, this.get_Text().length));
      var atlasWidth = (((this.FontMap).get_Image()).get_Width() | 0);
      var atlasHeight = (((this.FontMap).get_Image()).get_Height() | 0);
      var index = 0;
      var vertex = 0;
      var text = this.get_Text();

      for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
        var letter = (text[i]);
        var glyphOnMap = (this.FontMap).GetGlyphOnMap(letter.charCodeAt(0)).MemberwiseClone();
        var glyphInfo = ((this.FontMap).get_Font()).GetGlyphInfo(letter.charCodeAt(0)).MemberwiseClone();
        var x2 = x + (+glyphOnMap.BitmapL * scaleX);
        var y2 = -y - (+glyphOnMap.BitmapT * scaleY);
        var w = +glyphOnMap.BitmapW * scaleX;
        var h = +glyphOnMap.BitmapH * scaleY;
        x += +glyphInfo.AdvanceX * scaleX;
        y += +glyphInfo.AdvanceY * scaleY;
        if (!((w <= 1.192093E-07) || (h <= 1.192093E-07))) {
          var bitmapW = +glyphOnMap.BitmapW;
          var bitmapH = +glyphOnMap.BitmapH;
          var texOffsetX = +glyphOnMap.TexOffX;
          var texOffsetY = +glyphOnMap.TexOffY;
          vertices[vertex] = $S01().Construct(x2, (-y2 - h), 0);
          vertices[((vertex + 1) & 0xFFFF)] = $S01().Construct(x2, -y2, 0);
          vertices[((vertex + 2) & 0xFFFF)] = $S01().Construct((x2 + w), (-y2 - h), 0);
          vertices[((vertex + 3) & 0xFFFF)] = $S01().Construct((x2 + w), -y2, 0);
          uvs[vertex] = $S03().Construct(texOffsetX, (texOffsetY + +((bitmapH / +atlasHeight))));
          uvs[((vertex + 1) & 0xFFFF)] = $S03().Construct(texOffsetX, texOffsetY);
          uvs[((vertex + 2) & 0xFFFF)] = $S03().Construct((texOffsetX + +((bitmapW / +atlasWidth))), (texOffsetY + +((bitmapH / +atlasHeight))));
          uvs[((vertex + 3) & 0xFFFF)] = $S03().Construct((texOffsetX + +((bitmapW / +atlasWidth))), texOffsetY);
          indices[($temp00 = index, 
            index = ((index + 1) | 0), 
            $temp00)] = (((vertex + 1) >>> 0) & 0xFFFF);
          indices[($temp01 = index, 
            index = ((index + 1) | 0), 
            $temp01)] = vertex;
          indices[($temp02 = index, 
            index = ((index + 1) | 0), 
            $temp02)] = (((vertex + 2) >>> 0) & 0xFFFF);
          indices[($temp03 = index, 
            index = ((index + 1) | 0), 
            $temp03)] = (((vertex + 1) >>> 0) & 0xFFFF);
          indices[($temp04 = index, 
            index = ((index + 1) | 0), 
            $temp04)] = (((vertex + 2) >>> 0) & 0xFFFF);
          indices[($temp05 = index, 
            index = ((index + 1) | 0), 
            $temp05)] = (((vertex + 3) >>> 0) & 0xFFFF);
          vertex = (((vertex + 4) >>> 0) & 0xFFFF);
        }
      }
      vertices = (this.FontMap).FixTextKerning(vertices, this.get_Text(), scaleX);
      this.CreateTextMesh(vertices, uvs, indices);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUI.GUIElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Int32, $.Int32
        ]), 
      GUIElement__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "AttachToContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIElement_AttachToContext
    );

    $.Method({Static:false, Public:false}, "CreateGUIMesh", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float2")]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16]), $jsilcore.TypeRef("System.Array", [$.UInt32])
        ]), 
      GUIElement_CreateGUIMesh
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateGUIShader", 
      JSIL.MethodSignature.Void, 
      GUIElement_CreateGUIShader
    );

    $.Method({Static:false, Public:false}, "CreateTextMesh", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float2")]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16])
        ]), 
      GUIElement_CreateTextMesh
    );

    $.Method({Static:false, Public:false}, "CreateTextShader", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.Texture")), 
      GUIElement_CreateTextShader
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DetachFromContext", 
      JSIL.MethodSignature.Void, 
      GUIElement_DetachFromContext
    );

    $.Method({Static:false, Public:false}, "DrawRectangle", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("Fusee.Math.Core.float4"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt16])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ]), 
      GUIElement_DrawRectangle
    );

    $.Method({Static:false, Public:true }, "get_GUIMesh", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      GUIElement_get_GUIMesh
    );

    $.Method({Static:false, Public:false}, "get_OffsetX", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_OffsetX
    );

    $.Method({Static:false, Public:false}, "get_OffsetY", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_OffsetY
    );

    $.Method({Static:false, Public:false}, "get_OffsetZ", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_OffsetZ
    );

    $.Method({Static:false, Public:true }, "get_PosX", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_PosX
    );

    $.Method({Static:false, Public:true }, "get_PosY", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_PosY
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      GUIElement_get_Tag
    );

    $.Method({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String), 
      GUIElement_get_Text
    );

    $.Method({Static:false, Public:true }, "get_TextColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIElement_get_TextColor
    );

    $.Method({Static:false, Public:true }, "get_TextMesh", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      GUIElement_get_TextMesh
    );

    $.Method({Static:false, Public:true }, "get_XPivot", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_XPivot
    );

    $.Method({Static:false, Public:true }, "get_YPivot", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_YPivot
    );

    $.Method({Static:false, Public:false}, "get_ZIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIElement_get_ZIndex
    );

    $.Method({Static:false, Public:true }, "get_ZRot", 
      JSIL.MethodSignature.Return($.Single), 
      GUIElement_get_ZRot
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PreRender", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIElement_PreRender
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Refresh", 
      JSIL.MethodSignature.Void, 
      GUIElement_Refresh
    );

    $.Method({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIElement_Render
    );

    $.Method({Static:false, Public:false}, "set_GUIMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      GUIElement_set_GUIMesh
    );

    $.Method({Static:false, Public:false}, "set_OffsetX", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_OffsetX
    );

    $.Method({Static:false, Public:false}, "set_OffsetY", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_OffsetY
    );

    $.Method({Static:false, Public:false}, "set_OffsetZ", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_OffsetZ
    );

    $.Method({Static:false, Public:true }, "set_PosX", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_PosX
    );

    $.Method({Static:false, Public:true }, "set_PosY", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_PosY
    );

    $.Method({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      GUIElement_set_Tag
    );

    $.Method({Static:false, Public:true }, "set_Text", 
      JSIL.MethodSignature.Action($.String), 
      GUIElement_set_Text
    );

    $.Method({Static:false, Public:true }, "set_TextColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIElement_set_TextColor
    );

    $.Method({Static:false, Public:false}, "set_TextMesh", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("Fusee.Serialization.Mesh")), 
      GUIElement_set_TextMesh
    );

    $.Method({Static:false, Public:true }, "set_XPivot", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_XPivot
    );

    $.Method({Static:false, Public:true }, "set_YPivot", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIElement_set_YPivot
    );

    $.Method({Static:false, Public:true }, "set_ZRot", 
      JSIL.MethodSignature.Action($.Single), 
      GUIElement_set_ZRot
    );

    $.Method({Static:false, Public:false}, "SetRectangleMesh", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm0A.TypeRef("Fusee.Math.Core.float4"), 
          $asm0A.TypeRef("Fusee.Math.Core.float4")
        ]), 
      GUIElement_SetRectangleMesh
    );

    $.Method({Static:false, Public:false}, "SetTextMesh", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      GUIElement_SetTextMesh
    );

    $.Field({Static:false, Public:false}, "RContext", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Field({Static:false, Public:false}, "Dirty", $.Boolean);

    $.Field({Static:false, Public:false}, "Height", $.Int32);

    $.Field({Static:false, Public:false}, "Width", $.Int32);

    $.Field({Static:false, Public:false}, "PosZ", $.Int32);

    $.Field({Static:false, Public:false}, "FontMap", $asm04.TypeRef("Fusee.Engine.Core.FontMap"));

    $.Field({Static:false, Public:false}, "ImgSrc", $asm00.TypeRef("Fusee.Base.Common.IImageData"));

    $.Field({Static:false, Public:false}, "GUITexture", $asm04.TypeRef("Fusee.Engine.Core.Texture"));

    $.Field({Static:false, Public:false}, "GUIShader", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Field({Static:false, Public:false}, "TextShader", $asm04.TypeRef("Fusee.Engine.Core.ShaderEffect"));

    $.Field({Static:false, Public:false}, "ColorParam", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "GUIVS", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "GUIPS", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "TEXTPS", $.String);

    $.Field({Static:false, Public:false}, "_posX", $.Int32);

    $.Field({Static:false, Public:false}, "_posY", $.Int32);

    $.Field({Static:false, Public:false}, "_rotation", $asm0A.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_offsetX", $.Int32);

    $.Field({Static:false, Public:false}, "_offsetY", $.Int32);

    $.Field({Static:false, Public:false}, "_offsetZ", $.Int32);

    $.Field({Static:false, Public:false}, "_text", $.String);

    $.Field({Static:false, Public:false}, "_textColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "GUIElement$ZRot$value", $.Single);

    $.Field({Static:false, Public:false}, "GUIElement$XPivot$value", $.Int32);

    $.Field({Static:false, Public:false}, "GUIElement$YPivot$value", $.Int32);

    $.Field({Static:false, Public:false}, "GUIElement$Tag$value", $.Object);

    $.Field({Static:false, Public:false}, "GUIElement$GUIMesh$value", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Field({Static:false, Public:false}, "GUIElement$TextMesh$value", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Property({Static:false, Public:false}, "OffsetX", $.Int32);

    $.Property({Static:false, Public:false}, "OffsetY", $.Int32);

    $.Property({Static:false, Public:false}, "OffsetZ", $.Int32);

    $.Property({Static:false, Public:false}, "ZIndex", $.Int32);

    $.Property({Static:false, Public:true }, "TextColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "PosX", $.Int32);

    $.Property({Static:false, Public:true }, "PosY", $.Int32);

    $.Property({Static:false, Public:true }, "ZRot", $.Single);

    $.Property({Static:false, Public:true }, "XPivot", $.Int32);

    $.Property({Static:false, Public:true }, "YPivot", $.Int32);

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    $.Property({Static:false, Public:true }, "GUIMesh", $asm0B.TypeRef("Fusee.Serialization.Mesh"));

    $.Property({Static:false, Public:true }, "TextMesh", $asm0B.TypeRef("Fusee.Serialization.Mesh"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIButton */ 

(function GUIButton$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIButtonHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIText)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIButtonEventArgs)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.ButtonValueChangedArgs]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.AxisValueChangedArgs]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };


  function GUIButton__ctor$00 (x, y, width, height) {
    $T01().prototype._ctor.call(this, 
      $T02().Empty, 
      null, 
      x, 
      y, 
      0, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupButton();
  }; 

  function GUIButton__ctor$01 (x, y, z, width, height) {
    $T01().prototype._ctor.call(this, 
      $T02().Empty, 
      null, 
      x, 
      y, 
      z, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupButton();
  }; 

  function GUIButton__ctor$02 (text, fontMap, x, y, width, height) {
    $T01().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      0, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupButton();
  }; 

  function GUIButton__ctor$03 (text, fontMap, x, y, z, width, height) {
    $T01().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      z, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupButton();
  }; 

  function GUIButton_add_OnGUIButtonDown (value) {
    var gUIButtonHandler = this.OnGUIButtonDown;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonDown"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_add_OnGUIButtonEnter (value) {
    var gUIButtonHandler = this.OnGUIButtonEnter;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonEnter"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_add_OnGUIButtonLeave (value) {
    var gUIButtonHandler = this.OnGUIButtonLeave;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonLeave"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_add_OnGUIButtonUp (value) {
    var gUIButtonHandler = this.OnGUIButtonUp;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonUp"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_CreateMesh () {
    this.SetRectangleMesh(
      +(this.get_BorderWidth()), 
      this.get_ButtonColor(), 
      this.get_BorderColor()
    );
    var x = (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0);
    var y = (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0);
    var maxW = +$T08().GetTextWidth(this.get_Text(), this.FontMap);
    x = ((Math.round(+x + +(((+(this.Width) - maxW) / 2)))) | 0);
    var maxH = +$T08().GetTextHeight(this.get_Text(), this.FontMap);
    y = ((Math.round((+y + maxH) + +(((+(this.Height) - maxH) / 2)))) | 0);
    this.SetTextMesh(x, y);
  }; 

  function GUIButton_DetachFromContext () {
    $T01().prototype.DetachFromContext.call(this);
    var flag = $T0C().get_Mouse() !== null;
    if (flag) {
      $T0C().get_Mouse().remove_ButtonValueChanged($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseButton", $S00(), false, false)));
      $T0C().get_Mouse().remove_AxisValueChanged($T0F().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseMove", $S01(), false, false)));
    }
    var flag2 = $T0C().get_Touch() !== null;
    if (flag2) {
      $T0C().get_Touch().remove_ButtonValueChanged($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseButton", $S00(), false, false)));
      $T0C().get_Touch().remove_AxisValueChanged($T0F().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseMove", $S01(), false, false)));
    }
  }; 

  function GUIButton_get_BorderColor () {
    return this._borderColor;
  }; 

  function GUIButton_get_BorderWidth () {
    return this._borderWidth;
  }; 

  function GUIButton_get_ButtonColor () {
    return this._buttonColor;
  }; 

  function GUIButton_MouseOnButton () {
    var x = ($T0C().get_Mouse().get_PositionInt().x | 0);
    var y = ($T0C().get_Mouse().get_PositionInt().y | 0);
    return (!((x < (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0)) || 
        (x > (((((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0) + (this.Width | 0)) | 0)) || 
        (y < (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0))) && (y <= (((((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0) + (this.Height | 0)) | 0)));
  }; 

  function GUIButton_OnMouseButton (sender, bvca) {
    var flag = this.MouseOnButton();
    if (flag) {
      var pressed = bvca.Pressed;
      if (pressed) {
        var expr_1E = this.OnGUIButtonDown;
        if (expr_1E !== null) {
          var expr_2A = new ($T13())();
          expr_2A.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_2A.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          expr_1E(this, expr_2A);
        }
      } else {
        var expr_62 = this.OnGUIButtonUp;
        if (expr_62 !== null) {
          var expr_6E = new ($T13())();
          expr_6E.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_6E.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          expr_62(this, expr_6E);
        }
      }
    }
  }; 

  function GUIButton_OnMouseMove (sender, bvca) {
    var flag = this.MouseOnButton();
    if (flag) {
      var mouseOnButton = this._mouseOnButton;
      if (!mouseOnButton) {
        this._mouseOnButton = true;
        if (this.OnGUIButtonEnter !== null) {
          var arg_6A_0 = this.OnGUIButtonEnter;
          var expr_40 = new ($T13())();
          expr_40.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_40.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          arg_6A_0(this, expr_40);
        }
      }
    } else {
      if (this._mouseOnButton) {
        this._mouseOnButton = false;
        if (this.OnGUIButtonLeave !== null) {
          var arg_D1_0 = this.OnGUIButtonLeave;
          var expr_A7 = new ($T13())();
          expr_A7.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_A7.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          arg_D1_0(this, expr_A7);
        }
      }
    }
  }; 

  function GUIButton_remove_OnGUIButtonDown (value) {
    var gUIButtonHandler = this.OnGUIButtonDown;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonDown"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_remove_OnGUIButtonEnter (value) {
    var gUIButtonHandler = this.OnGUIButtonEnter;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonEnter"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_remove_OnGUIButtonLeave (value) {
    var gUIButtonHandler = this.OnGUIButtonLeave;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonLeave"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_remove_OnGUIButtonUp (value) {
    var gUIButtonHandler = this.OnGUIButtonUp;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonUp"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  }; 

  function GUIButton_set_BorderColor (value) {
    this._borderColor = value.MemberwiseClone();
    this.Dirty = true;
  }; 

  function GUIButton_set_BorderWidth (value) {
    this._borderWidth = (value | 0);
    this.Dirty = true;
  }; 

  function GUIButton_set_ButtonColor (value) {
    this._buttonColor = value.MemberwiseClone();
    this.Dirty = true;
  }; 

  function GUIButton_SetupButton () {
    (this.ButtonColor = $S02().Construct(1, 1, 1, 1));
    (this.GUIElement$TextColor = $S02().Construct(0, 0, 0, 1));
    this.set_BorderWidth(1);
    (this.BorderColor = $S02().Construct(0, 0, 0, 1));
    var flag = $T0C().get_Mouse() !== null;
    if (flag) {
      $T0C().get_Mouse().add_ButtonValueChanged($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseButton", $S00(), false, false)));
      $T0C().get_Mouse().add_AxisValueChanged($T0F().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseMove", $S01(), false, false)));
    }
    var flag2 = $T0C().get_Touch() !== null;
    if (flag2) {
      $T0C().get_Touch().add_ButtonValueChanged($T0E().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseButton", $S00(), false, false)));
      $T0C().get_Touch().add_AxisValueChanged($T0F().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseMove", $S01(), false, false)));
    }
    this._mouseOnButton = false;
    this.CreateGUIShader();
  }; 

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Fusee.Engine.GUI.GUIElement"), 
      Name: "Fusee.Engine.GUI.GUIButton", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      GUIButton__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      GUIButton__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      GUIButton__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      GUIButton__ctor$03
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonDown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_add_OnGUIButtonDown
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonEnter", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_add_OnGUIButtonEnter
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonLeave", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_add_OnGUIButtonLeave
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonUp", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_add_OnGUIButtonUp
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      JSIL.MethodSignature.Void, 
      GUIButton_CreateMesh
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DetachFromContext", 
      JSIL.MethodSignature.Void, 
      GUIButton_DetachFromContext
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIButton_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIButton_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "get_ButtonColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIButton_get_ButtonColor
    );

    $.Method({Static:false, Public:false}, "MouseOnButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GUIButton_MouseOnButton
    );

    $.Method({Static:false, Public:false}, "OnMouseButton", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]), 
      GUIButton_OnMouseButton
    );

    $.Method({Static:false, Public:false}, "OnMouseMove", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]), 
      GUIButton_OnMouseMove
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonDown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_remove_OnGUIButtonDown
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonEnter", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_remove_OnGUIButtonEnter
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonLeave", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_remove_OnGUIButtonLeave
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonUp", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler")), 
      GUIButton_remove_OnGUIButtonUp
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIButton_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIButton_set_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_ButtonColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIButton_set_ButtonColor
    );

    $.Method({Static:false, Public:false}, "SetupButton", 
      JSIL.MethodSignature.Void, 
      GUIButton_SetupButton
    );

    $.Field({Static:false, Public:false}, "_buttonColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32);

    $.Field({Static:false, Public:false}, "_borderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "_mouseOnButton", $.Boolean);

    $.Field({Static:false, Public:false}, "OnGUIButtonDown", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Field({Static:false, Public:false}, "OnGUIButtonUp", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Field({Static:false, Public:false}, "OnGUIButtonEnter", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Field({Static:false, Public:false}, "OnGUIButtonLeave", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Property({Static:false, Public:true }, "ButtonColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Event({Static:false, Public:true }, "OnGUIButtonDown", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Event({Static:false, Public:true }, "OnGUIButtonUp", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Event({Static:false, Public:true }, "OnGUIButtonEnter", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));

    $.Event({Static:false, Public:true }, "OnGUIButtonLeave", $asm05.TypeRef("Fusee.Engine.GUI.GUIButtonHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIHandler */ 

(function GUIHandler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm05.Fusee.Engine.GUI.GUIElement))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm05.Fusee.Engine.GUI.GUIElement))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement")]))) ();
  };


  function GUIHandler__ctor$00 () {
    $T00().prototype._ctor.call(this);
  }; 

  function GUIHandler__ctor$01 (rc) {
    $T00().prototype._ctor.call(this);
    this._renderContext = rc;
  }; 

  function GUIHandler_Add$02 (item) {
    $S00().Call($T00().prototype, "Add", null, this, item);
    item.AttachToContext(this._renderContext);
  }; 

  function GUIHandler_AttachToContext (rc) {
    this._renderContext = rc;
  }; 

  function GUIHandler_DetachFromContext () {
    var $temp00;

    for (var a$0 = this._items, i$0 = 0, l$0 = (this._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var element = a$0[i$0];
      element.DetachFromContext();
    }
    this._renderContext = null;
  }; 

  function GUIHandler_Refresh () {
    var $temp00;

    for (var a$0 = this._items, i$0 = 0, l$0 = (this._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var guiElement = a$0[i$0];
      guiElement.Refresh();
    }
  }; 

  function GUIHandler_RenderGUI () {
    var tmpArray = new JSIL.BoxedVariable(null);
    if (this._renderContext !== null) {
      tmpArray.set($T00().prototype.ToArray.call(this));
      this.SortArray(/* ref */ tmpArray);
      var curZ = (($T00().prototype.get_Item.call(this, 0)).get_ZIndex() | 0);
      var array = tmpArray.get();

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var guiElement = array[i];
        var flag2 = (guiElement.get_ZIndex() | 0) !== curZ;
        if (flag2) {
          (this._renderContext).Clear($T06().Depth);
          curZ = (guiElement.get_ZIndex() | 0);
        }
        guiElement.Render(this._renderContext);
      }
    }
  }; 


  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement")]), 
      Name: "Fusee.Engine.GUI.GUIHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GUIHandler__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIHandler__ctor$01
    );

    $.Method({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIElement")), 
      GUIHandler_Add$02
    );

    $.Method({Static:false, Public:true }, "AttachToContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIHandler_AttachToContext
    );

    $.Method({Static:false, Public:true }, "DetachFromContext", 
      JSIL.MethodSignature.Void, 
      GUIHandler_DetachFromContext
    );

    $.Method({Static:false, Public:true }, "Refresh", 
      JSIL.MethodSignature.Void, 
      GUIHandler_Refresh
    );

    $.Method({Static:false, Public:true }, "RenderGUI", 
      JSIL.MethodSignature.Void, 
      GUIHandler_RenderGUI
    );

    $.ExternalMethod({Static:false, Public:false}, "SortArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement")])]))
    );

    $.Field({Static:false, Public:false}, "_renderContext", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIHandler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lSortArray$gb__7_0 (x, y) {
    return JSIL.CompareValues(x.get_ZIndex(), y.get_ZIndex());
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUI.GUIHandler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lSortArray$gb__7_0", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement"), $asm05.TypeRef("Fusee.Engine.GUI.GUIElement")]), 
      $l$gc_$lSortArray$gb__7_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__7_0", $asm0F.TypeRef("System.Comparison`1", [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIImage */ 

(function GUIImage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float2))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.Fusee.Engine.Core.Texture, [$asm00.Fusee.Base.Common.IImageData]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float2, [$asm0F.System.Single, $asm0F.System.Single]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Fusee.Base.Common.IImageData.get_IsEmpty)) ();
  };


  function GUIImage__ctor$00 (image, x, y, z, width, height) {
    $T02().prototype._ctor.call(this, 
      $T03().Empty, 
      null, 
      x, 
      y, 
      z, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.ImgSrc = image;
    this.set_BorderWidth(0);
  }; 

  function GUIImage__ctor$01 (image, x, y, width, height) {
    $T02().prototype._ctor.call(this, 
      $T03().Empty, 
      null, 
      x, 
      y, 
      0, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.ImgSrc = image;
    this.set_BorderWidth(0);
  }; 

  function GUIImage_AttachToContext (rc) {
    var flag = this.RContext === rc;
    if (!flag) {
      var flag2 = !$IM00().Call(this.ImgSrc, null);
      if (flag2) {
        this.GUITexture = $S00().Construct(this.ImgSrc);
        this.CreateGUIShader();
      }
      $T02().prototype.AttachToContext.call(this, rc);
    }
  }; 

  function GUIImage_CreateGUIShader () {
    var expr_08 = JSIL.Array.New($T08(), 1);
    var effectPassDeclaration = new ($T08())();
    effectPassDeclaration.VS = this.GUIVS;
    effectPassDeclaration.PS = "#version 300 es\r\n                precision highp float;\r\n  \r\n  \r\n            in vec2 vUV;\r\n            in vec4 vColor;\r\n\r\n            out vec4 fragColor;\r\n\r\n            uniform sampler2D tex;\r\n\r\n            void main(void) {\r\n                if (vUV.x == -1.0)\r\n                    fragColor = vColor;\r\n                else\r\n                    fragColor = texture(tex, vUV);\r\n            }";
    var expr_32 = new ($T09())();
    expr_32.set_AlphaBlendEnable(true);
    expr_32.set_SourceBlend($T0A().SourceAlpha);
    expr_32.set_DestinationBlend($T0A().InverseSourceAlpha);
    expr_32.set_ZEnable(true);
    effectPassDeclaration.StateSet = expr_32;
    expr_08[0] = effectPassDeclaration.MemberwiseClone();
    var expr_63 = JSIL.Array.New($T0C(), 2);
    var effectParameterDeclaration = new ($T0C())();
    effectParameterDeclaration.Name = "tex";
    effectParameterDeclaration.Value = this.GUITexture;
    expr_63[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T0C())();
    effectParameterDeclaration.Name = "guiXForm";
    effectParameterDeclaration.Value = $T0D().Identity.MemberwiseClone();
    expr_63[1] = effectParameterDeclaration.MemberwiseClone();
    this.GUIShader = new ($T0E())(expr_08, $T0F().$Cast(expr_63));
  }; 

  function GUIImage_CreateMesh () {
    this.SetRectangleMesh(
      +(this.get_BorderWidth()), 
      $S01().Construct(1, 1, 1, 1), 
      this.get_BorderColor()
    );
    var uvs = (this.GUIElement$GUIMesh$value).get_UVs();
    uvs[0] = $S02().Construct(0, 0);
    uvs[1] = $S02().Construct(0, 1);
    uvs[2] = $S02().Construct(1, 0);
    uvs[3] = $S02().Construct(1, 1);
    var flag = (this.get_BorderWidth() | 0) > 0;
    if (flag) {

      for (var i = 4; i < 8; i = ((i + 1) | 0)) {
        uvs[i] = $S02().Construct(-1, -1);
      }
    }
    (this.GUIElement$GUIMesh$value).set_UVs(uvs);
  }; 

  function GUIImage_get_BorderColor () {
    return this._borderColor;
  }; 

  function GUIImage_get_BorderWidth () {
    return this._borderWidth;
  }; 

  function GUIImage_set_BorderColor (value) {
    this._borderColor = value.MemberwiseClone();
    this.Dirty = true;
  }; 

  function GUIImage_set_BorderWidth (value) {
    this._borderWidth = (value | 0);
    this.Dirty = true;
  }; 

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Fusee.Engine.GUI.GUIElement"), 
      Name: "Fusee.Engine.GUI.GUIImage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Fusee.Base.Common.IImageData"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      GUIImage__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Fusee.Base.Common.IImageData"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      GUIImage__ctor$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "AttachToContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIImage_AttachToContext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateGUIShader", 
      JSIL.MethodSignature.Void, 
      GUIImage_CreateGUIShader
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      JSIL.MethodSignature.Void, 
      GUIImage_CreateMesh
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIImage_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIImage_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIImage_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIImage_set_BorderWidth
    );

    $.Constant({Static:true , Public:false}, "IMGPS", $.String, "#version 300 es\r\n                precision highp float;\r\n  \r\n  \r\n            in vec2 vUV;\r\n            in vec4 vColor;\r\n\r\n            out vec4 fragColor;\r\n\r\n            uniform sampler2D tex;\r\n\r\n            void main(void) {\r\n                if (vUV.x == -1.0)\r\n                    fragColor = vColor;\r\n                else\r\n                    fragColor = texture(tex, vUV);\r\n            }");

    $.Field({Static:false, Public:false}, "_borderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.GUI.GUIPanelHandler */ 

JSIL.MakeDelegate("Fusee.Engine.GUI.GUIPanelHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm05.TypeRef("Fusee.Engine.GUI.GUIPanel"), $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelEventArgs")]));

/* class Fusee.Engine.GUI.GUIPanelEventArgs */ 

(function GUIPanelEventArgs$Members () {
  var $, $thisType;

  function GUIPanelEventArgs__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUI.GUIPanelEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GUIPanelEventArgs__ctor
    );

    $.Field({Static:false, Public:true }, "mouseX", $.Int32);

    $.Field({Static:false, Public:true }, "mouseY", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIPanel */ 

(function GUIPanel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIPanelHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Delegate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Threading.Interlocked)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIText)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIPanelEventArgs)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm05.Fusee.Engine.GUI.GUIElement))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.ObjectModel.Collection$b1.Of($asm05.Fusee.Engine.GUI.GUIElement))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.Fusee.Engine.Core.InputDevice)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.ObjectModel.Collection$b1.Of($asm05.Fusee.Engine.GUI.GUIElement), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.ButtonValueChangedArgs]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Object, $asm03.Fusee.Engine.Common.AxisValueChangedArgs]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm05.Fusee.Engine.GUI.GUIElement).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function GUIPanel__ctor$00 (text, fontMap, x, y, z, width, height) {
    $T03().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      z, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupPanel();
  }; 

  function GUIPanel__ctor$01 (text, fontMap, x, y, width, height) {
    $T03().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      0, 
      width, 
      height, 
      0, 
      0, 
      0
    );
    this.SetupPanel();
  }; 

  function GUIPanel_add_OnGUIPanelDown (value) {
    var gUIPanelHandler = this.OnGUIPanelDown;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelDown"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_add_OnGUIPanelEnter (value) {
    var gUIPanelHandler = this.OnGUIPanelEnter;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelEnter"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_add_OnGUIPanelLeave (value) {
    var gUIPanelHandler = this.OnGUIPanelLeave;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelLeave"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_add_OnGUIPanelUp (value) {
    var gUIPanelHandler = this.OnGUIPanelUp;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelUp"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_CreateMesh () {
    this.SetRectangleMesh(
      +(this.get_BorderWidth()), 
      this.get_PanelColor(), 
      this.get_BorderColor()
    );
    var x = (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0);
    var y = (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0);
    var maxW = +$T08().GetTextWidth(this.get_Text(), this.FontMap);
    x = ((Math.round(+x + +(((+(this.Width) - maxW) / 2)))) | 0);
    this.SetTextMesh(x, ((y + 20) | 0));
  }; 

  function GUIPanel_get_BorderColor () {
    return this._borderColor;
  }; 

  function GUIPanel_get_BorderWidth () {
    return this._borderWidth;
  }; 

  function GUIPanel_get_PanelColor () {
    return this._panelColor;
  }; 

  function GUIPanel_MouseOnPanel () {
    var x = ($T0C().get_Mouse().get_PositionInt().x | 0);
    var y = ($T0C().get_Mouse().get_PositionInt().y | 0);
    return (!((x < (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0)) || 
        (x > (((((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0) + (this.Width | 0)) | 0)) || 
        (y < (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0))) && (y <= (((((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0) + (this.Height | 0)) | 0)));
  }; 

  function GUIPanel_OnMouseButton (sender, bvca) {
    var flag = this.MouseOnPanel();
    if (flag) {
      var pressed = bvca.Pressed;
      if (pressed) {
        var expr_1E = this.OnGUIPanelDown;
        if (expr_1E !== null) {
          var expr_2A = new ($T10())();
          expr_2A.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_2A.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          expr_1E(this, expr_2A);
        }
      } else {
        var expr_62 = this.OnGUIPanelUp;
        if (expr_62 !== null) {
          var expr_6E = new ($T10())();
          expr_6E.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_6E.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          expr_62(this, expr_6E);
        }
      }
    }
  }; 

  function GUIPanel_OnMouseMove (sender, avca) {
    var flag = this.MouseOnPanel();
    if (flag) {
      var mouseOnPanel = this._mouseOnPanel;
      if (!mouseOnPanel) {
        this._mouseOnPanel = true;
        if (this.OnGUIPanelEnter !== null) {
          var arg_6A_0 = this.OnGUIPanelEnter;
          var expr_40 = new ($T10())();
          expr_40.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_40.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          arg_6A_0(this, expr_40);
        }
      }
    } else {
      if (this._mouseOnPanel) {
        this._mouseOnPanel = false;
        if (this.OnGUIPanelLeave !== null) {
          var arg_D1_0 = this.OnGUIPanelLeave;
          var expr_A7 = new ($T10())();
          expr_A7.mouseX = ($T0C().get_Mouse().get_PositionInt().x | 0);
          expr_A7.mouseY = ($T0C().get_Mouse().get_PositionInt().y | 0);
          arg_D1_0(this, expr_A7);
        }
      }
    }
  }; 

  function GUIPanel_PreRender (rc) {
    $T03().prototype.PreRender.call(this, rc);
    var enumerator = (this.ChildElements).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var childElement = $IM01().Call(enumerator, null);
        childElement.set_OffsetX(this.get_PosX());
        childElement.set_OffsetY(this.get_PosY());
        childElement.set_OffsetZ(this.PosZ);
        childElement.Render(rc);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  }; 

  function GUIPanel_Refresh () {
    $T03().prototype.Refresh.call(this);
    var enumerator = (this.ChildElements).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var childElement = $IM01().Call(enumerator, null);
        childElement.Refresh();
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  }; 

  function GUIPanel_remove_OnGUIPanelDown (value) {
    var gUIPanelHandler = this.OnGUIPanelDown;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelDown"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_remove_OnGUIPanelEnter (value) {
    var gUIPanelHandler = this.OnGUIPanelEnter;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelEnter"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_remove_OnGUIPanelLeave (value) {
    var gUIPanelHandler = this.OnGUIPanelLeave;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelLeave"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_remove_OnGUIPanelUp (value) {
    var gUIPanelHandler = this.OnGUIPanelUp;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelUp"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  }; 

  function GUIPanel_set_BorderColor (value) {
    this._borderColor = value.MemberwiseClone();
    this.Dirty = true;
  }; 

  function GUIPanel_set_BorderWidth (value) {
    this._borderWidth = (value | 0);
    this.Dirty = true;
  }; 

  function GUIPanel_set_PanelColor (value) {
    this._panelColor = value.MemberwiseClone();
    this.Dirty = true;
  }; 

  function GUIPanel_SetupPanel () {
    this.ChildElements = $S00().Construct();
    (this.PanelColor = $S01().Construct(0.1, 0.1, 0.1, 0.5));
    (this.GUIElement$TextColor = $S01().Construct(0.9, 0.9, 0.9, 1));
    this.set_BorderWidth(1);
    (this.BorderColor = $S01().Construct(0.2, 0.2, 0.2, 0.5));
    $T0C().get_Mouse().add_ButtonValueChanged($T19().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseButton", $S02(), false, false)));
    $T0C().get_Mouse().add_AxisValueChanged($T1A().New(this, null, new JSIL.MethodPointerInfo($thisType, "OnMouseMove", $S03(), false, false)));
    this.CreateGUIShader();
  }; 

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Fusee.Engine.GUI.GUIElement"), 
      Name: "Fusee.Engine.GUI.GUIPanel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      GUIPanel__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      GUIPanel__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelDown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_add_OnGUIPanelDown
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelEnter", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_add_OnGUIPanelEnter
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelLeave", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_add_OnGUIPanelLeave
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelUp", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_add_OnGUIPanelUp
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      JSIL.MethodSignature.Void, 
      GUIPanel_CreateMesh
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIPanel_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      GUIPanel_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "get_PanelColor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIPanel_get_PanelColor
    );

    $.Method({Static:false, Public:false}, "MouseOnPanel", 
      JSIL.MethodSignature.Return($.Boolean), 
      GUIPanel_MouseOnPanel
    );

    $.Method({Static:false, Public:false}, "OnMouseButton", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]), 
      GUIPanel_OnMouseButton
    );

    $.Method({Static:false, Public:false}, "OnMouseMove", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]), 
      GUIPanel_OnMouseMove
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PreRender", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      GUIPanel_PreRender
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Refresh", 
      JSIL.MethodSignature.Void, 
      GUIPanel_Refresh
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelDown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_remove_OnGUIPanelDown
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelEnter", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_remove_OnGUIPanelEnter
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelLeave", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_remove_OnGUIPanelLeave
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelUp", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler")), 
      GUIPanel_remove_OnGUIPanelUp
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIPanel_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      GUIPanel_set_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_PanelColor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("Fusee.Math.Core.float4")), 
      GUIPanel_set_PanelColor
    );

    $.Method({Static:false, Public:false}, "SetupPanel", 
      JSIL.MethodSignature.Void, 
      GUIPanel_SetupPanel
    );

    $.Field({Static:false, Public:false}, "_panelColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32);

    $.Field({Static:false, Public:false}, "_borderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:false}, "_mouseOnPanel", $.Boolean);

    $.Field({Static:false, Public:true }, "ChildElements", $asm0F.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm05.TypeRef("Fusee.Engine.GUI.GUIElement")]));

    $.Field({Static:false, Public:false}, "OnGUIPanelDown", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Field({Static:false, Public:false}, "OnGUIPanelUp", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Field({Static:false, Public:false}, "OnGUIPanelEnter", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Field({Static:false, Public:false}, "OnGUIPanelLeave", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Property({Static:false, Public:true }, "PanelColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm0A.TypeRef("Fusee.Math.Core.float4"));

    $.Event({Static:false, Public:true }, "OnGUIPanelDown", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Event({Static:false, Public:true }, "OnGUIPanelUp", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Event({Static:false, Public:true }, "OnGUIPanelEnter", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));

    $.Event({Static:false, Public:true }, "OnGUIPanelLeave", $asm05.TypeRef("Fusee.Engine.GUI.GUIPanelHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.GUIText */ 

(function GUIText$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.FontMap)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm05.Fusee.Engine.GUI.GUIElement)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Fusee.Base.Core.Font)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single, $asm0F.System.Single
      ]))) ();
  };


  function GUIText__ctor$00 (text, fontMap, x, y, zRot, xPivot, yPivot) {
    $T04().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      0, 
      0, 
      0, 
      zRot, 
      xPivot, 
      yPivot
    );
    (this.GUIElement$TextColor = $S00().Construct(0, 0, 0, 1));
  }; 

  function GUIText__ctor$01 (text, fontMap, x, y, z, zRot, xPivot, yPivot) {
    $T04().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      z, 
      0, 
      0, 
      zRot, 
      xPivot, 
      yPivot
    );
    (this.GUIElement$TextColor = $S00().Construct(0, 0, 0, 1));
  }; 

  function GUIText__ctor$02 (text, fontMap, x, y, z, color, zRot, xPivot, yPivot) {
    $T04().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      z, 
      0, 
      0, 
      zRot, 
      xPivot, 
      yPivot
    );
    (this.GUIElement$TextColor = color.MemberwiseClone());
  }; 

  function GUIText__ctor$03 (text, fontMap, x, y, color) {
    $T04().prototype._ctor.call(this, 
      text, 
      fontMap, 
      x, 
      y, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0
    );
    (this.GUIElement$TextColor = color.MemberwiseClone());
  }; 

  function GUIText_CreateMesh () {
    this.SetTextMesh(
      (((this.get_PosX() | 0) + (this.get_OffsetX() | 0)) | 0), 
      (((this.get_PosY() | 0) + (this.get_OffsetY() | 0)) | 0)
    );
  }; 

  function GUIText_GetTextHeight (text, fontMap) {
    var maxH = 0;

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var letter = (text[i]);
      maxH = +$T07().Max(maxH, fontMap.GetGlyphOnMap(letter.charCodeAt(0)).BitmapH);
    }
    return maxH;
  }; 

  function GUIText_GetTextWidth (text, fontMap) {
    var maxW = 0;

    for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
      var letter = (text[i]);
      maxW += +(fontMap.get_Font()).GetGlyphInfo(letter.charCodeAt(0)).AdvanceX;
    }
    return maxW;
  }; 

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Fusee.Engine.GUI.GUIElement"), 
      Name: "Fusee.Engine.GUI.GUIText", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Single, $.Int32, 
          $.Int32
        ]), 
      GUIText__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Int32, $.Int32
        ]), 
      GUIText__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $.Int32, $asm0A.TypeRef("Fusee.Math.Core.float4"), 
          $.Single, $.Int32, 
          $.Int32
        ]), 
      GUIText__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap"), 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("Fusee.Math.Core.float4")
        ]), 
      GUIText__ctor$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      JSIL.MethodSignature.Void, 
      GUIText_CreateMesh
    );

    $.Method({Static:true , Public:true }, "GetTextHeight", 
      new JSIL.MethodSignature($.Single, [$.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap")]), 
      GUIText_GetTextHeight
    );

    $.Method({Static:true , Public:true }, "GetTextWidth", 
      new JSIL.MethodSignature($.Single, [$.String, $asm04.TypeRef("Fusee.Engine.Core.FontMap")]), 
      GUIText_GetTextWidth
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUI.TextureNodeContainer */ 

(function TextureNodeContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.Texture)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Fusee.Math.Core.MinMaxRect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.Fusee.Serialization.RectTransformComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0B.Fusee.Serialization.XFormComponent)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffectComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectPassDeclaration))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectPassDeclaration)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderStateSet)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.Blend)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.BlendOperation)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Engine.Core.EffectParameterDeclaration)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4x4)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderEffect)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm04.Fusee.Engine.Core.EffectParameterDeclaration))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.NineSlicePlane)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.Fusee.Engine.Core.Plane)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneComponentContainer), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0B.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0B.Fusee.Serialization.SceneNodeContainer), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };


  function TextureNodeContainer__ctor$00 (name, vs, ps, tex, anchors, offsets, tiles, borders, borderthickness) {
    $T06().prototype._ctor.call(this);
    this.Name = name;
    var expr_15 = $S00().Construct();
    var expr_1B = new ($T08())();
    expr_1B.Name = (JSIL.ConcatString(name, "_RectTransform"));
    expr_1B.Anchors = anchors.MemberwiseClone();
    expr_1B.Offsets = offsets.MemberwiseClone();
    $S01().CallVirtual("Add", null, expr_15, expr_1B);
    this.Components = expr_15;
    var list = $S02().Construct();
    var sceneNodeContainer = new ($T06())();
    sceneNodeContainer.Name = (JSIL.ConcatString(name, "_XForm"));
    var arg_2CF_0 = sceneNodeContainer;
    var list2 = $S00().Construct();
    var arg_84_0 = list2;
    var expr_73 = new ($T0A())();
    expr_73.Name = (JSIL.ConcatString(name, "_XForm"));
    $S01().CallVirtual("Add", null, arg_84_0, expr_73);
    var arg_2BC_0 = list2;
    var shaderEffectComponent = new ($T0B())();
    var arg_2B5_0 = shaderEffectComponent;
    var expr_98 = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = vs;
    effectPassDeclaration.PS = ps;
    var expr_B9 = new ($T0E())();
    expr_B9.set_AlphaBlendEnable(true);
    expr_B9.set_SourceBlend($T0F().SourceAlpha);
    expr_B9.set_DestinationBlend($T0F().InverseSourceAlpha);
    expr_B9.set_BlendOperation($T10().Add);
    expr_B9.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_B9;
    expr_98[0] = effectPassDeclaration.MemberwiseClone();
    var expr_F4 = JSIL.Array.New($T12(), 10);
    var effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseTexture";
    effectParameterDeclaration.Value = tex;
    expr_F4[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseColor";
    effectParameterDeclaration.Value = $T04().One.MemberwiseClone();
    expr_F4[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "Tile";
    effectParameterDeclaration.Value = tiles.MemberwiseClone();
    expr_F4[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseMix";
    effectParameterDeclaration.Value = $T05().$Box(1);
    expr_F4[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "borders";
    effectParameterDeclaration.Value = borders.MemberwiseClone();
    expr_F4[4] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "borderThickness";
    effectParameterDeclaration.Value = $T05().$Box(borderthickness);
    expr_F4[5] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_ITMV";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F4[6] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_M";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F4[7] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_V";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F4[8] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_P";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F4[9] = effectParameterDeclaration.MemberwiseClone();
    arg_2B5_0.ShaderEffectComponent$Effect$value = new ($T14())(expr_98, $T15().$Cast(expr_F4));
    $S01().CallVirtual("Add", null, arg_2BC_0, shaderEffectComponent);
    $S01().CallVirtual("Add", null, list2, new ($T16())());
    arg_2CF_0.Components = list2;
    $S03().CallVirtual("Add", null, list, sceneNodeContainer);
    this.Children = list;
  }; 

  function TextureNodeContainer__ctor$01 (name, vs, ps, tex, anchors, offsets) {
    $T06().prototype._ctor.call(this);
    this.Name = name;
    var expr_15 = $S00().Construct();
    var expr_1B = new ($T08())();
    expr_1B.Name = (JSIL.ConcatString(name, "_RectTransform"));
    expr_1B.Anchors = anchors.MemberwiseClone();
    expr_1B.Offsets = offsets.MemberwiseClone();
    $S01().CallVirtual("Add", null, expr_15, expr_1B);
    this.Components = expr_15;
    var list = $S02().Construct();
    var sceneNodeContainer = new ($T06())();
    sceneNodeContainer.Name = (JSIL.ConcatString(name, "_XForm"));
    var arg_1F0_0 = sceneNodeContainer;
    var list2 = $S00().Construct();
    var arg_84_0 = list2;
    var expr_73 = new ($T0A())();
    expr_73.Name = (JSIL.ConcatString(name, "_XForm"));
    $S01().CallVirtual("Add", null, arg_84_0, expr_73);
    var arg_1DD_0 = list2;
    var shaderEffectComponent = new ($T0B())();
    var arg_1D6_0 = shaderEffectComponent;
    var expr_98 = JSIL.Array.New($T0D(), 1);
    var effectPassDeclaration = new ($T0D())();
    effectPassDeclaration.VS = vs;
    effectPassDeclaration.PS = ps;
    var expr_B9 = new ($T0E())();
    expr_B9.set_AlphaBlendEnable(true);
    expr_B9.set_SourceBlend($T0F().SourceAlpha);
    expr_B9.set_DestinationBlend($T0F().InverseSourceAlpha);
    expr_B9.set_BlendOperation($T10().Add);
    expr_B9.set_ZEnable(false);
    effectPassDeclaration.StateSet = expr_B9;
    expr_98[0] = effectPassDeclaration.MemberwiseClone();
    var expr_F3 = JSIL.Array.New($T12(), 5);
    var effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseTexture";
    effectParameterDeclaration.Value = tex;
    expr_F3[0] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseColor";
    effectParameterDeclaration.Value = $T04().One.MemberwiseClone();
    expr_F3[1] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "DiffuseMix";
    effectParameterDeclaration.Value = $T05().$Box(1);
    expr_F3[2] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_ITMV";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F3[3] = effectParameterDeclaration.MemberwiseClone();
    effectParameterDeclaration = new ($T12())();
    effectParameterDeclaration.Name = "FUSEE_MVP";
    effectParameterDeclaration.Value = $T13().Identity.MemberwiseClone();
    expr_F3[4] = effectParameterDeclaration.MemberwiseClone();
    arg_1D6_0.ShaderEffectComponent$Effect$value = new ($T14())(expr_98, $T15().$Cast(expr_F3));
    $S01().CallVirtual("Add", null, arg_1DD_0, shaderEffectComponent);
    $S01().CallVirtual("Add", null, list2, new ($T17())());
    arg_1F0_0.Components = list2;
    $S03().CallVirtual("Add", null, list, sceneNodeContainer);
    this.Children = list;
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Serialization.SceneNodeContainer"), 
      Name: "Fusee.Engine.GUI.TextureNodeContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Fusee.Engine.Core.Texture"), 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), 
          $asm0A.TypeRef("Fusee.Math.Core.float2"), $asm0A.TypeRef("Fusee.Math.Core.float4"), 
          $.Single
        ]), 
      TextureNodeContainer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Fusee.Engine.Core.Texture"), 
          $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect"), $asm0A.TypeRef("Fusee.Math.Core.MinMaxRect")
        ]), 
      TextureNodeContainer__ctor$01
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

