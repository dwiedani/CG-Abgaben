/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm09 = JSIL.DeclareAssembly("Fusee.Jometri, Version=0.7.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Jometri");
/* class Fusee.Jometri.Node`2 */ 

(function Node$b2$Members () {
  var $, $thisType;

  function Node$b2__ctor (key, value) {
    this.Node$b2$Key$value = JSIL.CloneParameter($thisType.TK.get(this), key);
    this.Node$b2$Value$value = JSIL.CloneParameter($thisType.TV.get(this), value);
  }; 

  function Node$b2_get_Key () {
    return this.Node$b2$Key$value;
  }; 

  function Node$b2_get_Value () {
    return this.Node$b2$Value$value;
  }; 

  function Node$b2_set_Key (value) {
    this.Node$b2$Key$value = JSIL.CloneParameter($thisType.TK.get(this), value);
  }; 

  function Node$b2_set_Value (value) {
    this.Node$b2$Value$value = JSIL.CloneParameter($thisType.TV.get(this), value);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Node`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TK"), $.GenericParameter("TV")]), 
      Node$b2__ctor
    );

    $.Method({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TK"), null), 
      Node$b2_get_Key
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("TV"), null), 
      Node$b2_get_Value
    );

    $.Method({Static:false, Public:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TK")]), 
      Node$b2_set_Key
    );

    $.Method({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TV")]), 
      Node$b2_set_Value
    );

    $.Field({Static:false, Public:false}, "Node$b2$Key$value", $.GenericParameter("TK"));

    $.Field({Static:false, Public:false}, "Node$b2$Value$value", $.GenericParameter("TV"));

    $.Field({Static:false, Public:true }, "LeftNode", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:true }, "RightNode", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:true }, "Key", $.GenericParameter("TK"));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("TV"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2 */ 

(function BinarySearchTree$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function BinarySearchTree$b2__ctor () {
  }; 

  function BinarySearchTree$b2_BalanceTree$00 () {
    var inorder = $T00().ToList$b1($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)))($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).InOrderTraverseTree(this._globalRoot));
    this._globalRoot = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).BalanceTree(inorder, 0, (((inorder.get_Count() | 0) - 1) | 0));
  }; 

  function BinarySearchTree$b2_BalanceTree$01 (inorder, startIndex, endIndex) {
    var $im00 = $asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Item;
    if ((startIndex | 0) > (endIndex | 0)) {
      var result = null;
    } else {
      var middIndex = (((((startIndex | 0) + (endIndex | 0)) | 0) / 2) | 0);
      var root = new ($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))) (JSIL.CloneParameter($thisType.TK.get(this), $im00.Call(inorder, null, middIndex).Node$b2$Key$value), JSIL.CloneParameter($thisType.TV.get(this), $im00.Call(inorder, null, middIndex).Node$b2$Value$value));
      root.LeftNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).BalanceTree(inorder, startIndex, ((middIndex - 1) | 0));
      root.RightNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).BalanceTree(inorder, ((middIndex + 1) | 0), endIndex);
      result = root;
    }
    return result;
  }; 

  function BinarySearchTree$b2_DeleteNode$02 (key) {
    if (this._globalRoot !== null) {
      this._globalRoot = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).DeleteNode(this._globalRoot, JSIL.CloneParameter($thisType.TK.get(this), key));
    }
  }; 

  function BinarySearchTree$b2_DeleteNode$03 (root, key) {
    var $im00 = $asm0F.System.IComparable$b1.Of($thisType.TK.get(this)).CompareTo;
    var flag = root === null;
    if (flag) {
      var result = null;
    } else {
      var flag2 = ($im00.Call(key, null, JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value)) | 0) < 0;
      if (flag2) {
        root.LeftNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).DeleteNode(root.LeftNode, JSIL.CloneParameter($thisType.TK.get(this), key));
      } else {
        var flag3 = ($im00.Call(key, null, JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value)) | 0) > 0;
        if (flag3) {
          root.RightNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).DeleteNode(root.RightNode, JSIL.CloneParameter($thisType.TK.get(this), key));
        } else {
          var flag4 = (root.LeftNode === null) && 
          (root.RightNode === null);
          if (flag4) {
            result = null;
            return result;
          }
          var flag5 = root.LeftNode === null;
          if (flag5) {
            root = root.RightNode;
            result = root;
            return result;
          }
          var flag6 = root.RightNode === null;
          if (flag6) {
            root = root.LeftNode;
            result = root;
            return result;
          }
          var temp = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindMin(root.RightNode);
          root.Node$b2$Value$value = JSIL.CloneParameter($thisType.TV.get(this), temp.Node$b2$Value$value);
          root.Node$b2$Key$value = JSIL.CloneParameter($thisType.TK.get(this), temp.Node$b2$Key$value);
          root.RightNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).DeleteNode(root.RightNode, JSIL.CloneParameter($thisType.TK.get(this), temp.Node$b2$Key$value));
        }
      }
      result = root;
    }
    return result;
  }; 

  function BinarySearchTree$b2_FindLargestSmallerThanInBalanced$04 (key) {
    var res = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindLargestSmallerThanInBalanced(this._globalRoot, JSIL.CloneParameter($thisType.TK.get(this), key));
    return res.Node$b2$Value$value;
  }; 

  function BinarySearchTree$b2_FindLargestSmallerThanInBalanced$05 (root, key) {
    var $im00 = $asm0F.System.IComparable$b1.Of($thisType.TK.get(this)).CompareTo;
    var res = root;

    while (root !== null) {
      var key2 = JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value);
      if (($im00.Call(key2, null, JSIL.CloneParameter($thisType.TK.get(this), key)) | 0) <= 0) {
        key2 = JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value);
        var arg_39_0 = ($im00.Call(key2, null, JSIL.CloneParameter($thisType.TK.get(this), key)) | 0) === 0;
      } else {
        arg_39_0 = true;
      }
      var flag = arg_39_0;
      if (flag) {
        root = root.LeftNode;
      } else {
        res = root;
        root = root.RightNode;
      }
    }
    return res;
  }; 

  function BinarySearchTree$b2_FindMin$06 () {
    return $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindMin(this._globalRoot).Node$b2$Value$value;
  }; 

  function BinarySearchTree$b2_FindMin$07 (root) {

    for (var current = root; current.LeftNode !== null; current = current.LeftNode) {
    }
    return current;
  }; 

  function BinarySearchTree$b2_FindNode$08 (key) {
    var res = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindNode(this._globalRoot, JSIL.CloneParameter($thisType.TK.get(this), key));
    return res.Node$b2$Value$value;
  }; 

  function BinarySearchTree$b2_FindNode$09 (root, key) {
    var $im00 = $asm0F.System.IComparable$b1.Of($thisType.TK.get(this)).CompareTo;
    var res = null;
    var flag = root.LeftNode !== null;
    if (flag) {
      res = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindNode(root.LeftNode, JSIL.CloneParameter($thisType.TK.get(this), key));
    }
    var flag2 = ($im00.Call(key, null, JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value)) | 0) === 0;
    if (flag2) {
      var result = root;
    } else {
      var flag3 = (res === null) && 
      (root.RightNode !== null);
      if (flag3) {
        res = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).FindNode(root.RightNode, JSIL.CloneParameter($thisType.TK.get(this), key));
      }
      result = res;
    }
    return result;
  }; 

  function BinarySearchTree$b2_InOrderTraverseTree$0A () {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lInOrderTraverseTree$gd__7.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function BinarySearchTree$b2_InOrderTraverseTree$0B (root) {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lInOrderTraverseTree$gd__8.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g3__root = root;
    return expr_07;
  }; 

  function BinarySearchTree$b2_InsertNode$0C (key, value) {
    if (this._globalRoot === null) {
      this._globalRoot = new ($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))) (JSIL.CloneParameter($thisType.TK.get(this), key), JSIL.CloneParameter($thisType.TV.get(this), value));
    } else {
      $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).InsertNode(this._globalRoot, JSIL.CloneParameter($thisType.TK.get(this), key), JSIL.CloneParameter($thisType.TV.get(this), value));
    }
  }; 

  function BinarySearchTree$b2_InsertNode$0D (root, key, value) {
    var $im00 = $asm0F.System.IComparable$b1.Of($thisType.TK.get(this)).CompareTo;
    var flag = root === null;
    if (flag) {
      root = new ($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))) (JSIL.CloneParameter($thisType.TK.get(this), key), JSIL.CloneParameter($thisType.TV.get(this), value));
    } else {
      var flag2 = ($im00.Call(key, null, JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value)) | 0) <= 0;
      if (flag2) {
        root.LeftNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).InsertNode(root.LeftNode, JSIL.CloneParameter($thisType.TK.get(this), key), JSIL.CloneParameter($thisType.TV.get(this), value));
      } else {
        var flag3 = ($im00.Call(key, null, JSIL.CloneParameter($thisType.TK.get(this), root.Node$b2$Key$value)) | 0) > 0;
        if (flag3) {
          root.RightNode = $thisType.Of($thisType.TK.get(this), $thisType.TV.get(this)).InsertNode(root.RightNode, JSIL.CloneParameter($thisType.TK.get(this), key), JSIL.CloneParameter($thisType.TV.get(this), value));
        }
      }
    }
    return root;
  }; 

  function BinarySearchTree$b2_PreorderTraverseTree (root) {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lPreorderTraverseTree$gd__6.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g3__root = root;
    return expr_07;
  }; 

  function BinarySearchTree$b2_PreorderTraverseTreeKeys () {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lPreorderTraverseTreeKeys$gd__3.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function BinarySearchTree$b2_PreorderTraverseTreeNodes () {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lPreorderTraverseTreeNodes$gd__5.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function BinarySearchTree$b2_PreorderTraverseTreeValues () {
    var expr_07 = new ($asm09.Fusee.Jometri.BinarySearchTree$b2_$lPreorderTraverseTreeValues$gd__4.Of($thisType.TK.get(this), $thisType.TV.get(this))) (-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BinarySearchTree$b2__ctor
    );

    $.Method({Static:false, Public:true }, "BalanceTree", 
      JSIL.MethodSignature.Void, 
      BinarySearchTree$b2_BalanceTree$00
    );

    $.Method({Static:true , Public:false}, "BalanceTree", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), $.Int32, 
          $.Int32
        ]), 
      BinarySearchTree$b2_BalanceTree$01
    );

    $.Method({Static:false, Public:true }, "DeleteNode", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TK")]), 
      BinarySearchTree$b2_DeleteNode$02
    );

    $.Method({Static:true , Public:false}, "DeleteNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), $.GenericParameter("TK")]), 
      BinarySearchTree$b2_DeleteNode$03
    );

    $.Method({Static:false, Public:true }, "FindLargestSmallerThanInBalanced", 
      new JSIL.MethodSignature($.GenericParameter("TV"), [$.GenericParameter("TK")]), 
      BinarySearchTree$b2_FindLargestSmallerThanInBalanced$04
    );

    $.Method({Static:true , Public:false}, "FindLargestSmallerThanInBalanced", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), $.GenericParameter("TK")]), 
      BinarySearchTree$b2_FindLargestSmallerThanInBalanced$05
    );

    $.Method({Static:false, Public:true }, "FindMin", 
      new JSIL.MethodSignature($.GenericParameter("TV"), null), 
      BinarySearchTree$b2_FindMin$06
    );

    $.Method({Static:true , Public:false}, "FindMin", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      BinarySearchTree$b2_FindMin$07
    );

    $.Method({Static:false, Public:true }, "FindNode", 
      new JSIL.MethodSignature($.GenericParameter("TV"), [$.GenericParameter("TK")]), 
      BinarySearchTree$b2_FindNode$08
    );

    $.Method({Static:true , Public:false}, "FindNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), $.GenericParameter("TK")]), 
      BinarySearchTree$b2_FindNode$09
    );

    $.Method({Static:false, Public:true }, "InOrderTraverseTree", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), null), 
      BinarySearchTree$b2_InOrderTraverseTree$0A
    );

    $.Method({Static:true , Public:false}, "InOrderTraverseTree", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      BinarySearchTree$b2_InOrderTraverseTree$0B
    );

    $.Method({Static:false, Public:true }, "InsertNode", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TK"), $.GenericParameter("TV")]), 
      BinarySearchTree$b2_InsertNode$0C
    );

    $.Method({Static:true , Public:false}, "InsertNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), [
          $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), $.GenericParameter("TK"), 
          $.GenericParameter("TV")
        ]), 
      BinarySearchTree$b2_InsertNode$0D
    );

    $.Method({Static:true , Public:false}, "PreorderTraverseTree", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      BinarySearchTree$b2_PreorderTraverseTree
    );

    $.Method({Static:false, Public:true }, "PreorderTraverseTreeKeys", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), null), 
      BinarySearchTree$b2_PreorderTraverseTreeKeys
    );

    $.Method({Static:false, Public:false}, "PreorderTraverseTreeNodes", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), null), 
      BinarySearchTree$b2_PreorderTraverseTreeNodes
    );

    $.Method({Static:false, Public:true }, "PreorderTraverseTreeValues", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TV")]), null), 
      BinarySearchTree$b2_PreorderTraverseTreeValues
    );

    $.Field({Static:false, Public:false}, "_globalRoot", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeKeys>d__3 */ 

(function $lPreorderTraverseTreeKeys$gd__3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };


  function $lPreorderTraverseTreeKeys$gd__3__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_MoveNext ($exception) {
    var $im00 = $asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).GetEnumerator;
    var $im01 = $asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Current;
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lnode$g5__2 = null;
      } else {
        this.$l$g1__state = -1;
        if (this.$l$g4__this._globalRoot === null) {
          result = false;
          return result;
        }
        this.$l$gs__1 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).PreorderTraverseTree(this.$l$g4__this._globalRoot), null);
        this.$l$g1__state = -3;
      }
      if (!$IM01().Call(this.$l$gs__1, null)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = null;
        result = false;
      } else {
        this.$lnode$g5__2 = $im01.Call(this.$l$gs__1, null);
        this.$l$g2__current = JSIL.CloneParameter($thisType.TK.get(this), this.$lnode$g5__2.Node$b2$Key$value);
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lPreorderTraverseTreeKeys$gd__ = this;
    } else {
      $lPreorderTraverseTreeKeys$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
      $lPreorderTraverseTreeKeys$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lPreorderTraverseTreeKeys$gd__;
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_Collections_Generic_IEnumerator$lTK$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator();
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lPreorderTraverseTreeKeys$gd__3_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeKeys>d__3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lPreorderTraverseTreeKeys$gd__3__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeKeys$gd__3_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lPreorderTraverseTreeKeys$gd__3_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTK$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), null), 
      $lPreorderTraverseTreeKeys$gd__3_System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTK$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TK"), null), 
      $lPreorderTraverseTreeKeys$gd__3_System_Collections_Generic_IEnumerator$lTK$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeKeys$gd__3_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeKeys$gd__3_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TK"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.BinarySearchTree`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lnode$g5__2", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTK$g.Current", $.GenericParameter("TK"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeValues>d__4 */ 

(function $lPreorderTraverseTreeValues$gd__4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lPreorderTraverseTreeValues$gd__4__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lPreorderTraverseTreeValues$gd__4_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__2, null);
  }; 

  function $lPreorderTraverseTreeValues$gd__4_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lnode$g5__3 = null;
      } else {
        this.$l$g1__state = -1;
        if (this.$l$g4__this._globalRoot === null) {
          result = false;
          return result;
        }
        this.$ltraverseGlobal$g5__1 = $T05().ToList$b1($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)))($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).PreorderTraverseTree(this.$l$g4__this._globalRoot));
        this.$l$gs__2 = $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).prototype.GetEnumerator.call(this.$ltraverseGlobal$g5__1);
        this.$l$g1__state = -3;
      }
      if (!$asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).prototype.MoveNext.call(this.$l$gs__2)) {
        this.$l$gm__Finally1();
        this.$l$gs__2 = new ($asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)))) ();
        result = false;
      } else {
        this.$lnode$g5__3 = $asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).prototype.get_Current.call(this.$l$gs__2);
        this.$l$g2__current = JSIL.CloneParameter($thisType.TV.get(this), this.$lnode$g5__3.Node$b2$Value$value);
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_Collections_Generic_IEnumerable$lTV$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lPreorderTraverseTreeValues$gd__ = this;
    } else {
      $lPreorderTraverseTreeValues$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
      $lPreorderTraverseTreeValues$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lPreorderTraverseTreeValues$gd__;
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_Collections_Generic_IEnumerator$lTV$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lTV$g_GetEnumerator();
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lPreorderTraverseTreeValues$gd__4_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeValues>d__4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lPreorderTraverseTreeValues$gd__4__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeValues$gd__4_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lPreorderTraverseTreeValues$gd__4_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTV$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TV")]), null), 
      $lPreorderTraverseTreeValues$gd__4_System_Collections_Generic_IEnumerable$lTV$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TV")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTV$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TV"), null), 
      $lPreorderTraverseTreeValues$gd__4_System_Collections_Generic_IEnumerator$lTV$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TV")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeValues$gd__4_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeValues$gd__4_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TV"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.BinarySearchTree`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$ltraverseGlobal$g5__1", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$l$gs__2", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lnode$g5__3", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTV$g.Current", $.GenericParameter("TV"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TV")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TV")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeNodes>d__5 */ 

(function $lPreorderTraverseTreeNodes$gd__5$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };


  function $lPreorderTraverseTreeNodes$gd__5__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_MoveNext ($exception) {
    var $im00 = $asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).GetEnumerator;
    var $im01 = $asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Current;
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lnode$g5__2 = null;
      } else {
        this.$l$g1__state = -1;
        if (this.$l$g4__this._globalRoot === null) {
          result = false;
          return result;
        }
        this.$l$gs__1 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).PreorderTraverseTree(this.$l$g4__this._globalRoot), null);
        this.$l$g1__state = -3;
      }
      if (!$IM01().Call(this.$l$gs__1, null)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = null;
        result = false;
      } else {
        this.$lnode$g5__2 = $im01.Call(this.$l$gs__1, null);
        this.$l$g2__current = this.$lnode$g5__2;
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lPreorderTraverseTreeNodes$gd__ = this;
    } else {
      $lPreorderTraverseTreeNodes$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
      $lPreorderTraverseTreeNodes$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lPreorderTraverseTreeNodes$gd__;
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator();
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lPreorderTraverseTreeNodes$gd__5_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTreeNodes>d__5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lPreorderTraverseTreeNodes$gd__5__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeNodes$gd__5_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lPreorderTraverseTreeNodes$gd__5_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Node$lTK$cmTV$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), null), 
      $lPreorderTraverseTreeNodes$gd__5_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), null), 
      $lPreorderTraverseTreeNodes$gd__5_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeNodes$gd__5_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTreeNodes$gd__5_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.BinarySearchTree`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lnode$g5__2", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.Current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTree>d__6 */ 

(function $lPreorderTraverseTree$gd__6$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };


  function $lPreorderTraverseTree$gd__6__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lPreorderTraverseTree$gd__6_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lPreorderTraverseTree$gd__6_$l$gm__Finally2 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__3 !== null) {
      $IM00().Call(this.$l$gs__3, null);
    }
  }; 

  function $lPreorderTraverseTree$gd__6_MoveNext ($exception) {
    var $im00 = $asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).GetEnumerator;
    var $im01 = $asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Current;
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.root === null) {
                  var result = false;
                  return result;
                }
                this.$l$g2__current = this.root;
                this.$l$g1__state = 1;
                result = true;
                return result;

              case 1: 
                this.$l$g1__state = -1;
                this.$l$gs__1 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).PreorderTraverseTree(this.root.LeftNode), null);
                this.$l$g1__state = -3;
                break;

              case 2: 
                this.$l$g1__state = -3;
                this.$lv$g5__2 = null;
                break;

              case 3: 
                this.$l$g1__state = -4;
                this.$lv$g5__4 = null;
                $label0 = 1 /* goto IL_14D */ ;
                continue $labelgroup0;

              default: 
                result = false;
                return result;

            }
            if ($IM01().Call(this.$l$gs__1, null)) {
              this.$lv$g5__2 = $im01.Call(this.$l$gs__1, null);
              this.$l$g2__current = this.$lv$g5__2;
              this.$l$g1__state = 2;
              result = true;
              return result;
            }
            this.$l$gm__Finally1();
            this.$l$gs__1 = null;
            this.$l$gs__3 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).PreorderTraverseTree(this.root.RightNode), null);
            this.$l$g1__state = -4;

            $label0 = 1 /* goto IL_14D */ ;
            continue $labelgroup0;
          case 1: /* IL_14D */ 
            if (!$IM01().Call(this.$l$gs__3, null)) {
              this.$l$gm__Finally2();
              this.$l$gs__3 = null;
              result = false;
            } else {
              this.$lv$g5__4 = $im01.Call(this.$l$gs__3, null);
              this.$l$g2__current = this.$lv$g5__4;
              this.$l$g1__state = 3;
              result = true;
            }

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lPreorderTraverseTree$gd__6_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lPreorderTraverseTree$gd__ = this;
    } else {
      $lPreorderTraverseTree$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
    }
    $lPreorderTraverseTree$gd__.root = this.$l$g3__root;
    return $lPreorderTraverseTree$gd__;
  }; 

  function $lPreorderTraverseTree$gd__6_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTree$gd__6_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator();
  }; 

  function $lPreorderTraverseTree$gd__6_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lPreorderTraverseTree$gd__6_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lPreorderTraverseTree$gd__6_System_IDisposable_Dispose () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var num = (this.$l$g1__state | 0);
          if (num <= -3) {
            if (num === -4) {
              $label0 = 1 /* goto IL_32 */ ;
              continue $labelgroup0;
            }
            if (num !== -3) {
              return;
            }
          } else if (num !== 2) {
            if (num !== 3) {
              return;
            }
            $label0 = 1 /* goto IL_32 */ ;
            continue $labelgroup0;
          }
          try {
          } finally {
            this.$l$gm__Finally1();
          }
          return;

          $label0 = 1 /* goto IL_32 */ ;
          continue $labelgroup0;
        case 1: /* IL_32 */ 
          try {
          } finally {
            this.$l$gm__Finally2();
          }

          break $labelgroup0;
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<PreorderTraverseTree>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lPreorderTraverseTree$gd__6__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTree$gd__6_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTree$gd__6_$l$gm__Finally2
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lPreorderTraverseTree$gd__6_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Node$lTK$cmTV$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), null), 
      $lPreorderTraverseTree$gd__6_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), null), 
      $lPreorderTraverseTree$gd__6_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lPreorderTraverseTree$gd__6_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lPreorderTraverseTree$gd__6_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTree$gd__6_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lPreorderTraverseTree$gd__6_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "root", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:true }, "$l$g3__root", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lv$g5__2", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__3", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lv$g5__4", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.Current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<InOrderTraverseTree>d__7 */ 

(function $lInOrderTraverseTree$gd__7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };


  function $lInOrderTraverseTree$gd__7__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lInOrderTraverseTree$gd__7_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lInOrderTraverseTree$gd__7_MoveNext ($exception) {
    var $im00 = $asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).GetEnumerator;
    var $im01 = $asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Current;
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lnode$g5__2 = null;
      } else {
        this.$l$g1__state = -1;
        if (this.$l$g4__this._globalRoot === null) {
          result = false;
          return result;
        }
        this.$l$gs__1 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).InOrderTraverseTree(this.$l$g4__this._globalRoot), null);
        this.$l$g1__state = -3;
      }
      if (!$IM01().Call(this.$l$gs__1, null)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = null;
        result = false;
      } else {
        this.$lnode$g5__2 = $im01.Call(this.$l$gs__1, null);
        this.$l$g2__current = JSIL.CloneParameter($thisType.TK.get(this), this.$lnode$g5__2.Node$b2$Key$value);
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lInOrderTraverseTree$gd__7_System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lInOrderTraverseTree$gd__ = this;
    } else {
      $lInOrderTraverseTree$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
      $lInOrderTraverseTree$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lInOrderTraverseTree$gd__;
  }; 

  function $lInOrderTraverseTree$gd__7_System_Collections_Generic_IEnumerator$lTK$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lInOrderTraverseTree$gd__7_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator();
  }; 

  function $lInOrderTraverseTree$gd__7_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lInOrderTraverseTree$gd__7_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lInOrderTraverseTree$gd__7_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<InOrderTraverseTree>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lInOrderTraverseTree$gd__7__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__7_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lInOrderTraverseTree$gd__7_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTK$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), null), 
      $lInOrderTraverseTree$gd__7_System_Collections_Generic_IEnumerable$lTK$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTK$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TK"), null), 
      $lInOrderTraverseTree$gd__7_System_Collections_Generic_IEnumerator$lTK$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lInOrderTraverseTree$gd__7_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lInOrderTraverseTree$gd__7_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__7_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__7_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TK"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.BinarySearchTree`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lnode$g5__2", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTK$g.Current", $.GenericParameter("TK"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TK")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TK")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.BinarySearchTree`2+<InOrderTraverseTree>d__8 */ 

(function $lInOrderTraverseTree$gd__8$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };


  function $lInOrderTraverseTree$gd__8__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lInOrderTraverseTree$gd__8_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lInOrderTraverseTree$gd__8_$l$gm__Finally2 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__3 !== null) {
      $IM00().Call(this.$l$gs__3, null);
    }
  }; 

  function $lInOrderTraverseTree$gd__8_MoveNext ($exception) {
    var $im00 = $asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).GetEnumerator;
    var $im01 = $asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($thisType.TK.get(this), $thisType.TV.get(this))).get_Current;
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.root === null) {
                  var result = false;
                  return result;
                }
                this.$l$gs__1 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).InOrderTraverseTree(this.root.LeftNode), null);
                this.$l$g1__state = -3;
                break;

              case 1: 
                this.$l$g1__state = -3;
                this.$lv$g5__2 = null;
                break;

              case 2: 
                this.$l$g1__state = -1;
                this.$l$gs__3 = $im00.Call($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($thisType.TK.get(this), $thisType.TV.get(this)).InOrderTraverseTree(this.root.RightNode), null);
                this.$l$g1__state = -4;
                $label0 = 1 /* goto IL_14D */ ;
                continue $labelgroup0;

              case 3: 
                this.$l$g1__state = -4;
                this.$lv$g5__4 = null;
                $label0 = 1 /* goto IL_14D */ ;
                continue $labelgroup0;

              default: 
                result = false;
                return result;

            }
            if (!$IM01().Call(this.$l$gs__1, null)) {
              this.$l$gm__Finally1();
              this.$l$gs__1 = null;
              this.$l$g2__current = this.root;
              this.$l$g1__state = 2;
              result = true;
              return result;
            }
            this.$lv$g5__2 = $im01.Call(this.$l$gs__1, null);
            this.$l$g2__current = this.$lv$g5__2;
            this.$l$g1__state = 1;
            result = true;
            return result;

            $label0 = 1 /* goto IL_14D */ ;
            continue $labelgroup0;
          case 1: /* IL_14D */ 
            if (!$IM01().Call(this.$l$gs__3, null)) {
              this.$l$gm__Finally2();
              this.$l$gs__3 = null;
              result = false;
            } else {
              this.$lv$g5__4 = $im01.Call(this.$l$gs__3, null);
              this.$l$g2__current = this.$lv$g5__4;
              this.$l$g1__state = 3;
              result = true;
            }

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lInOrderTraverseTree$gd__8_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lInOrderTraverseTree$gd__ = this;
    } else {
      $lInOrderTraverseTree$gd__ = new ($thisType.Of($thisType.TK.get(this), $thisType.TV.get(this))) (0);
    }
    $lInOrderTraverseTree$gd__.root = this.$l$g3__root;
    return $lInOrderTraverseTree$gd__;
  }; 

  function $lInOrderTraverseTree$gd__8_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lInOrderTraverseTree$gd__8_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator();
  }; 

  function $lInOrderTraverseTree$gd__8_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lInOrderTraverseTree$gd__8_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lInOrderTraverseTree$gd__8_System_IDisposable_Dispose () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var num = (this.$l$g1__state | 0);
          if (num <= -3) {
            if (num === -4) {
              $label0 = 1 /* goto IL_32 */ ;
              continue $labelgroup0;
            }
            if (num !== -3) {
              return;
            }
          } else if (num !== 1) {
            if (num !== 3) {
              return;
            }
            $label0 = 1 /* goto IL_32 */ ;
            continue $labelgroup0;
          }
          try {
          } finally {
            this.$l$gm__Finally1();
          }
          return;

          $label0 = 1 /* goto IL_32 */ ;
          continue $labelgroup0;
        case 1: /* IL_32 */ 
          try {
          } finally {
            this.$l$gm__Finally2();
          }

          break $labelgroup0;
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.BinarySearchTree`2+<InOrderTraverseTree>d__8", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TK", "TV"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lInOrderTraverseTree$gd__8__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__8_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__8_$l$gm__Finally2
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lInOrderTraverseTree$gd__8_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Node$lTK$cmTV$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), null), 
      $lInOrderTraverseTree$gd__8_System_Collections_Generic_IEnumerable$lFusee_Jometri_Node$lTK$cmTV$g$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]), null), 
      $lInOrderTraverseTree$gd__8_System_Collections_Generic_IEnumerator$lFusee_Jometri_Node$lTK$cmTV$g$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lInOrderTraverseTree$gd__8_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lInOrderTraverseTree$gd__8_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__8_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lInOrderTraverseTree$gd__8_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "root", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:true }, "$l$g3__root", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lv$g5__2", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Field({Static:false, Public:false}, "$l$gs__3", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]));

    $.Field({Static:false, Public:false}, "$lv$g5__4", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Node$lTK$cmTV$g$g.Current", $asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.GenericParameter("TK"), $.GenericParameter("TV")])]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.Vertex */ 

(function Vertex$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.VertexData)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function Vertex__ctor$00 (handle, pos) {
    this.Handle = (handle | 0);
    this.IncidentHalfEdge = 0;
    var vertData = new ($T02())();
    vertData.Pos = pos.MemberwiseClone();
    this.VertData = vertData.MemberwiseClone();
  }; 

  function Vertex__ctor$01 (vert, newPos) {
    this.Handle = (vert.Handle | 0);
    this.IncidentHalfEdge = (vert.IncidentHalfEdge | 0);
    this.VertData = vert.VertData.MemberwiseClone();
    this.VertData.Pos = newPos.MemberwiseClone();
  }; 

  function Vertex_Object_Equals (obj) {
    var flag = !$thisType.$Is(obj);
    if (flag) {
      var result = false;
    } else {
      var comp = $thisType.$Cast(obj);
      result = $thisType.op_Equality(this, comp);
    }
    return result;
  }; 

  function Vertex_GetHashCode () {
    return this.Handle;
  }; 

  function Vertex_op_Equality (first, second) {
    return ((first.Handle | 0) === (second.Handle | 0));
  }; 

  function Vertex_op_GreaterThan (first, second) {
    return ((first.Handle | 0) > (second.Handle | 0));
  }; 

  function Vertex_op_Inequality (first, second) {
    return ((first.Handle | 0) !== (second.Handle | 0));
  }; 

  function Vertex_op_LessThan (first, second) {
    return ((first.Handle | 0) < (second.Handle | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.Vertex", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      Vertex__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      Vertex__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Vertex_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Vertex_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vertex_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vertex_op_GreaterThan
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vertex_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vertex_op_LessThan
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Handle", $.Int32);

    $.Field({Static:false, Public:false}, "IncidentHalfEdge", $.Int32);

    $.Field({Static:false, Public:true }, "VertData", $asm09.TypeRef("Fusee.Jometri.VertexData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.HalfEdge */ 

(function HalfEdge$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdgeData)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function HalfEdge__ctor$00 (handle, originVertex, twinHalfEdge, nextHalfEdge, prevHalfEdge, incidentFace) {
    this.Handle = (handle | 0);
    this.OriginVertex = (originVertex | 0);
    this.TwinHalfEdge = (twinHalfEdge | 0);
    this.NextHalfEdge = (nextHalfEdge | 0);
    this.PrevHalfEdge = (prevHalfEdge | 0);
    this.IncidentFace = (incidentFace | 0);
    this.HalfEdgeData = new ($T01())();
  }; 

  function HalfEdge__ctor$01 (handle) {
    this.Handle = (handle | 0);
    this.OriginVertex = 0;
    this.TwinHalfEdge = 0;
    this.NextHalfEdge = 0;
    this.PrevHalfEdge = 0;
    this.IncidentFace = 0;
    this.HalfEdgeData = new ($T01())();
  }; 

  function HalfEdge__ctor$02 (handle, halfEdge) {
    this.Handle = (handle | 0);
    this.OriginVertex = (halfEdge.OriginVertex | 0);
    this.TwinHalfEdge = (halfEdge.TwinHalfEdge | 0);
    this.NextHalfEdge = (halfEdge.NextHalfEdge | 0);
    this.PrevHalfEdge = (halfEdge.PrevHalfEdge | 0);
    this.IncidentFace = (halfEdge.IncidentFace | 0);
    this.HalfEdgeData = halfEdge.HalfEdgeData.MemberwiseClone();
  }; 

  function HalfEdge_Object_Equals (obj) {
    var flag = !$thisType.$Is(obj);
    if (flag) {
      var result = false;
    } else {
      var comp = $thisType.$Cast(obj);
      result = $thisType.op_Equality(this, comp);
    }
    return result;
  }; 

  function HalfEdge_GetHashCode () {
    return this.Handle;
  }; 

  function HalfEdge_op_Equality (first, second) {
    return ((first.Handle | 0) === (second.Handle | 0));
  }; 

  function HalfEdge_op_GreaterThan (first, second) {
    return ((first.Handle | 0) > (second.Handle | 0));
  }; 

  function HalfEdge_op_Inequality (first, second) {
    return ((first.Handle | 0) !== (second.Handle | 0));
  }; 

  function HalfEdge_op_LessThan (first, second) {
    return ((first.Handle | 0) < (second.Handle | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.HalfEdge", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      HalfEdge__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      HalfEdge__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      HalfEdge__ctor$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      HalfEdge_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      HalfEdge_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfEdge_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfEdge_op_GreaterThan
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfEdge_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfEdge_op_LessThan
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Handle", $.Int32);

    $.Field({Static:false, Public:false}, "OriginVertex", $.Int32);

    $.Field({Static:false, Public:false}, "TwinHalfEdge", $.Int32);

    $.Field({Static:false, Public:false}, "NextHalfEdge", $.Int32);

    $.Field({Static:false, Public:false}, "PrevHalfEdge", $.Int32);

    $.Field({Static:false, Public:false}, "IncidentFace", $.Int32);

    $.Field({Static:false, Public:true }, "HalfEdgeData", $asm09.TypeRef("Fusee.Jometri.HalfEdgeData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.Face */ 

(function Face$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.FaceData)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Int32")])]))) ();
  };


  function Face__ctor$00 (handle, outerHalfEdge) {
    this.Handle = (handle | 0);
    this.OuterHalfEdge = (outerHalfEdge | 0);
    this.FaceData = new ($T01())();
    this.InnerHalfEdges = $S00().Construct();
  }; 

  function Face__ctor$01 (handle) {
    this.Handle = (handle | 0);
    this.OuterHalfEdge = 0;
    this.FaceData = new ($T01())();
    this.InnerHalfEdges = $S00().Construct();
  }; 

  function Face__ctor$02 (handle, face) {
    this.Handle = (handle | 0);
    this.OuterHalfEdge = (face.OuterHalfEdge | 0);
    this.FaceData = face.FaceData.MemberwiseClone();
    this.InnerHalfEdges = $S01().Construct(face.InnerHalfEdges);
  }; 

  function Face_Object_Equals (obj) {
    var flag = !$thisType.$Is(obj);
    if (flag) {
      var result = false;
    } else {
      var comp = $thisType.$Cast(obj);
      result = $thisType.op_Equality(this, comp);
    }
    return result;
  }; 

  function Face_GetHashCode () {
    return this.Handle;
  }; 

  function Face_op_Equality (first, second) {
    return ((first.Handle | 0) === (second.Handle | 0));
  }; 

  function Face_op_GreaterThan (first, second) {
    return ((first.Handle | 0) > (second.Handle | 0));
  }; 

  function Face_op_Inequality (first, second) {
    return ((first.Handle | 0) !== (second.Handle | 0));
  }; 

  function Face_op_LessThan (first, second) {
    return ((first.Handle | 0) < (second.Handle | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.Face", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Face__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Face__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      Face__ctor$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Face_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Face_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Face_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Face_op_GreaterThan
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Face_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Face_op_LessThan
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Handle", $.Int32);

    $.Field({Static:false, Public:true }, "OuterHalfEdge", $.Int32);

    $.Field({Static:false, Public:true }, "FaceData", $asm09.TypeRef("Fusee.Jometri.FaceData"));

    $.Field({Static:false, Public:false}, "InnerHalfEdges", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.VertexData */ 

(function VertexData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.VertexData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Pos", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.HalfEdgeData */ 

(function HalfEdgeData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.HalfEdgeData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Normal", $asm0A.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "TextureCoord", $asm0A.TypeRef("Fusee.Math.Core.float2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.FaceData */ 

(function FaceData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.FaceData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "FaceNormal", $asm0A.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.CreatePrimitiveGeometry */ 

(function CreatePrimitiveGeometry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Jometri.PolyBoundary)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.PolyBoundary))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.Fusee.Jometri.Extrude)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Array)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Geometry, null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Vertex, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.HalfEdge, [$asm0F.System.Int32]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Face, [$asm0F.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.TypeRef("Fusee.Math.Core.float3")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.PolyBoundary), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.PolyBoundary")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Geometry, [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.PolyBoundary)]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Array, $asm0F.System.Array, 
        $asm0F.System.Int32
      ]))) ();
  };


  function CreatePrimitiveGeometry__ctor () {
  }; 

  function CreatePrimitiveGeometry_CreateConeGeometry (baseRadius, dimensionY, sliceCount) {
    var $temp00;
    var tempVertex = new ($T02())(), h = new ($T03())(), h2 = new ($T03())(), h3 = new ($T03())(), h4 = new ($T03())(), h5 = new ($T03())(), h6 = new ($T03())(), triangle = new ($T04())(), triangle2 = new ($T04())();
    var flag = (sliceCount | 0) < 3;
    if (flag) {
      sliceCount = 3;
    }
    var flag2 = (+baseRadius <= 0) || 
    (+dimensionY <= 0);
    if (flag2) {
      throw $S00().Construct("You can not input paramaters <= 0");
    }
    var cone = $S01().Construct();
    var northPole = $S02().Construct(cone.CreateVertHandleId(), $S03().Construct(0, +((+dimensionY / 2)), 0));
    var southPole = $S02().Construct(cone.CreateVertHandleId(), $S03().Construct(0, +((-dimensionY / 2)), 0));
    var angleStep = +((6.2831853071795862 / +sliceCount));
    var yPos = +((-dimensionY / 2));
    var firstHandles = null;
    var lastH3 = new ($T03())();
    var lastH4 = new ($T03())();
    var lastVertex = southPole.MemberwiseClone();

    for (var i = 1; i < (((sliceCount | 0) + 1) | 0); i = ((i + 1) | 0)) {
      var x = Math.fround(Math.cos((angleStep * +i))) * +baseRadius;
      var z = Math.fround(Math.sin((angleStep * +i))) * +baseRadius;
      (tempVertex = tempVertex.MemberwiseClone(), 
        $S04().Call($T02().prototype, "_ctor", null, tempVertex, cone.CreateVertHandleId(), $S03().Construct(x, yPos, z)));
      (h = h.MemberwiseClone(), 
        $T03().prototype._ctor.call(h, cone.CreateHalfEdgeHandleId()));
      (h2 = h2.MemberwiseClone(), 
        $T03().prototype._ctor.call(h2, cone.CreateHalfEdgeHandleId()));
      tempVertex.IncidentHalfEdge = (h2.Handle | 0);
      h.OriginVertex = (southPole.Handle | 0);
      h2.OriginVertex = (tempVertex.Handle | 0);
      h.TwinHalfEdge = (h2.Handle | 0);
      h2.TwinHalfEdge = (h.Handle | 0);
      (h3 = h3.MemberwiseClone(), 
        $T03().prototype._ctor.call(h3, cone.CreateHalfEdgeHandleId()));
      (h4 = h4.MemberwiseClone(), 
        $T03().prototype._ctor.call(h4, cone.CreateHalfEdgeHandleId()));
      northPole.IncidentHalfEdge = (h3.Handle | 0);
      southPole.IncidentHalfEdge = (h.Handle | 0);
      h3.OriginVertex = (northPole.Handle | 0);
      h4.OriginVertex = (tempVertex.Handle | 0);
      h3.TwinHalfEdge = (h4.Handle | 0);
      h4.TwinHalfEdge = (h3.Handle | 0);
      var flag3 = $T02().op_Equality(lastVertex, southPole);
      if (flag3) {
        firstHandles = JSIL.Array.New($T01(), [tempVertex.Handle, h.Handle, h4.Handle]);
        lastH3 = h3.MemberwiseClone();
        lastH4 = h2.MemberwiseClone();
        (cone.Geometry$DictVertices$value).Add(tempVertex.Handle, tempVertex.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h.Handle, h.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h2.Handle, h2.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h3.Handle, h3.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h4.Handle, h4.MemberwiseClone());
        lastVertex = tempVertex.MemberwiseClone();
      } else {
        (h5 = h5.MemberwiseClone(), 
          $T03().prototype._ctor.call(h5, cone.CreateHalfEdgeHandleId()));
        (h6 = h6.MemberwiseClone(), 
          $T03().prototype._ctor.call(h6, cone.CreateHalfEdgeHandleId()));
        h5.OriginVertex = (lastVertex.Handle | 0);
        h6.OriginVertex = (tempVertex.Handle | 0);
        h5.TwinHalfEdge = (h6.Handle | 0);
        h6.TwinHalfEdge = (h5.Handle | 0);
        (triangle = triangle.MemberwiseClone(), 
          $T04().prototype._ctor.call(triangle, cone.CreateFaceHandleId()));
        h5.NextHalfEdge = (h4.Handle | 0);
        triangle.OuterHalfEdge = (h5.Handle | 0);
        h4.NextHalfEdge = (lastH3.Handle | 0);
        lastH3.NextHalfEdge = (h5.Handle | 0);
        h5.IncidentFace = (triangle.Handle | 0);
        h4.IncidentFace = (triangle.Handle | 0);
        lastH3.IncidentFace = (triangle.Handle | 0);
        h5.PrevHalfEdge = (lastH3.Handle | 0);
        lastH3.PrevHalfEdge = (h4.Handle | 0);
        h4.PrevHalfEdge = (h5.Handle | 0);
        (triangle2 = triangle2.MemberwiseClone(), 
          $T04().prototype._ctor.call(triangle2, cone.CreateFaceHandleId()));
        h6.NextHalfEdge = (lastH4.Handle | 0);
        triangle2.OuterHalfEdge = (h6.Handle | 0);
        lastH4.NextHalfEdge = (h.Handle | 0);
        h.NextHalfEdge = (h6.Handle | 0);
        h6.IncidentFace = (triangle2.Handle | 0);
        lastH4.IncidentFace = (triangle2.Handle | 0);
        h.IncidentFace = (triangle2.Handle | 0);
        h6.PrevHalfEdge = (h.Handle | 0);
        h.PrevHalfEdge = (lastH4.Handle | 0);
        lastH4.PrevHalfEdge = (h6.Handle | 0);
        (cone.Geometry$DictVertices$value).Add(tempVertex.Handle, tempVertex.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h.Handle, h.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h2.Handle, h2.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h3.Handle, h3.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h4.Handle, h4.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h5.Handle, h5.MemberwiseClone());
        (cone.Geometry$DictHalfEdges$value).Add(h6.Handle, h6.MemberwiseClone());
        cone.ReplaceHalfEdge(lastH4.MemberwiseClone());
        cone.ReplaceHalfEdge(lastH3.MemberwiseClone());
        (cone.Geometry$DictFaces$value).Add(triangle.Handle, triangle.MemberwiseClone());
        (cone.Geometry$DictFaces$value).Add(triangle2.Handle, triangle2.MemberwiseClone());
        lastH4 = h2.MemberwiseClone();
        lastH3 = h3.MemberwiseClone();
        lastVertex = tempVertex;
      }
    }
    (cone.Geometry$DictVertices$value).Add(southPole.Handle, southPole.MemberwiseClone());
    (cone.Geometry$DictVertices$value).Add(northPole.Handle, northPole.MemberwiseClone());
    var firstVertex = cone.GetVertexByHandle(firstHandles[0]).MemberwiseClone();
    var firtstH = cone.GetHalfEdgeByHandle(firstHandles[1]).MemberwiseClone();
    var firstH4 = cone.GetHalfEdgeByHandle(firstHandles[2]).MemberwiseClone();
    var lastH5 = $S05().Construct(cone.CreateHalfEdgeHandleId());
    var lastH6 = $S05().Construct(cone.CreateHalfEdgeHandleId());
    lastH5.OriginVertex = (lastVertex.Handle | 0);
    lastH6.OriginVertex = (firstVertex.Handle | 0);
    lastH5.TwinHalfEdge = (lastH6.Handle | 0);
    lastH6.TwinHalfEdge = (lastH5.Handle | 0);
    var face2 = $S06().Construct(cone.CreateFaceHandleId());
    face2.OuterHalfEdge = (lastH5.Handle | 0);
    var triangleL = face2.MemberwiseClone();
    lastH5.NextHalfEdge = (firstH4.Handle | 0);
    firstH4.NextHalfEdge = (lastH3.Handle | 0);
    lastH3.NextHalfEdge = (lastH5.Handle | 0);
    lastH5.IncidentFace = (triangleL.Handle | 0);
    firstH4.IncidentFace = (triangleL.Handle | 0);
    lastH3.IncidentFace = (triangleL.Handle | 0);
    lastH5.PrevHalfEdge = (lastH3.Handle | 0);
    lastH3.PrevHalfEdge = (firstH4.Handle | 0);
    firstH4.PrevHalfEdge = (lastH5.Handle | 0);
    (face2 = face2.MemberwiseClone(), 
      $T04().prototype._ctor.call(face2, cone.CreateFaceHandleId()));
    face2.OuterHalfEdge = (lastH6.Handle | 0);
    var triangleL2 = face2;
    lastH6.NextHalfEdge = (lastH4.Handle | 0);
    lastH4.NextHalfEdge = (firtstH.Handle | 0);
    firtstH.NextHalfEdge = (lastH6.Handle | 0);
    lastH6.IncidentFace = (triangleL2.Handle | 0);
    lastH4.IncidentFace = (triangleL2.Handle | 0);
    firtstH.IncidentFace = (triangleL2.Handle | 0);
    lastH6.PrevHalfEdge = (firtstH.Handle | 0);
    firtstH.PrevHalfEdge = (lastH4.Handle | 0);
    lastH4.PrevHalfEdge = (lastH6.Handle | 0);
    cone.ReplaceHalfEdge(firtstH.MemberwiseClone());
    (cone.Geometry$DictHalfEdges$value).Add(lastH5.Handle, lastH5.MemberwiseClone());
    (cone.Geometry$DictHalfEdges$value).Add(lastH6.Handle, lastH6.MemberwiseClone());
    cone.ReplaceHalfEdge(lastH4.MemberwiseClone());
    cone.ReplaceHalfEdge(lastH3.MemberwiseClone());
    cone.ReplaceHalfEdge(firstH4.MemberwiseClone());
    (cone.Geometry$DictFaces$value).Add(triangleL.Handle, triangleL.MemberwiseClone());
    (cone.Geometry$DictFaces$value).Add(triangleL2.Handle, triangleL2.MemberwiseClone());
    var allFaces = $T10().ToList$b1($T04())(cone.GetAllFaces());

    for (var a$0 = allFaces._items, i$0 = 0, l$0 = (allFaces._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var face = a$0[i$0];
      cone.SetFaceNormal($T10().ToList$b1($T02())(cone.GetFaceVertices(face.Handle)), face);
    }
    return cone;
  }; 

  function CreatePrimitiveGeometry_CreateCuboidGeometry (dimensionX, dimensionY, dimensionZ) {
    var flag = (+dimensionX <= 0) || 
    (+dimensionY <= 0) || 
    (+dimensionZ <= 0);
    if (flag) {
      throw $S00().Construct("The dimension values can not be <= 0");
    }
    var xPos = +((+dimensionX / 2));
    var yPos = +((+dimensionY / 2));
    var zPos = +((+dimensionZ / 2));
    var polyBoundary = new ($T11())();
    var expr_57 = $S07().Construct();
    $S08().CallVirtual("Add", null, expr_57, $S03().Construct(-xPos, yPos, -zPos));
    $S08().CallVirtual("Add", null, expr_57, $S03().Construct(-xPos, -yPos, -zPos));
    $S08().CallVirtual("Add", null, expr_57, $S03().Construct(xPos, -yPos, -zPos));
    $S08().CallVirtual("Add", null, expr_57, $S03().Construct(xPos, yPos, -zPos));
    polyBoundary.Points = expr_57;
    polyBoundary.IsOuter = true;
    var outlineRectangle = polyBoundary;
    var expr_B0 = $S09().Construct();
    $S0A().CallVirtual("Add", null, expr_B0, outlineRectangle.MemberwiseClone());
    var outlinesCube = expr_B0;
    var cuboid = $S0B().Construct(outlinesCube);
    $T14().Extrude2DPolygon(cuboid, dimensionZ, false);
    return cuboid;
  }; 

  function CreatePrimitiveGeometry_CreatePyramidGeometry (dimensionX, dimensionY, dimensionZ) {
    var $temp00;
    var current = new ($T02())(), h = new ($T03())(), h2 = new ($T03())(), h3 = new ($T03())(), h4 = new ($T03())();
    var flag = (+dimensionX <= 0) || 
    (+dimensionY <= 0) || 
    (+dimensionZ <= 0);
    if (flag) {
      throw $S00().Construct("The dimension values can not be <= 0");
    }
    var xPos = +((+dimensionX / 2));
    var yPos = +((+dimensionY / 2));
    var zPos = +((+dimensionZ / 2));
    var pyramid = $S01().Construct();
    var positions = JSIL.Array.New($T08(), [$S03().Construct(-xPos, -yPos, -zPos), $S03().Construct(xPos, -yPos, -zPos), $S03().Construct(xPos, -yPos, zPos), $S03().Construct(-xPos, -yPos, zPos), $S03().Construct(0, yPos, 0)]);
    var face2 = $S06().Construct(6);
    face2.OuterHalfEdge = 4;
    var baseFace = face2.MemberwiseClone();

    for (var i = 0; i < 5; i = ((i + 1) | 0)) {
      (current = current.MemberwiseClone(), 
        $S04().Call($T02().prototype, "_ctor", null, current, pyramid.CreateVertHandleId(), positions[i].MemberwiseClone()));
      var flag2 = i < 4;
      if (flag2) {
        current.IncidentHalfEdge = ((Math.imul(i, 4) + 1) | 0);
      }
      var flag3 = i === 4;
      if (flag3) {
        current.IncidentHalfEdge = 3;
      }
      (pyramid.Geometry$DictVertices$value).Add(current.Handle, current.MemberwiseClone());
    }

    for (var j = 0; j < 4; j = ((j + 1) | 0)) {
      (h = h.MemberwiseClone(), 
        $T03().prototype._ctor.call(h, ((Math.imul(j, 4) + 1) | 0)));
      (h2 = h2.MemberwiseClone(), 
        $T03().prototype._ctor.call(h2, ((Math.imul(j, 4) + 2) | 0)));
      (h3 = h3.MemberwiseClone(), 
        $T03().prototype._ctor.call(h3, ((Math.imul(j, 4) + 3) | 0)));
      (h4 = h4.MemberwiseClone(), 
        $T03().prototype._ctor.call(h4, ((Math.imul(j, 4) + 4) | 0)));
      (face2 = face2.MemberwiseClone(), 
        $T04().prototype._ctor.call(face2, ((j + 2) | 0)));
      face2.OuterHalfEdge = (h.Handle | 0);
      var sideFace = face2;
      h.IncidentFace = (sideFace.Handle | 0);
      h2.IncidentFace = (sideFace.Handle | 0);
      h3.IncidentFace = (sideFace.Handle | 0);
      h4.IncidentFace = (baseFace.Handle | 0);
      h.NextHalfEdge = (h2.Handle | 0);
      h2.NextHalfEdge = (h3.Handle | 0);
      h3.NextHalfEdge = (h.Handle | 0);
      h.PrevHalfEdge = (h3.Handle | 0);
      h2.PrevHalfEdge = (h.Handle | 0);
      h3.PrevHalfEdge = (h2.Handle | 0);
      h3.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(5).Handle | 0);
      h.TwinHalfEdge = (h4.Handle | 0);
      h4.TwinHalfEdge = (h.Handle | 0);
      var flag4 = j < 3;
      if (flag4) {
        h4.PrevHalfEdge = ((Math.imul(((j + 1) | 0), 4) + 4) | 0);
        h2.TwinHalfEdge = ((Math.imul(((j + 1) | 0), 4) + 3) | 0);
        h.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(((j + 1) | 0)).Handle | 0);
        h2.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(((j + 2) | 0)).Handle | 0);
        h4.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(((j + 2) | 0)).Handle | 0);
      } else {
        h4.PrevHalfEdge = 4;
        h2.TwinHalfEdge = 3;
        h.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(((j + 1) | 0)).Handle | 0);
        h2.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(1).Handle | 0);
        h4.OriginVertex = ((pyramid.Geometry$DictVertices$value).get_Item(1).Handle | 0);
      }
      var flag5 = j > 0;
      if (flag5) {
        h3.TwinHalfEdge = ((Math.imul(((j - 1) | 0), 4) + 2) | 0);
        h4.NextHalfEdge = ((Math.imul(((j - 1) | 0), 4) + 4) | 0);
      } else {
        h3.TwinHalfEdge = 14;
        h4.NextHalfEdge = 16;
      }
      (pyramid.Geometry$DictHalfEdges$value).Add(h.Handle, h.MemberwiseClone());
      (pyramid.Geometry$DictHalfEdges$value).Add(h2.Handle, h2.MemberwiseClone());
      (pyramid.Geometry$DictHalfEdges$value).Add(h3.Handle, h3.MemberwiseClone());
      (pyramid.Geometry$DictHalfEdges$value).Add(h4.Handle, h4.MemberwiseClone());
      (pyramid.Geometry$DictFaces$value).Add(sideFace.Handle, sideFace.MemberwiseClone());
    }
    (pyramid.Geometry$DictFaces$value).Add(baseFace.Handle, baseFace.MemberwiseClone());
    pyramid.SetHighestHandles();
    var allFaces = $T10().ToList$b1($T04())(pyramid.GetAllFaces());

    for (var a$0 = allFaces._items, i$0 = 0, l$0 = (allFaces._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var face = a$0[i$0];
      var faceVertices = $T10().ToList$b1($T02())(pyramid.GetFaceVertices(face.Handle));
      pyramid.SetFaceNormal(faceVertices, face);
    }
    return pyramid;
  }; 

  function CreatePrimitiveGeometry_CreateSpehreGeometry (radius, horizontalResolution, verticalResolution) {
    var $temp00;
    var circleVertex = new ($T02())(), bottomTriangle = new ($T04())(), h = new ($T03())(), h2 = new ($T03())(), h3 = new ($T03())(), topTriangle = new ($T04())(), h4 = new ($T03())(), h5 = new ($T03())(), h6 = new ($T03())(), quad = new ($T04())(), h7 = new ($T03())(), h8 = new ($T03())(), h9 = new ($T03())(), h10 = new ($T03())();
    var flag = +radius <= 0;
    if (flag) {
      throw $S00().Construct("Radius can not be <= 0");
    }
    var flag2 = (horizontalResolution | 0) <= 3;
    if (flag2) {
      horizontalResolution = 3;
    }
    var flag3 = (verticalResolution | 0) <= 2;
    if (flag3) {
      verticalResolution = 2;
    }
    var sphere = $S01().Construct();
    var northPole = $S02().Construct(sphere.CreateVertHandleId(), $S03().Construct(0, radius, 0));
    var southPole = $S02().Construct(sphere.CreateVertHandleId(), $S03().Construct(0, -radius, 0));
    var horizontalAngleStep = +((6.2831853071795862 / +horizontalResolution));
    var verrticalAngleStep = +((3.1415926535897931 / +verticalResolution));
    var currentLatitudeVerticesHandles = JSIL.Array.New($T01(), horizontalResolution);
    var lastLaitudeVerticesHandles = JSIL.Array.New($T01(), horizontalResolution);

    for (var i = 1; i < (((verticalResolution | 0) + 1) | 0); i = ((i + 1) | 0)) {
      var flag4 = i < (verticalResolution | 0);
      if (flag4) {

        for (var j = 0; j < (horizontalResolution | 0); j = ((j + 1) | 0)) {
          var xPos = Math.fround((radius * (Math.sin((horizontalAngleStep * +j)))) * (Math.sin((verrticalAngleStep * +i))));
          var yPos = Math.fround(radius * (Math.cos((verrticalAngleStep * +i))));
          var zPos = Math.fround((radius * (Math.cos((horizontalAngleStep * +j)))) * (Math.sin((verrticalAngleStep * +i))));
          (circleVertex = circleVertex.MemberwiseClone(), 
            $S04().Call($T02().prototype, "_ctor", null, circleVertex, sphere.CreateVertHandleId(), $S03().Construct(xPos, yPos, zPos)));
          (sphere.Geometry$DictVertices$value).Add(circleVertex.Handle, circleVertex.MemberwiseClone());
          currentLatitudeVerticesHandles[j] = (circleVertex.Handle | 0);
        }
      }
      var topHeHandles = JSIL.Array.New($T01(), horizontalResolution);

      for (var k = 0; k < (horizontalResolution | 0); k = ((k + 1) | 0)) {
        var flag5 = i === (verticalResolution | 0);
        if (flag5) {
          (bottomTriangle = bottomTriangle.MemberwiseClone(), 
            $T04().prototype._ctor.call(bottomTriangle, sphere.CreateFaceHandleId()));
          (h = h.MemberwiseClone(), 
            $T03().prototype._ctor.call(h, sphere.CreateHalfEdgeHandleId()));
          (h2 = h2.MemberwiseClone(), 
            $T03().prototype._ctor.call(h2, sphere.CreateHalfEdgeHandleId()));
          (h3 = h3.MemberwiseClone(), 
            $T03().prototype._ctor.call(h3, sphere.CreateHalfEdgeHandleId()));
          topHeHandles[k] = (h.Handle | 0);
          h.NextHalfEdge = (h2.Handle | 0);
          h2.NextHalfEdge = (h3.Handle | 0);
          h3.NextHalfEdge = (h.Handle | 0);
          h.PrevHalfEdge = (h3.Handle | 0);
          h2.PrevHalfEdge = (h.Handle | 0);
          h3.PrevHalfEdge = (h2.Handle | 0);
          h.IncidentFace = (bottomTriangle.Handle | 0);
          h2.IncidentFace = (bottomTriangle.Handle | 0);
          h3.IncidentFace = (bottomTriangle.Handle | 0);
          h.OriginVertex = (currentLatitudeVerticesHandles[k] | 0);
          h2.OriginVertex = ((
            (k === (((horizontalResolution | 0) - 1) | 0))
               ? currentLatitudeVerticesHandles[0]
               : currentLatitudeVerticesHandles[((k + 1) | 0)])
           | 0);
          h3.OriginVertex = (southPole.Handle | 0);
          bottomTriangle.OuterHalfEdge = (h.Handle | 0);
          southPole.IncidentHalfEdge = (h3.Handle | 0);
          (sphere.Geometry$DictHalfEdges$value).Add(h.Handle, h.MemberwiseClone());
          (sphere.Geometry$DictHalfEdges$value).Add(h2.Handle, h2.MemberwiseClone());
          (sphere.Geometry$DictHalfEdges$value).Add(h3.Handle, h3.MemberwiseClone());
          (sphere.Geometry$DictFaces$value).Add(bottomTriangle.Handle, bottomTriangle.MemberwiseClone());
        } else {
          var flag6 = i === 1;
          if (flag6) {
            (topTriangle = topTriangle.MemberwiseClone(), 
              $T04().prototype._ctor.call(topTriangle, sphere.CreateFaceHandleId()));
            (h4 = h4.MemberwiseClone(), 
              $T03().prototype._ctor.call(h4, sphere.CreateHalfEdgeHandleId()));
            (h5 = h5.MemberwiseClone(), 
              $T03().prototype._ctor.call(h5, sphere.CreateHalfEdgeHandleId()));
            (h6 = h6.MemberwiseClone(), 
              $T03().prototype._ctor.call(h6, sphere.CreateHalfEdgeHandleId()));
            topHeHandles[k] = (h4.Handle | 0);
            h4.NextHalfEdge = (h5.Handle | 0);
            h5.NextHalfEdge = (h6.Handle | 0);
            h6.NextHalfEdge = (h4.Handle | 0);
            h4.PrevHalfEdge = (h6.Handle | 0);
            h5.PrevHalfEdge = (h4.Handle | 0);
            h6.PrevHalfEdge = (h5.Handle | 0);
            h4.IncidentFace = (topTriangle.Handle | 0);
            h5.IncidentFace = (topTriangle.Handle | 0);
            h6.IncidentFace = (topTriangle.Handle | 0);
            h4.OriginVertex = ((
              (k === (((horizontalResolution | 0) - 1) | 0))
                 ? currentLatitudeVerticesHandles[0]
                 : currentLatitudeVerticesHandles[((k + 1) | 0)])
             | 0);
            h5.OriginVertex = (currentLatitudeVerticesHandles[k] | 0);
            h6.OriginVertex = (northPole.Handle | 0);
            topTriangle.OuterHalfEdge = (h4.Handle | 0);
            var currentVertex = sphere.GetVertexByHandle(currentLatitudeVerticesHandles[k]).MemberwiseClone();
            currentVertex.IncidentHalfEdge = (h5.Handle | 0);
            northPole.IncidentHalfEdge = (h6.Handle | 0);
            (sphere.Geometry$DictHalfEdges$value).Add(h4.Handle, h4.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h5.Handle, h5.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h6.Handle, h6.MemberwiseClone());
            (sphere.Geometry$DictFaces$value).Add(topTriangle.Handle, topTriangle.MemberwiseClone());
            sphere.ReplaceVertex(currentVertex.MemberwiseClone());
          } else {
            (quad = quad.MemberwiseClone(), 
              $T04().prototype._ctor.call(quad, sphere.CreateFaceHandleId()));
            (h7 = h7.MemberwiseClone(), 
              $T03().prototype._ctor.call(h7, sphere.CreateHalfEdgeHandleId()));
            (h8 = h8.MemberwiseClone(), 
              $T03().prototype._ctor.call(h8, sphere.CreateHalfEdgeHandleId()));
            (h9 = h9.MemberwiseClone(), 
              $T03().prototype._ctor.call(h9, sphere.CreateHalfEdgeHandleId()));
            (h10 = h10.MemberwiseClone(), 
              $T03().prototype._ctor.call(h10, sphere.CreateHalfEdgeHandleId()));
            topHeHandles[k] = (h7.Handle | 0);
            h7.NextHalfEdge = (h8.Handle | 0);
            h8.NextHalfEdge = (h9.Handle | 0);
            h9.NextHalfEdge = (h10.Handle | 0);
            h10.NextHalfEdge = (h7.Handle | 0);
            h7.PrevHalfEdge = (h10.Handle | 0);
            h8.PrevHalfEdge = (h7.Handle | 0);
            h9.PrevHalfEdge = (h8.Handle | 0);
            h10.PrevHalfEdge = (h9.Handle | 0);
            h7.IncidentFace = (quad.Handle | 0);
            h8.IncidentFace = (quad.Handle | 0);
            h9.IncidentFace = (quad.Handle | 0);
            h10.IncidentFace = (quad.Handle | 0);
            quad.OuterHalfEdge = (h7.Handle | 0);
            h10.OriginVertex = (currentLatitudeVerticesHandles[k] | 0);
            h9.OriginVertex = ((
              (k === (((horizontalResolution | 0) - 1) | 0))
                 ? currentLatitudeVerticesHandles[0]
                 : currentLatitudeVerticesHandles[((k + 1) | 0)])
             | 0);
            h8.OriginVertex = ((
              (k === (((horizontalResolution | 0) - 1) | 0))
                 ? lastLaitudeVerticesHandles[0]
                 : lastLaitudeVerticesHandles[((k + 1) | 0)])
             | 0);
            h7.OriginVertex = (lastLaitudeVerticesHandles[k] | 0);
            var currentVertex2 = sphere.GetVertexByHandle(currentLatitudeVerticesHandles[k]).MemberwiseClone();
            currentVertex2.IncidentHalfEdge = (h10.Handle | 0);
            (sphere.Geometry$DictFaces$value).Add(quad.Handle, quad.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h7.Handle, h7.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h8.Handle, h8.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h9.Handle, h9.MemberwiseClone());
            (sphere.Geometry$DictHalfEdges$value).Add(h10.Handle, h10.MemberwiseClone());
            sphere.ReplaceVertex(currentVertex2.MemberwiseClone());
          }
        }
      }

      for (var l = 0; l < (horizontalResolution | 0); l = ((l + 1) | 0)) {
        var flag7 = i === 1;
        if (flag7) {
          var nextH1Index = ((
            (l === 0)
               ? (((horizontalResolution | 0) - 1) | 0)
               : ((l - 1) | 0))
           | 0);
          var h11 = sphere.GetHalfEdgeByHandle(topHeHandles[l]).MemberwiseClone();
          var h12 = sphere.GetHalfEdgeByHandle(h11.NextHalfEdge).MemberwiseClone();
          var nextH = sphere.GetHalfEdgeByHandle(topHeHandles[nextH1Index]).MemberwiseClone();
          var nextH2 = sphere.GetHalfEdgeByHandle(nextH.PrevHalfEdge).MemberwiseClone();
          nextH2.TwinHalfEdge = (h12.Handle | 0);
          h12.TwinHalfEdge = (nextH2.Handle | 0);
          sphere.ReplaceHalfEdge(nextH2.MemberwiseClone());
          sphere.ReplaceHalfEdge(h12.MemberwiseClone());
        } else {
          var flag8 = i === (verticalResolution | 0);
          if (flag8) {
            var nextH1Index2 = ((
              (l === 0)
                 ? (((horizontalResolution | 0) - 1) | 0)
                 : ((l - 1) | 0))
             | 0);
            var h13 = sphere.GetHalfEdgeByHandle(topHeHandles[l]).MemberwiseClone();
            var h14 = sphere.GetHalfEdgeByHandle(h13.PrevHalfEdge).MemberwiseClone();
            var nextH3 = sphere.GetHalfEdgeByHandle(topHeHandles[nextH1Index2]).MemberwiseClone();
            var nextH4 = sphere.GetHalfEdgeByHandle(nextH3.NextHalfEdge).MemberwiseClone();
            nextH4.TwinHalfEdge = (h14.Handle | 0);
            h14.TwinHalfEdge = (nextH4.Handle | 0);
            sphere.ReplaceHalfEdge(nextH4.MemberwiseClone());
            sphere.ReplaceHalfEdge(h14.MemberwiseClone());
          } else {
            var h15 = sphere.GetHalfEdgeByHandle(topHeHandles[l]).MemberwiseClone();
            var h16 = sphere.GetHalfEdgeByHandle(h15.PrevHalfEdge).MemberwiseClone();
            var nextH1Index3 = ((
              (l === 0)
                 ? (((horizontalResolution | 0) - 1) | 0)
                 : ((l - 1) | 0))
             | 0);
            var nextH5 = sphere.GetHalfEdgeByHandle(topHeHandles[nextH1Index3]).MemberwiseClone();
            var nextH6 = sphere.GetHalfEdgeByHandle(nextH5.NextHalfEdge).MemberwiseClone();
            nextH6.TwinHalfEdge = (h16.Handle | 0);
            h16.TwinHalfEdge = (nextH6.Handle | 0);
            sphere.ReplaceHalfEdge(nextH6.MemberwiseClone());
            sphere.ReplaceHalfEdge(h16.MemberwiseClone());
          }
        }
        var flag9 = i > 1;
        if (flag9) {
          var h17 = sphere.GetHalfEdgeByHandle(topHeHandles[l]).MemberwiseClone();
          var lastVertex = sphere.GetVertexByHandle(lastLaitudeVerticesHandles[l]).MemberwiseClone();
          var topH = sphere.GetHalfEdgeByHandle(lastVertex.IncidentHalfEdge).MemberwiseClone();

        $loop4: 
          while (true) {
            var flag10 = (topH.TwinHalfEdge | 0) === 0;
            if (flag10) {
              break $loop4;
            }
            topH = sphere.GetHalfEdgeByHandle(topH.NextHalfEdge).MemberwiseClone();
          }
          topH.TwinHalfEdge = (h17.Handle | 0);
          h17.TwinHalfEdge = (topH.Handle | 0);
          sphere.ReplaceHalfEdge(h17.MemberwiseClone());
          sphere.ReplaceHalfEdge(topH.MemberwiseClone());
        }
      }
      $S0C().CallStatic($T17(), "Copy", null, currentLatitudeVerticesHandles, lastLaitudeVerticesHandles, currentLatitudeVerticesHandles.length);
    }
    (sphere.Geometry$DictVertices$value).Add(northPole.Handle, northPole.MemberwiseClone());
    (sphere.Geometry$DictVertices$value).Add(southPole.Handle, southPole.MemberwiseClone());
    var allFaces = $T10().ToList$b1($T04())(sphere.GetAllFaces());

    for (var a$0 = allFaces._items, i$0 = 0, l$0 = (allFaces._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var face = a$0[i$0];
      sphere.SetFaceNormal($T10().ToList$b1($T02())(sphere.GetFaceVertices(face.Handle)), face);
    }
    return sphere;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.CreatePrimitiveGeometry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CreatePrimitiveGeometry__ctor
    );

    $.Method({Static:true , Public:true }, "CreateConeGeometry", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      CreatePrimitiveGeometry_CreateConeGeometry
    );

    $.Method({Static:true , Public:true }, "CreateCuboidGeometry", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $.Single, $.Single, 
          $.Single
        ]), 
      CreatePrimitiveGeometry_CreateCuboidGeometry
    );

    $.Method({Static:true , Public:true }, "CreatePyramidGeometry", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $.Single, $.Single, 
          $.Single
        ]), 
      CreatePrimitiveGeometry_CreatePyramidGeometry
    );

    $.Method({Static:true , Public:true }, "CreateSpehreGeometry", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $.Single, $.Int32, 
          $.Int32
        ]), 
      CreatePrimitiveGeometry_CreateSpehreGeometry
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.PolyBoundary */ 

(function PolyBoundary$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.PolyBoundary", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Points", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")]));

    $.Field({Static:false, Public:true }, "IsOuter", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.GeomInitializeHelper */ 

(function GeomInitializeHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.Fusee.Jometri.PolyBoundary)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.PolyBoundary))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.PolyBoundary))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Face, [$asm0F.System.Int32, $asm0F.System.Int32]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32)]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Face, [$asm0F.System.Int32]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("Fusee.Jometri.Vertex"), $asm0F.TypeRef("System.Boolean")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm09.Fusee.Jometri.Vertex, $asm0F.System.Boolean)).get_Item)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.PolyBoundary).GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.PolyBoundary).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge).GetEnumerator)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge).get_Current)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex).GetEnumerator)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex).get_Current)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0A.Fusee.Math.Core.float3).GetEnumerator)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0A.Fusee.Math.Core.float3).get_Current)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge).get_Count)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge).get_Item)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge).set_Item)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.HalfEdge).Add)) ();
  };


  function GeomInitializeHelper_AddFace (firstHalfEdge, /* ref */ face) {
    face.set($S00().Construct(((($thisType._geometry.Geometry$DictFaces$value.get_Count() | 0) + 1) | 0), firstHalfEdge));
    return face.get().Handle;
  }; 

  function GeomInitializeHelper_BoundaryEdges (outlineVerts, polyBoundary) {
    var face = new JSIL.BoxedVariable(new ($T01())());
    var halfEdge = new ($T06())(), twinHalfEdge = new ($T06())();
    var faceHandle = 0;
    var boundaryEdges = $S01().Construct();
    var halfEdgeHandle = 0;
    var flag = ($thisType._geometry.Geometry$DictHalfEdges$value.get_Count() >>> 0) > (0 >>> 0);
    if (flag) {
      halfEdgeHandle = ($thisType._geometry.Geometry$DictHalfEdges$value.get_Count() | 0);
    }

    for (var i = 0; i < ($IM00().Call(outlineVerts, null) | 0); i = ((i + 1) | 0)) {
      var currentVert = $IM01().Call(outlineVerts, null, i);
      halfEdgeHandle = ((halfEdgeHandle + 1) | 0);
      var flag2 = !currentVert.get_Value();
      if (flag2) {
        var vert = currentVert.get_Key().MemberwiseClone();
        vert.IncidentHalfEdge = halfEdgeHandle;
        $thisType._geometry.Geometry$DictVertices$value.Add(vert.Handle, vert.MemberwiseClone());
      }
      (halfEdge = halfEdge.MemberwiseClone(), 
        $T06().prototype._ctor.call(halfEdge, 
          halfEdgeHandle, 
          currentVert.get_Key().Handle, 
          0, 
          0, 
          0, 
          0
        ));
      halfEdgeHandle = ((halfEdgeHandle + 1) | 0);
      (twinHalfEdge = twinHalfEdge.MemberwiseClone(), 
        $T06().prototype._ctor.call(twinHalfEdge, 
          halfEdgeHandle, 
          ($IM01().Call(outlineVerts, null, ((((i + 1) | 0) % ($IM00().Call(outlineVerts, null) | 0)) | 0))).get_Key().Handle, 
          halfEdge.Handle, 
          0, 
          0, 
          1
        ));
      halfEdge.TwinHalfEdge = (twinHalfEdge.Handle | 0);
      var isOuter = polyBoundary.IsOuter;
      if (isOuter) {
        var flag3 = faceHandle === 0;
        if (flag3) {
          faceHandle = ($thisType.AddFace(halfEdge.Handle, /* ref */ face) | 0);
          $thisType._geometry.Geometry$DictFaces$value.Add(face.get().Handle, face.get().MemberwiseClone());
        }
      } else {
        var flag4 = i === 0;
        if (flag4) {
          var lastFace = $thisType._geometry.Geometry$DictFaces$value.get_Item($S02().CallStatic($T0F(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone();
          $S03().CallVirtual("Add", null, lastFace.InnerHalfEdges, halfEdge.Handle);
        }
        faceHandle = ($S04().CallStatic($T0F(), "Last$b1", [$asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face)], $thisType._geometry.Geometry$DictFaces$value).get_Value().Handle | 0);
      }
      halfEdge.IncidentFace = faceHandle;
      var flag5 = !($IM01().Call(outlineVerts, null, i)).get_Value();
      if (flag5) {
        var unboundFace = $thisType._geometry.Geometry$DictFaces$value.get_Item(1).MemberwiseClone();
        var flag6 = i === 0;
        if (flag6) {
          $S03().CallVirtual("Add", null, unboundFace.InnerHalfEdges, twinHalfEdge.Handle);
          $thisType._geometry.Geometry$DictFaces$value.set_Item(1, unboundFace.MemberwiseClone());
        }
      }
      var boundaryEdge2 = new ($T12())();
      boundaryEdge2.IsOriginOldVert = currentVert.get_Value();
      boundaryEdge2.HalfEdge = halfEdge.MemberwiseClone();
      boundaryEdge2.TwinHalfEdge = twinHalfEdge.MemberwiseClone();
      var boundaryEdge = boundaryEdge2;
      $S05().CallVirtual("Add", null, boundaryEdges, boundaryEdge.MemberwiseClone());
    }
    return boundaryEdges;
  }; 

  function GeomInitializeHelper_CreateHalfEdgesForBoundary (outline) {
    var $temp00;
    var existingHeHandle = new JSIL.BoxedVariable(0);
    var outlineVerts = $thisType.OutlineVertices(outline.MemberwiseClone());
    var boundaryEdges = $thisType.BoundaryEdges(outlineVerts, outline);
    $thisType.SetPrevAndNextForBoundary(boundaryEdges);
    var halfEdgesToUpdate = $S06().Construct();

    for (var i = (((boundaryEdges.get_Count() | 0) - 1) | 0); i > -1; i = ((i - 1) | 0)) {
      var bEdge = boundaryEdges.get_Item(i).MemberwiseClone();
      var flag = !bEdge.IsOriginOldVert;
      if (!flag) {
        var flag2 = !$thisType.IsEdgeExisting(bEdge.HalfEdge.MemberwiseClone(), boundaryEdges, /* ref */ existingHeHandle);
        if (!flag2) {
          var face = $thisType._geometry.GetFaceByHandle(bEdge.HalfEdge.IncidentFace).MemberwiseClone();
          var flag3 = (face.OuterHalfEdge | 0) === (bEdge.HalfEdge.Handle | 0);
          if (flag3) {
            face.OuterHalfEdge = (existingHeHandle.get() | 0);
            $thisType._geometry.ReplaceFace(face.MemberwiseClone());
          }
          var unboundedFace = $thisType._geometry.Geometry$DictFaces$value.get_Item(1);

        $loop1: 
          for (var j = 0; j < ((unboundedFace.InnerHalfEdges).get_Count() | 0); j = ((j + 1) | 0)) {
            var heHandle = ((unboundedFace.InnerHalfEdges).get_Item(j) | 0);
            var flag4 = heHandle !== (existingHeHandle.get() | 0);
            if (!flag4) {
              var nextHe = ($thisType._geometry.GetHalfEdgeByHandle(heHandle).NextHalfEdge | 0);
              (unboundedFace.InnerHalfEdges).set_Item(j, nextHe);
              $thisType._geometry.Geometry$DictFaces$value.set_Item(1, unboundedFace.MemberwiseClone());
              break $loop1;
            }
          }
          var existingHe = $thisType._geometry.GetHalfEdgeByHandle(existingHeHandle.get()).MemberwiseClone();
          existingHe.NextHalfEdge = (bEdge.HalfEdge.NextHalfEdge | 0);
          existingHe.PrevHalfEdge = (bEdge.HalfEdge.PrevHalfEdge | 0);
          existingHe.IncidentFace = (bEdge.HalfEdge.IncidentFace | 0);
          $S07().CallVirtual("Add", null, halfEdgesToUpdate, existingHe.MemberwiseClone());
          $thisType.SetPrevAndNextToExistingHalfEdge(bEdge, existingHeHandle.get(), boundaryEdges, halfEdgesToUpdate);
          boundaryEdges.RemoveAt(i);
        }
      }
    }
    var flag5 = (halfEdgesToUpdate.get_Count() | 0) === 0;
    if (flag5) {
      var result = boundaryEdges;
    } else {

      for (var a$0 = halfEdgesToUpdate._items, i$0 = 0, l$0 = (halfEdgesToUpdate._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var he = a$0[i$0];
        $thisType._geometry.ReplaceHalfEdge(he.MemberwiseClone());
      }
      result = boundaryEdges;
    }
    return result;
  }; 

  function GeomInitializeHelper_CreateHalfEdgesForGeometry (geometry, outlines) {
    $thisType._geometry = geometry;
    var unboundedFace = $S08().Construct(((((geometry.Geometry$DictHalfEdges$value).get_Count() | 0) + 1) | 0));
    (geometry.Geometry$DictFaces$value).Add(unboundedFace.Handle, unboundedFace.MemberwiseClone());
    var enumerator = $IM02().Call(outlines, null);
    try {

      while ($IM03().Call(enumerator, null)) {
        var o = $IM04().Call(enumerator, null).MemberwiseClone();
        var boundaryHalfEdges = $thisType.CreateHalfEdgesForBoundary(o.MemberwiseClone());
        var enumerator2 = $IM05().Call(boundaryHalfEdges, null);
        try {

          while ($IM03().Call(enumerator2, null)) {
            var be = $IM06().Call(enumerator2, null).MemberwiseClone();
            (geometry.Geometry$DictHalfEdges$value).Add(be.HalfEdge.Handle, be.HalfEdge.MemberwiseClone());
            (geometry.Geometry$DictHalfEdges$value).Add(be.TwinHalfEdge.Handle, be.TwinHalfEdge.MemberwiseClone());
          }
        } finally {
          if (enumerator2 !== null) {
            $IM07().Call(enumerator2, null);
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM07().Call(enumerator, null);
      }
    }
    geometry.SetHighestHandles();
  }; 

  function GeomInitializeHelper_CreateOrFindVertex (pointCoord, /* ref */ isOldVertex, handle) {
    var vert = new ($T0D())();
    var flag = ($thisType._geometry.Geometry$DictVertices$value.get_Count() >>> 0) > (0 >>> 0);
    if (flag) {
      var enumerator = $IM08().Call($thisType._geometry.GetAllVertices(), null);
      try {

        while ($IM03().Call(enumerator, null)) {
          var v = $IM09().Call(enumerator, null).MemberwiseClone();
          var flag2 = !pointCoord.Equals(v.VertData.Pos.MemberwiseClone());
          if (!flag2) {
            isOldVertex.set(true);
            var result = v;
            return result;
          }
        }
      } finally {
        if (enumerator !== null) {
          $IM07().Call(enumerator, null);
        }
      }
      (vert = vert.MemberwiseClone(), 
        $S09().Call($T0D().prototype, "_ctor", null, vert, handle, pointCoord.MemberwiseClone()));
    } else {
      (vert = vert.MemberwiseClone(), 
        $S09().Call($T0D().prototype, "_ctor", null, vert, handle, pointCoord.MemberwiseClone()));
    }
    isOldVertex.set(false);
    result = vert;
    return result;
  }; 

  function GeomInitializeHelper_IsEdgeExisting (halfEdge, boundaryEdges, /* ref */ existingHeHandle) {
    var $temp00;
    existingHeHandle.set(0);
    var newHeTargetVert = 0;
    var enumerator = $IM05().Call(boundaryEdges, null);
    try {

      while ($IM03().Call(enumerator, null)) {
        var be = $IM06().Call(enumerator, null);
        var flag = (be.HalfEdge.Handle | 0) === (halfEdge.NextHalfEdge | 0);
        if (flag) {
          newHeTargetVert = (be.HalfEdge.OriginVertex | 0);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM07().Call(enumerator, null);
      }
    }
    var flag2 = newHeTargetVert === 0;
    if (flag2) {
      throw $S0A().Construct("Target vertex not found!");
    }
    var heStartingAtOldV = $T0F().ToList$b1($T06())($thisType._geometry.GetVertexStartingHalfEdges(halfEdge.OriginVertex));

    for (var a$0 = heStartingAtOldV._items, i$0 = 0, l$0 = (heStartingAtOldV._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var heHandle = a$0[i$0];
      var he = heHandle.MemberwiseClone();
      var oldHeTargetVert = ($thisType._geometry.GetHalfEdgeByHandle(he.NextHalfEdge).OriginVertex | 0);
      var flag3 = oldHeTargetVert !== newHeTargetVert;
      if (!flag3) {
        existingHeHandle.set(heHandle.Handle);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function GeomInitializeHelper_OutlineVertices (polyBoundary) {
    var isOldVert = new JSIL.BoxedVariable(false);
    var outlineVerts = $S0B().Construct();
    var handle = 0;
    var flag = ($thisType._geometry.Geometry$DictVertices$value.get_Count() >>> 0) > (0 >>> 0);
    if (flag) {
      handle = ($thisType._geometry.Geometry$DictVertices$value.get_Count() | 0);
    }
    var enumerator = $IM0A().Call(polyBoundary.Points, null);
    try {

      while ($IM03().Call(enumerator, null)) {
        var coord = $IM0B().Call(enumerator, null).MemberwiseClone();
        handle = ((handle + 1) | 0);
        var vert = $thisType.CreateOrFindVertex(coord.MemberwiseClone(), /* ref */ isOldVert, handle).MemberwiseClone();
        $S0C().CallVirtual("Add", null, outlineVerts, new ($T0C())(vert.MemberwiseClone(), isOldVert.get()));
      }
    } finally {
      if (enumerator !== null) {
        $IM07().Call(enumerator, null);
      }
    }
    return outlineVerts;
  }; 

  function GeomInitializeHelper_SetPrevAndNextForBoundary (boundaryEdges) {

    for (var i = 0; i < ($IM0C().Call(boundaryEdges, null) | 0); i = ((i + 1) | 0)) {
      var bEdge = $IM0D().Call(boundaryEdges, null, i).MemberwiseClone();
      var halfEdge = bEdge.HalfEdge.MemberwiseClone();
      var twinHalfEdge = bEdge.TwinHalfEdge.MemberwiseClone();
      halfEdge.NextHalfEdge = ($IM0D().Call(boundaryEdges, null, ((((i + 1) | 0) % ($IM0C().Call(boundaryEdges, null) | 0)) | 0)).HalfEdge.Handle | 0);
      twinHalfEdge.PrevHalfEdge = ($IM0D().Call(boundaryEdges, null, ((((i + 1) | 0) % ($IM0C().Call(boundaryEdges, null) | 0)) | 0)).TwinHalfEdge.Handle | 0);
      var flag = ((i - 1) | 0) < 0;
      if (flag) {
        halfEdge.PrevHalfEdge = ($S0D().CallStatic($T0F(), "Last$b1", [$asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge], boundaryEdges).HalfEdge.Handle | 0);
        twinHalfEdge.NextHalfEdge = ($S0D().CallStatic($T0F(), "Last$b1", [$asm09.Fusee.Jometri.GeomInitializeHelper_BoundaryEdge], boundaryEdges).TwinHalfEdge.Handle | 0);
      } else {
        halfEdge.PrevHalfEdge = ($IM0D().Call(boundaryEdges, null, ((i - 1) | 0)).HalfEdge.Handle | 0);
        twinHalfEdge.NextHalfEdge = ($IM0D().Call(boundaryEdges, null, ((i - 1) | 0)).TwinHalfEdge.Handle | 0);
      }
      bEdge.HalfEdge = halfEdge.MemberwiseClone();
      bEdge.TwinHalfEdge = twinHalfEdge.MemberwiseClone();
      $IM0E().Call(boundaryEdges, null, i, bEdge.MemberwiseClone());
    }
  }; 

  function GeomInitializeHelper_SetPrevAndNextToExistingHalfEdge (bEdge, existingHeHandle, boundaryEdges, halfEdgesToUpdate) {
    var existingHe = $thisType._geometry.GetHalfEdgeByHandle(existingHeHandle).MemberwiseClone();
    var existingHeNext = $thisType._geometry.GetHalfEdgeByHandle(existingHe.NextHalfEdge).MemberwiseClone();
    var existingHePrev = $thisType._geometry.GetHalfEdgeByHandle(existingHe.PrevHalfEdge).MemberwiseClone();
    existingHe.NextHalfEdge = (bEdge.HalfEdge.NextHalfEdge | 0);
    existingHe.PrevHalfEdge = (bEdge.HalfEdge.PrevHalfEdge | 0);
    existingHe.IncidentFace = (bEdge.HalfEdge.IncidentFace | 0);

  $loop0: 
    for (var i = 0; i < ($IM0C().Call(boundaryEdges, null) | 0); i = ((i + 1) | 0)) {
      var count = 0;
      var be = $IM0D().Call(boundaryEdges, null, i).MemberwiseClone();
      var flag = (be.TwinHalfEdge.Handle | 0) === (bEdge.TwinHalfEdge.PrevHalfEdge | 0);
      if (flag) {
        var twinHalfEdge = be.TwinHalfEdge.MemberwiseClone();
        twinHalfEdge.NextHalfEdge = (existingHeNext.Handle | 0);
        var halfEdge = be.HalfEdge.MemberwiseClone();
        halfEdge.PrevHalfEdge = (existingHeHandle | 0);
        be.TwinHalfEdge = twinHalfEdge.MemberwiseClone();
        be.HalfEdge = halfEdge.MemberwiseClone();
        existingHeNext.PrevHalfEdge = (twinHalfEdge.Handle | 0);
        $IM0F().Call(halfEdgesToUpdate, null, existingHeNext.MemberwiseClone());
        $IM0E().Call(boundaryEdges, null, i, be.MemberwiseClone());
        count = ((count + 1) | 0);
      }
      var flag2 = (be.TwinHalfEdge.Handle | 0) === (bEdge.TwinHalfEdge.NextHalfEdge | 0);
      if (flag2) {
        var twinHalfEdge2 = be.TwinHalfEdge.MemberwiseClone();
        twinHalfEdge2.PrevHalfEdge = (existingHePrev.Handle | 0);
        var halfEdge2 = be.HalfEdge.MemberwiseClone();
        halfEdge2.NextHalfEdge = (existingHeHandle | 0);
        be.TwinHalfEdge = twinHalfEdge2.MemberwiseClone();
        be.HalfEdge = halfEdge2.MemberwiseClone();
        existingHePrev.NextHalfEdge = (twinHalfEdge2.Handle | 0);
        $IM0F().Call(halfEdgesToUpdate, null, existingHePrev.MemberwiseClone());
        $IM0E().Call(boundaryEdges, null, i, be.MemberwiseClone());
        count = ((count + 1) | 0);
      }
      var flag3 = count === 2;
      if (flag3) {
        break $loop0;
      }
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.GeomInitializeHelper", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "AddFace", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Fusee.Jometri.Face")])]), 
      GeomInitializeHelper_AddFace
    );

    $.Method({Static:true , Public:false}, "BoundaryEdges", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")]), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("Fusee.Jometri.Vertex"), $.Boolean])]), $asm09.TypeRef("Fusee.Jometri.PolyBoundary")]), 
      GeomInitializeHelper_BoundaryEdges
    );

    $.Method({Static:true , Public:false}, "CreateHalfEdgesForBoundary", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")]), [$asm09.TypeRef("Fusee.Jometri.PolyBoundary")]), 
      GeomInitializeHelper_CreateHalfEdgesForBoundary
    );

    $.Method({Static:true , Public:false}, "CreateHalfEdgesForGeometry", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Geometry"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.PolyBoundary")])]), 
      GeomInitializeHelper_CreateHalfEdgesForGeometry
    );

    $.Method({Static:true , Public:false}, "CreateOrFindVertex", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Vertex"), [
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Int32
        ]), 
      GeomInitializeHelper_CreateOrFindVertex
    );

    $.Method({Static:true , Public:false}, "IsEdgeExisting", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.HalfEdge"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      GeomInitializeHelper_IsEdgeExisting
    );

    $.Method({Static:true , Public:false}, "OutlineVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.List`1", [$asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm09.TypeRef("Fusee.Jometri.Vertex"), $.Boolean])]), [$asm09.TypeRef("Fusee.Jometri.PolyBoundary")]), 
      GeomInitializeHelper_OutlineVertices
    );

    $.Method({Static:true , Public:false}, "SetPrevAndNextForBoundary", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")])), 
      GeomInitializeHelper_SetPrevAndNextForBoundary
    );

    $.Method({Static:true , Public:false}, "SetPrevAndNextToExistingHalfEdge", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge"), $.Int32, 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.GeomInitializeHelper+BoundaryEdge")]), $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])
        ]), 
      GeomInitializeHelper_SetPrevAndNextToExistingHalfEdge
    );

    $.Field({Static:true , Public:false}, "_geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Jometri.GeomInitializeHelper+BoundaryEdge */ 

(function BoundaryEdge$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "Fusee.Jometri.GeomInitializeHelper+BoundaryEdge", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "IsOriginOldVert", $.Boolean);

    $.Field({Static:false, Public:false}, "HalfEdge", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "TwinHalfEdge", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Extrude */ 

(function Extrude$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.Fusee.Jometri.GeomEditing)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.Fusee.Jometri.Extrude_$l$gc__DisplayClass3_0)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm09.Fusee.Jometri.HalfEdge, $asm0F.System.Boolean))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0F.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Face")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Geometry, null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.Face")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.Vertex")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.HalfEdge")])]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm09.Fusee.Jometri.HalfEdge]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face), null))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm09.Fusee.Jometri.Face]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge), null))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32)]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float3, [
        $asm0F.System.Single, $asm0F.System.Single, 
        $asm0F.System.Single
      ]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.Fusee.Jometri.Vertex, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge).GetEnumerator)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge).get_Current)) ();
  };


  function Extrude_CreateSidefaces (geometry) {
    var $temp00;
    var halfEdge = new ($T01())(), newFace = new ($T02())();
    var unboundedFace = geometry.GetFaceByHandle(1).MemberwiseClone();
    var frontLoopsStartHalfEdges = $T05().ToList$b1($T04())($T05().Take$b1($T04())(unboundedFace.InnerHalfEdges, ((((unboundedFace.InnerHalfEdges).get_Count() | 0) / 2) | 0)));
    var backLoopsStartHalfEdges = $T05().ToList$b1($T04())($T05().Skip$b1($T04())(unboundedFace.InnerHalfEdges, ((((unboundedFace.InnerHalfEdges).get_Count() | 0) / 2) | 0)));

    for (var i = 0; i < (frontLoopsStartHalfEdges.get_Count() | 0); i = ((i + 1) | 0)) {
      var frontEdgeLoop = $T05().ToList$b1($T01())(geometry.GetHalfEdgeLoop(frontLoopsStartHalfEdges.get_Item(i)));
      var backEdgeLoop = $T05().ToList$b1($T01())(geometry.GetHalfEdgeLoopReverse(backLoopsStartHalfEdges.get_Item(i)));
      var newHalfEdges = $S00().Construct();
      var newFaces = $S01().Construct();

      for (var j = 0; j < (frontEdgeLoop.get_Count() | 0); j = ((j + 1) | 0)) {
        var halfEdgeFront = frontEdgeLoop.get_Item(j).MemberwiseClone();
        var halfEdgeInBack = backEdgeLoop.get_Item(j).MemberwiseClone();
        var backOriginVert = (geometry.GetHalfEdgeByHandle(halfEdgeInBack.NextHalfEdge).OriginVertex | 0);
        var frontOriginVert = (geometry.GetHalfEdgeByHandle(halfEdgeFront.NextHalfEdge).OriginVertex | 0);
        (halfEdge = halfEdge.MemberwiseClone(), 
          $T01().prototype._ctor.call(halfEdge, geometry.CreateHalfEdgeHandleId()));
        halfEdge.OriginVertex = backOriginVert;
        halfEdge.NextHalfEdge = (halfEdgeFront.Handle | 0);
        halfEdge.PrevHalfEdge = (halfEdgeInBack.Handle | 0);
        var newFromBack = halfEdge.MemberwiseClone();
        (newFace = newFace.MemberwiseClone(), 
          $S02().Call($T02().prototype, "_ctor", null, newFace, geometry.CreateFaceHandleId(), newFromBack.Handle));
        $S03().CallVirtual("Add", null, newFaces, newFace.MemberwiseClone());
        (geometry.Geometry$DictFaces$value).Add(newFace.Handle, newFace.MemberwiseClone());
        newFromBack.IncidentFace = (newFace.Handle | 0);
        (halfEdge = halfEdge.MemberwiseClone(), 
          $T01().prototype._ctor.call(halfEdge, geometry.CreateHalfEdgeHandleId()));
        halfEdge.OriginVertex = frontOriginVert;
        halfEdge.NextHalfEdge = (halfEdgeInBack.Handle | 0);
        halfEdge.PrevHalfEdge = (halfEdgeFront.Handle | 0);
        halfEdge.IncidentFace = (newFace.Handle | 0);
        var newFromFront = halfEdge;
        halfEdgeFront.IncidentFace = (newFace.Handle | 0);
        halfEdgeFront.NextHalfEdge = (newFromFront.Handle | 0);
        halfEdgeFront.PrevHalfEdge = (newFromBack.Handle | 0);
        halfEdgeInBack.IncidentFace = (newFace.Handle | 0);
        halfEdgeInBack.NextHalfEdge = (newFromBack.Handle | 0);
        halfEdgeInBack.PrevHalfEdge = (newFromFront.Handle | 0);
        geometry.ReplaceHalfEdge(halfEdgeFront.MemberwiseClone());
        geometry.ReplaceHalfEdge(halfEdgeInBack.MemberwiseClone());
        $S04().CallVirtual("Add", null, newHalfEdges, newFromBack.MemberwiseClone());
        $S04().CallVirtual("Add", null, newHalfEdges, newFromFront.MemberwiseClone());
      }

      for (var k = 0; k < (newHalfEdges.get_Count() | 0); k = ((k + 1) | 0)) {
        var current = newHalfEdges.get_Item(k).MemberwiseClone();
        var flag = k === 0;
        if (flag) {
          current.TwinHalfEdge = ($S05().CallStatic($T05(), "Last$b1", [$asm09.Fusee.Jometri.HalfEdge], newHalfEdges).Handle | 0);
        } else {
          var flag2 = k === (((newHalfEdges.get_Count() | 0) - 1) | 0);
          if (flag2) {
            current.TwinHalfEdge = (newHalfEdges.get_Item(0).Handle | 0);
          } else {
            var flag3 = (((k % 2) | 0) !== 0) && 
            (k !== (((newHalfEdges.get_Count() | 0) - 1) | 0));
            if (flag3) {
              current.TwinHalfEdge = (newHalfEdges.get_Item(((k + 1) | 0)).Handle | 0);
            } else {
              var flag4 = (((k % 2) | 0) === 0) && 
              ((k >>> 0) > (0 >>> 0));
              if (flag4) {
                current.TwinHalfEdge = (newHalfEdges.get_Item(((k - 1) | 0)).Handle | 0);
              }
            }
          }
        }
        newHalfEdges.set_Item(k, current.MemberwiseClone());
        (geometry.Geometry$DictHalfEdges$value).Add(current.Handle, current.MemberwiseClone());
      }

      for (var a$0 = newFaces._items, i$0 = 0, l$0 = (newFaces._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var face = a$0[i$0];
        geometry.SetFaceNormal(
          $T05().ToList$b1($T0C())(geometry.GetFaceOuterVertices(face.Handle)), 
          (geometry.Geometry$DictFaces$value).get_Item(face.Handle)
        );
      }
    }
    (geometry.Geometry$DictFaces$value).Remove(unboundedFace.Handle);
  }; 

  function Extrude_CreateTopSurface (geometry, zOffset, exturdeAlongNormal) {
    var backface = geometry.CloneGeometry();
    var flag = !exturdeAlongNormal;
    if (flag) {
      $thisType.UpdateVertexZCoord(backface, zOffset);
    } else {
      var unbounded = $T05().ToList$b1($T0C())(backface.GetFaceVertices(1));
      var normal = $T10().CalculateFaceNormal(unbounded).MemberwiseClone();
      $thisType.UpdateVertexZCoord(backface, unbounded, normal.MemberwiseClone(), zOffset);
    }
    $thisType.Join2DGeometries(geometry, backface);
  }; 

  function Extrude_Extrude2DPolygon (geometry, offset, extrudeAlongNormal) {
    $thisType.CreateTopSurface(geometry, offset, extrudeAlongNormal);
    $thisType.CreateSidefaces(geometry);
    var expr_16 = $S06().Construct();
    expr_16.Geometry$DictFaces$value = $S07().Construct(geometry.Geometry$DictFaces$value);
    expr_16.Geometry$DictVertices$value = $S08().Construct(geometry.Geometry$DictVertices$value);
    expr_16.Geometry$DictHalfEdges$value = $S09().Construct(geometry.Geometry$DictHalfEdges$value);
    expr_16.Geometry$HighestHalfEdgeHandle$value = (geometry.Geometry$HighestHalfEdgeHandle$value | 0);
    expr_16.Geometry$HighestFaceHandle$value = (geometry.Geometry$HighestFaceHandle$value | 0);
    expr_16.Geometry$HighestVertHandle$value = (geometry.Geometry$HighestVertHandle$value | 0);
    return expr_16;
  }; 

  function Extrude_ExtrudeFace$00 (geometry, faceHandle, offset) {
    var face = geometry.GetFaceByHandle(faceHandle).MemberwiseClone();
    return $thisType.ExtrudeFaceByHandle(geometry, faceHandle, offset, face.FaceData.FaceNormal.MemberwiseClone());
  }; 

  function Extrude_ExtrudeFace$01 (geometry, faceHandle, offset, extrusionVector) {
    extrusionVector.Normalize();
    return $thisType.ExtrudeFaceByHandle(geometry, faceHandle, offset, extrusionVector.MemberwiseClone());
  }; 

  function Extrude_ExtrudeFaceByHandle (geometry, faceHandle, offset, extrusionVector) {
    var $temp00;
    var newVertex = new ($T0C())(), h4 = new ($T01())(), h2n = new ($T01())(), h5 = new ($T01())(), newFace = new ($T02())(), h8 = new ($T01())();
    var face = geometry.GetFaceByHandle(faceHandle).MemberwiseClone();
    var start = geometry.GetHalfEdgeByHandle(face.OuterHalfEdge).MemberwiseClone();
    var next = start.MemberwiseClone();
    var vertexIncHe = $S0A().Construct();
    var allFaceVertices = geometry.GetFaceVertices(faceHandle);
    var enumerator = $IM00().Call(allFaceVertices, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var vertex = $IM02().Call(enumerator, null).MemberwiseClone();
        vertexIncHe.Add(vertex.Handle, $T05().ToList$b1($T01())(geometry.GetVertexStartingHalfEdges(vertex.Handle)));
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    var allH2NEdges = $S00().Construct();

    do {
      var nextOriginV = geometry.GetVertexByHandle(next.OriginVertex).MemberwiseClone();
      (newVertex = newVertex.MemberwiseClone(), 
        $S0B().Call($T0C().prototype, "_ctor", null, newVertex, geometry.CreateVertHandleId(), nextOriginV.VertData.Pos.MemberwiseClone()));
      var twinEdge = geometry.GetHalfEdgeByHandle(next.TwinHalfEdge).MemberwiseClone();
      var prevEdge = geometry.GetHalfEdgeByHandle(next.PrevHalfEdge).MemberwiseClone();
      var prevTwinEdge = geometry.GetHalfEdgeByHandle(prevEdge.TwinHalfEdge).MemberwiseClone();
      nextOriginV.VertData.Pos = $T0F().op_Addition(nextOriginV.VertData.Pos.MemberwiseClone(), $S0C().CallStatic($T0F(), "op_Multiply", null, extrusionVector.MemberwiseClone(), offset));
      (h4 = h4.MemberwiseClone(), 
        $T01().prototype._ctor.call(h4, geometry.CreateHalfEdgeHandleId()));
      (h2n = h2n.MemberwiseClone(), 
        $T01().prototype._ctor.call(h2n, geometry.CreateHalfEdgeHandleId()));
      (h5 = h5.MemberwiseClone(), 
        $T01().prototype._ctor.call(h5, geometry.CreateHalfEdgeHandleId()));
      var currentList = vertexIncHe.get_Item(nextOriginV.Handle);

      for (var a$0 = currentList._items, i$0 = 0, l$0 = (currentList._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var halfEdge = a$0[i$0].MemberwiseClone();
        var flag = $T01().op_Equality(halfEdge, next);
        if (!flag) {
          var edge = $T17().UpdateHalfEdgeOrigin(halfEdge.MemberwiseClone(), newVertex.Handle);
          geometry.ReplaceHalfEdge(edge.MemberwiseClone());
        }
      }
      nextOriginV.IncidentHalfEdge = (next.Handle | 0);
      h4.OriginVertex = (nextOriginV.Handle | 0);
      h2n.OriginVertex = (newVertex.Handle | 0);
      h5.OriginVertex = (newVertex.Handle | 0);
      h4.TwinHalfEdge = (h2n.Handle | 0);
      h2n.TwinHalfEdge = (h4.Handle | 0);
      h4.NextHalfEdge = (h5.Handle | 0);
      h5.PrevHalfEdge = (h4.Handle | 0);
      h5.TwinHalfEdge = (next.TwinHalfEdge | 0);
      twinEdge.TwinHalfEdge = (h5.Handle | 0);
      prevTwinEdge.OriginVertex = (newVertex.Handle | 0);
      newVertex.IncidentHalfEdge = (h2n.Handle | 0);
      geometry.ReplaceHalfEdge(twinEdge.MemberwiseClone());
      geometry.ReplaceHalfEdge(prevTwinEdge.MemberwiseClone());
      geometry.ReplaceVertex(nextOriginV.MemberwiseClone());
      (geometry.Geometry$DictVertices$value).Add(newVertex.Handle, newVertex.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(h4.Handle, h4.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(h5.Handle, h5.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(h2n.Handle, h2n.MemberwiseClone());
      $S04().CallVirtual("Add", null, allH2NEdges, h2n.MemberwiseClone());
      next = geometry.GetHalfEdgeByHandle(next.NextHalfEdge).MemberwiseClone();
    } while ($T01().op_Inequality(start, next));
    start = geometry.GetHalfEdgeByHandle(face.OuterHalfEdge).MemberwiseClone();
    next = start.MemberwiseClone();

    do {
      var $closure0 = new ($T18())();
      (newFace = newFace.MemberwiseClone(), 
        $T02().prototype._ctor.call(newFace, geometry.CreateFaceHandleId()));
      $closure0.twinEdge = geometry.GetHalfEdgeByHandle(next.TwinHalfEdge).MemberwiseClone();
      var h6 = geometry.GetHalfEdgeByHandle($closure0.twinEdge.TwinHalfEdge).MemberwiseClone();
      var h7 = $S0D().CallStatic($T05(), "First$b1", [$asm09.Fusee.Jometri.HalfEdge], allH2NEdges, $T19().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Extrude_$l$gc__DisplayClass3_0, "$lExtrudeFaceByHandle$gb__0", $S0E(), false, false))).MemberwiseClone();
      (h8 = h8.MemberwiseClone(), 
        $T01().prototype._ctor.call(h8, geometry.CreateHalfEdgeHandleId()));
      var h9 = geometry.GetHalfEdgeByHandle(h6.PrevHalfEdge).MemberwiseClone();
      h6.IncidentFace = (newFace.Handle | 0);
      h7.IncidentFace = (newFace.Handle | 0);
      h8.IncidentFace = (newFace.Handle | 0);
      h9.IncidentFace = (newFace.Handle | 0);
      h6.NextHalfEdge = (h7.Handle | 0);
      h7.NextHalfEdge = (h8.Handle | 0);
      h8.NextHalfEdge = (h9.Handle | 0);
      h9.NextHalfEdge = (h6.Handle | 0);
      h6.PrevHalfEdge = (h9.Handle | 0);
      h7.PrevHalfEdge = (h6.Handle | 0);
      h8.PrevHalfEdge = (h7.Handle | 0);
      h9.PrevHalfEdge = (h8.Handle | 0);
      h8.TwinHalfEdge = (next.Handle | 0);
      h8.OriginVertex = (geometry.GetHalfEdgeByHandle(next.NextHalfEdge).OriginVertex | 0);
      next.TwinHalfEdge = (h8.Handle | 0);
      newFace.OuterHalfEdge = (h6.Handle | 0);
      geometry.ReplaceHalfEdge(h6.MemberwiseClone());
      geometry.ReplaceHalfEdge(h7.MemberwiseClone());
      geometry.ReplaceHalfEdge(h9.MemberwiseClone());
      geometry.ReplaceHalfEdge(next.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(h8.Handle, h8.MemberwiseClone());
      (geometry.Geometry$DictFaces$value).Add(newFace.Handle, newFace.MemberwiseClone());
      newFace.FaceData.FaceNormal = $T10().CalculateFaceNormal($T05().ToList$b1($T0C())(geometry.GetFaceVertices(newFace.Handle))).MemberwiseClone();
      geometry.ReplaceFace(newFace.MemberwiseClone());
      next = geometry.GetHalfEdgeByHandle(next.NextHalfEdge).MemberwiseClone();
    } while ($T01().op_Inequality(start, next));
    return geometry;
  }; 

  function Extrude_Join2DGeometries (first, second) {
    var $temp00, $temp01;
    var vert = new ($T0C())(), face = new ($T02())(), halfEdge = new ($T01())();
    var highestVertHandle = (first.Geometry$HighestVertHandle$value | 0);
    var highestHalfEdgeHandle = (first.Geometry$HighestHalfEdgeHandle$value | 0);
    var highestFaceHandle = (first.Geometry$HighestFaceHandle$value | 0);
    var vertDictHelper = $S0F().Construct();
    var enumerator = $T11().prototype.GetEnumerator.call(second.Geometry$DictVertices$value);

    while ($T1A().prototype.MoveNext.call(enumerator)) {
      var v = $T1A().prototype.get_Current.call(enumerator);
      (vert = vert.MemberwiseClone(), 
        $S0B().Call($T0C().prototype, "_ctor", null, vert, 
          (((v.get_Value().Handle | 0) + highestVertHandle) | 0), 
          v.get_Value().VertData.Pos.MemberwiseClone()
        ));
      vert.IncidentHalfEdge = (((v.get_Value().IncidentHalfEdge | 0) + highestHalfEdgeHandle) | 0);
      vertDictHelper.Add(vert.Handle, vert.MemberwiseClone());
    }
    (second.Geometry$DictVertices$value).Clear();
    second.Geometry$DictVertices$value = vertDictHelper;
    var faceDictHelper = $S10().Construct();
    var enumerator2 = $T08().prototype.GetEnumerator.call(second.Geometry$DictFaces$value);

    while ($T1C().prototype.MoveNext.call(enumerator2)) {
      var f = $T1C().prototype.get_Current.call(enumerator2).MemberwiseClone();
      (face = face.MemberwiseClone(), 
        $S11().Call($T02().prototype, "_ctor", null, face, 
          (((f.get_Value().Handle | 0) + highestFaceHandle) | 0), 
          f.get_Value().MemberwiseClone()
        ));
      var flag = (face.OuterHalfEdge >>> 0) > (0 >>> 0);
      if (flag) {
        var outerHeId = (((face.OuterHalfEdge | 0) + (first.Geometry$HighestHalfEdgeHandle$value | 0)) | 0);
        face.OuterHalfEdge = outerHeId;
      }

      for (var i = 0; i < ((face.InnerHalfEdges).get_Count() | 0); i = ((i + 1) | 0)) {
        var innerHe = ((face.InnerHalfEdges).get_Item(i) | 0);
        innerHe = ((innerHe + (first.Geometry$HighestHalfEdgeHandle$value | 0)) | 0);
        (face.InnerHalfEdges).set_Item(i, innerHe);
      }
      faceDictHelper.Add(face.Handle, face.MemberwiseClone());
    }
    (second.Geometry$DictFaces$value).Clear();
    second.Geometry$DictFaces$value = faceDictHelper;
    var heDictHelper = $S12().Construct();
    var enumerator3 = $T0B().prototype.GetEnumerator.call(second.Geometry$DictHalfEdges$value);

    while ($T1E().prototype.MoveNext.call(enumerator3)) {
      var he = $T1E().prototype.get_Current.call(enumerator3);
      (halfEdge = halfEdge.MemberwiseClone(), 
        $T01().prototype._ctor.call(halfEdge, 
          (((he.get_Value().Handle | 0) + highestHalfEdgeHandle) | 0), 
          he.get_Value()
        ));
      halfEdge.IncidentFace = (((halfEdge.IncidentFace | 0) + (first.Geometry$HighestFaceHandle$value | 0)) | 0);
      halfEdge.OriginVertex = (((halfEdge.OriginVertex | 0) + (first.Geometry$HighestVertHandle$value | 0)) | 0);
      halfEdge.NextHalfEdge = (((halfEdge.NextHalfEdge | 0) + highestHalfEdgeHandle) | 0);
      halfEdge.PrevHalfEdge = (((halfEdge.PrevHalfEdge | 0) + highestHalfEdgeHandle) | 0);
      var flag2 = (halfEdge.TwinHalfEdge >>> 0) > (0 >>> 0);
      if (flag2) {
        halfEdge.TwinHalfEdge = (((halfEdge.TwinHalfEdge | 0) + highestHalfEdgeHandle) | 0);
      }
      heDictHelper.Add(halfEdge.Handle, halfEdge.MemberwiseClone());
    }
    (second.Geometry$DictHalfEdges$value).Clear();
    second.Geometry$DictHalfEdges$value = heDictHelper;
    var hEdgesWChangedWinding = $T05().ToList$b1($T01())($T10().GetHalfEdgesWChangedWinding(second, second.GetAllHalfEdges()));
    var enumerator4 = $T11().prototype.GetEnumerator.call(second.Geometry$DictVertices$value);

    while ($T1A().prototype.MoveNext.call(enumerator4)) {
      var vert2 = $T1A().prototype.get_Current.call(enumerator4).MemberwiseClone();
      (first.Geometry$DictVertices$value).Add(
        vert2.get_Key(), 
        vert2.get_Value().MemberwiseClone()
      );
    }

    for (var a$0 = hEdgesWChangedWinding._items, i$0 = 0, l$0 = (hEdgesWChangedWinding._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var halfEdge2 = a$0[i$0].MemberwiseClone();
      (first.Geometry$DictHalfEdges$value).Add(halfEdge2.Handle, halfEdge2.MemberwiseClone());
    }
    var firstUnbounded = (first.Geometry$DictFaces$value).get_Item($S13().CallStatic($T05(), "Min", null, (first.Geometry$DictFaces$value).get_Keys())).MemberwiseClone();
    var secUnbounded = (second.Geometry$DictFaces$value).get_Item($S13().CallStatic($T05(), "Min", null, (second.Geometry$DictFaces$value).get_Keys())).MemberwiseClone();
    $T03().prototype.AddRange.call(firstUnbounded.InnerHalfEdges, secUnbounded.InnerHalfEdges);
    (second.Geometry$DictFaces$value).Remove(secUnbounded.Handle);
    var secUnboundedHalfEdges = $S00().Construct();
    var enumerator6 = $IM04().Call(first.GetAllHalfEdges(), null);
    try {

      while ($IM01().Call(enumerator6, null)) {
        var he2 = $IM05().Call(enumerator6, null).MemberwiseClone();
        var flag3 = (he2.IncidentFace | 0) === (secUnbounded.Handle | 0);
        if (flag3) {
          $S04().CallVirtual("Add", null, secUnboundedHalfEdges, he2.MemberwiseClone());
        }
      }
    } finally {
      if (enumerator6 !== null) {
        $IM03().Call(enumerator6, null);
      }
    }

    for (var a$1 = secUnboundedHalfEdges._items, i$1 = 0, l$1 = (secUnboundedHalfEdges._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var he3 = a$1[i$1];
      var halfEdge3 = he3.MemberwiseClone();
      halfEdge3.IncidentFace = (firstUnbounded.Handle | 0);
      (first.Geometry$DictHalfEdges$value).Remove(halfEdge3.Handle);
      (first.Geometry$DictHalfEdges$value).Add(halfEdge3.Handle, halfEdge3.MemberwiseClone());
    }
    var enumerator8 = $T08().prototype.GetEnumerator.call(second.Geometry$DictFaces$value);

    while ($T1C().prototype.MoveNext.call(enumerator8)) {
      var face2 = $T1C().prototype.get_Current.call(enumerator8).MemberwiseClone();
      (first.Geometry$DictFaces$value).Add(
        face2.get_Key(), 
        face2.get_Value().MemberwiseClone()
      );
      first.SetFaceNormal(
        $T05().ToList$b1($T0C())(first.GetFaceOuterVertices(face2.get_Key())), 
        (first.Geometry$DictFaces$value).get_Item(face2.get_Key())
      );
    }
    first.SetHighestHandles();
  }; 

  function Extrude_UpdateVertexZCoord$02 (geometry, zOffset) {
    var $temp00;

    for (var a$0 = $T05().ToList$b1($T04())((geometry.Geometry$DictVertices$value).get_Keys())._items, i$0 = 0, l$0 = ($T05().ToList$b1($T04())((geometry.Geometry$DictVertices$value).get_Keys())._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vertkey = a$0[i$0];
      var v = (geometry.Geometry$DictVertices$value).get_Item(vertkey).MemberwiseClone();
      v.VertData.Pos = $S14().Construct(v.VertData.Pos.x, v.VertData.Pos.y, (+v.VertData.Pos.z + +zOffset));
      (geometry.Geometry$DictVertices$value).set_Item(vertkey, v.MemberwiseClone());
    }
  }; 

  function Extrude_UpdateVertexZCoord$03 (backface, verts, normal, zOffset) {
    var vert = new ($T0C())();
    var enumerator = $IM00().Call(verts, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var v = $IM02().Call(enumerator, null).MemberwiseClone();
        var newPos = $T0F().op_Addition(v.VertData.Pos.MemberwiseClone(), $S0C().CallStatic($T0F(), "op_Multiply", null, normal.MemberwiseClone(), zOffset));
        (vert = vert.MemberwiseClone(), 
          $S15().Call($T0C().prototype, "_ctor", null, vert, v, newPos.MemberwiseClone()));
        (backface.Geometry$DictVertices$value).set_Item(vert.Handle, vert.MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.Extrude", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "CreateSidefaces", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Geometry")), 
      Extrude_CreateSidefaces
    );

    $.Method({Static:true , Public:false}, "CreateTopSurface", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Single, 
          $.Boolean
        ]), 
      Extrude_CreateTopSurface
    );

    $.Method({Static:true , Public:true }, "Extrude2DPolygon", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Single, 
          $.Boolean
        ]), 
      Extrude_Extrude2DPolygon
    );

    $.Method({Static:true , Public:true }, "ExtrudeFace", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Single
        ]), 
      Extrude_ExtrudeFace$00
    );

    $.Method({Static:true , Public:true }, "ExtrudeFace", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Single, $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      Extrude_ExtrudeFace$01
    );

    $.Method({Static:true , Public:false}, "ExtrudeFaceByHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Single, $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      Extrude_ExtrudeFaceByHandle
    );

    $.Method({Static:true , Public:false}, "Join2DGeometries", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Geometry")]), 
      Extrude_Join2DGeometries
    );

    $.Method({Static:true , Public:false}, "UpdateVertexZCoord", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Geometry"), $.Single]), 
      Extrude_UpdateVertexZCoord$02
    );

    $.Method({Static:true , Public:false}, "UpdateVertexZCoord", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $.Single
        ]), 
      Extrude_UpdateVertexZCoord$03
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Extrude+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };


  function $l$gc__DisplayClass3_0__ctor () {
  }; 

  function $l$gc__DisplayClass3_0_$lExtrudeFaceByHandle$gb__0 (n) {
    return ((n.OriginVertex | 0) === (this.twinEdge.OriginVertex | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Extrude+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass3_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lExtrudeFaceByHandle$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      $l$gc__DisplayClass3_0_$lExtrudeFaceByHandle$gb__0
    );

    $.Field({Static:false, Public:true }, "twinEdge", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.GeomEditing */ 

(function GeomEditing$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.Fusee.Jometri.FaceData)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, System.Array.Of($asm0F.System.Int32)))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [
        $asm09.Fusee.Jometri.Geometry, $asm09.Fusee.Jometri.Face, 
        $asm09.Fusee.Jometri.Vertex
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge)), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.HalfEdge, [$asm0F.System.Int32]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0F.System.Int32]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Vertex, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, System.Array.Of($asm0F.System.Int32)), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function GeomEditing_AssignFaceHandle (geometry, heHandle, newFace) {
    var $temp00;
    var oldFaceHandle = (geometry.GetHalfEdgeByHandle(heHandle).IncidentFace | 0);
    var currentHe = geometry.GetHalfEdgeByHandle(heHandle).MemberwiseClone();

    do {
      currentHe.IncidentFace = (newFace.Handle | 0);
      (geometry.Geometry$DictHalfEdges$value).set_Item(currentHe.Handle, currentHe.MemberwiseClone());
      currentHe = geometry.GetHalfEdgeByHandle(currentHe.NextHalfEdge).MemberwiseClone();
    } while ((currentHe.Handle | 0) !== (heHandle | 0));
    var oldFace = geometry.GetFaceByHandle(oldFaceHandle).MemberwiseClone();
    var flag = ((oldFace.InnerHalfEdges).get_Count() | 0) === 0;
    if (!flag) {
      var inner = $S00().Construct();
      $T06().prototype.AddRange.call(inner, oldFace.InnerHalfEdges);

      for (var a$0 = inner._items, i$0 = 0, l$0 = (inner._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var heh = a$0[i$0];
        var origin = (geometry.GetHalfEdgeByHandle(heh).OriginVertex | 0);
        var flag2 = !$S01().CallStatic($T07(), "IsPointInPolygon", null, geometry, newFace.MemberwiseClone(), geometry.GetVertexByHandle(origin).MemberwiseClone());
        if (!flag2) {
          (oldFace.InnerHalfEdges).Remove(heh);
          $S02().CallVirtual("Add", null, newFace.InnerHalfEdges, heh);
          var curHe = geometry.GetHalfEdgeByHandle(heh).MemberwiseClone();

          do {
            curHe.IncidentFace = (newFace.Handle | 0);
            (geometry.Geometry$DictHalfEdges$value).set_Item(curHe.Handle, curHe.MemberwiseClone());
            curHe = geometry.GetHalfEdgeByHandle(curHe.NextHalfEdge).MemberwiseClone();
          } while ((curHe.Handle | 0) !== heh);
        }
      }
    }
  }; 

  function GeomEditing_GetHoles (geometry, face) {
    var $temp00;
    var holes = $S03().Construct();

    for (var a$0 = face.InnerHalfEdges._items, i$0 = 0, l$0 = (face.InnerHalfEdges._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var he = a$0[i$0];
      holes.Add(he, $T09().ToList$b1($T03())(geometry.GetHalfEdgeLoop(he)));
    }
    return holes;
  }; 

  function GeomEditing_InsertDiagonal (geometry, p, q) {
    var newFace = new ($T02())();
    var pStartHe = new JSIL.BoxedVariable(new ($T03())());
    var qStartHe = new JSIL.BoxedVariable(new ($T03())());
    var face = geometry.GetFaceToInsertDiag(p, q, /* ref */ pStartHe, /* ref */ qStartHe).MemberwiseClone();
    var flag = $T07().IsVertexAdjacentToVertex(
      geometry, 
      p, 
      q, 
      pStartHe.get().MemberwiseClone(), 
      qStartHe.get().MemberwiseClone()
    );
    if (flag) {
      throw $S04().Construct("A diagonal can't be inserted between adjacent Vertices!");
    }
    var newFromP = $S05().Construct(geometry.CreateHalfEdgeHandleId());
    var newFromQ = $S05().Construct(geometry.CreateHalfEdgeHandleId());
    newFromP.OriginVertex = (p | 0);
    newFromP.NextHalfEdge = (qStartHe.get().Handle | 0);
    newFromP.PrevHalfEdge = (pStartHe.get().PrevHalfEdge | 0);
    newFromP.IncidentFace = (face.Handle | 0);
    newFromQ.OriginVertex = (q | 0);
    newFromQ.NextHalfEdge = (pStartHe.get().Handle | 0);
    newFromQ.PrevHalfEdge = (qStartHe.get().PrevHalfEdge | 0);
    newFromQ.IncidentFace = (face.Handle | 0);
    newFromP.TwinHalfEdge = (newFromQ.Handle | 0);
    newFromQ.TwinHalfEdge = (newFromP.Handle | 0);
    (geometry.Geometry$DictHalfEdges$value).Add(newFromP.Handle, newFromP.MemberwiseClone());
    (geometry.Geometry$DictHalfEdges$value).Add(newFromQ.Handle, newFromQ.MemberwiseClone());
    var prevHeP = geometry.GetHalfEdgeByHandle(pStartHe.get().PrevHalfEdge).MemberwiseClone();
    var prevHeQ = geometry.GetHalfEdgeByHandle(qStartHe.get().PrevHalfEdge).MemberwiseClone();
    var prevHePUpdate = (geometry.Geometry$DictHalfEdges$value).get_Item(prevHeP.Handle).MemberwiseClone();
    prevHePUpdate.NextHalfEdge = (newFromP.Handle | 0);
    (geometry.Geometry$DictHalfEdges$value).set_Item(prevHeP.Handle, prevHePUpdate.MemberwiseClone());
    var prevHeQUpdate = (geometry.Geometry$DictHalfEdges$value).get_Item(prevHeQ.Handle).MemberwiseClone();
    prevHeQUpdate.NextHalfEdge = (newFromQ.Handle | 0);
    (geometry.Geometry$DictHalfEdges$value).set_Item(prevHeQ.Handle, prevHeQUpdate.MemberwiseClone());
    var nextHePUpdate = (geometry.Geometry$DictHalfEdges$value).get_Item(pStartHe.get().Handle).MemberwiseClone();
    nextHePUpdate.PrevHalfEdge = (newFromQ.Handle | 0);
    (geometry.Geometry$DictHalfEdges$value).set_Item(pStartHe.get().Handle, nextHePUpdate.MemberwiseClone());
    var nextHeQUpdate = (geometry.Geometry$DictHalfEdges$value).get_Item(qStartHe.get().Handle).MemberwiseClone();
    nextHeQUpdate.PrevHalfEdge = (newFromP.Handle | 0);
    (geometry.Geometry$DictHalfEdges$value).set_Item(qStartHe.get().Handle, nextHeQUpdate.MemberwiseClone());
    var holes = $thisType.GetHoles(geometry, face);
    var flag2 = ((holes.get_Count() | 0) !== 0) && 
    $thisType.IsNewEdgeToHole(holes, p, q, face.MemberwiseClone());
    if (!flag2) {
      (newFace = newFace.MemberwiseClone(), 
        $S06().Call($T02().prototype, "_ctor", null, newFace, geometry.CreateFaceHandleId(), newFromQ.Handle));
      var newFaceData = newFace.FaceData.MemberwiseClone();
      newFaceData.FaceNormal = face.FaceData.FaceNormal.MemberwiseClone();
      newFace.FaceData = newFaceData.MemberwiseClone();
      (geometry.Geometry$DictFaces$value).Add(newFace.Handle, newFace.MemberwiseClone());
      $thisType.AssignFaceHandle(geometry, newFace.OuterHalfEdge, newFace.MemberwiseClone());
      var currentFace = face.MemberwiseClone();
      currentFace.OuterHalfEdge = (newFromP.Handle | 0);
      face = currentFace;
      (geometry.Geometry$DictFaces$value).set_Item(face.Handle, face.MemberwiseClone());
    }
  }; 

  function GeomEditing_InsertVertex (geometry, p, q, pos) {
    var adjacentVertices = $T09().ToList$b1($T0F())(geometry.GetVertexAdjacentVertices(p));

  $loop0: 
    for (var i = 0; i < (adjacentVertices.get_Count() | 0); i = ((i + 1) | 0)) {
      var flag = (adjacentVertices.get_Item(i).Handle | 0) === (q | 0);
      if (flag) {
        break $loop0;
      }
      var flag2 = i === (((adjacentVertices.get_Count() | 0) - 1) | 0);
      if (flag2) {
        throw $S04().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T11(), ["Vertices with Handle q=", $T01().$Box(q), " and p=", $T01().$Box(p), " are not adjacent!"])));
      }
    }
    var newVertex = $S07().Construct(geometry.CreateVertHandleId(), pos.MemberwiseClone());
    var newHalfEdge = $S05().Construct(geometry.CreateHalfEdgeHandleId());
    var newHalfEdge2 = $S05().Construct(geometry.CreateHalfEdgeHandleId());
    newHalfEdge.OriginVertex = (newVertex.Handle | 0);
    newHalfEdge2.OriginVertex = (newVertex.Handle | 0);
    newVertex.IncidentHalfEdge = (newHalfEdge2.Handle | 0);
    var vertexP = geometry.GetVertexByHandle(p).MemberwiseClone();
    var vertexQ = geometry.GetVertexByHandle(q).MemberwiseClone();
    var incomingEdges = geometry.GetVertexStartingHalfEdges(vertexP.Handle);
    var he = new ($T03())();
    var he2 = new ($T03())();
    var enumerator = $IM00().Call(incomingEdges, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var halfEdge = $IM02().Call(enumerator, null).MemberwiseClone();
        var twinEdge = geometry.GetHalfEdgeByHandle(halfEdge.TwinHalfEdge).MemberwiseClone();
        var flag3 = (twinEdge.OriginVertex | 0) !== (vertexQ.Handle | 0);
        if (!flag3) {
          he = halfEdge.MemberwiseClone();
          he2 = twinEdge.MemberwiseClone();
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    var next = geometry.GetHalfEdgeByHandle(he2.NextHalfEdge).MemberwiseClone();
    var next2 = geometry.GetHalfEdgeByHandle(he.NextHalfEdge).MemberwiseClone();
    he.TwinHalfEdge = (newHalfEdge.Handle | 0);
    newHalfEdge.TwinHalfEdge = (he.Handle | 0);
    newHalfEdge.NextHalfEdge = (he2.NextHalfEdge | 0);
    he2.NextHalfEdge = (newHalfEdge.Handle | 0);
    newHalfEdge.PrevHalfEdge = (he2.Handle | 0);
    next.PrevHalfEdge = (newHalfEdge.Handle | 0);
    he2.TwinHalfEdge = (newHalfEdge2.Handle | 0);
    newHalfEdge2.TwinHalfEdge = (he2.Handle | 0);
    newHalfEdge2.NextHalfEdge = (he.NextHalfEdge | 0);
    he.NextHalfEdge = (newHalfEdge2.Handle | 0);
    newHalfEdge2.PrevHalfEdge = (he.Handle | 0);
    next2.PrevHalfEdge = (newHalfEdge2.Handle | 0);
    newHalfEdge.IncidentFace = (he2.IncidentFace | 0);
    newHalfEdge2.IncidentFace = (he.IncidentFace | 0);
    geometry.ReplaceHalfEdge(he.MemberwiseClone());
    geometry.ReplaceHalfEdge(he2.MemberwiseClone());
    geometry.ReplaceHalfEdge(next.MemberwiseClone());
    geometry.ReplaceHalfEdge(next2.MemberwiseClone());
    (geometry.Geometry$DictVertices$value).Add(newVertex.Handle, newVertex.MemberwiseClone());
    (geometry.Geometry$DictHalfEdges$value).Add(newHalfEdge.Handle, newHalfEdge.MemberwiseClone());
    (geometry.Geometry$DictHalfEdges$value).Add(newHalfEdge2.Handle, newHalfEdge2.MemberwiseClone());
    return newVertex.Handle;
  }; 

  function GeomEditing_InsetFace (geometry, faceHandle, insetOffset) {
    var newVertex = new ($T0F())(), edge = new ($T03())(), edge2Twin = new ($T03())(), edge2 = new ($T03())(), edge3 = new ($T03())(), newFace = new ($T02())();
    var flag = +insetOffset >= 1;
    if (flag) {
      throw $S04().Construct("insetOffset can not be greate or equal to 1.");
    }
    var flag2 = +insetOffset <= 0;
    if (flag2) {
      throw $S04().Construct("insetOffset can not be smaller or equal to 0.");
    }
    var face = geometry.GetFaceByHandle(faceHandle).MemberwiseClone();
    var allFaceVertices = $T09().ToList$b1($T0F())(geometry.GetFaceVertices(faceHandle));
    var meanPos = $T07().GetVerticesMeanPos(allFaceVertices);
    var edgeStorage = $S08().Construct();
    var countEdges = 0;
    var start = geometry.GetHalfEdgeByHandle(face.OuterHalfEdge).MemberwiseClone();
    var next = start.MemberwiseClone();

    do {
      var nextEdge = (next.NextHalfEdge | 0);
      var currentVertex = geometry.GetVertexByHandle(next.OriginVertex).MemberwiseClone();
      var currentPos = currentVertex.VertData.Pos.MemberwiseClone();
      var newPos = $T0D().op_Addition($S09().CallStatic($T0D(), "op_Multiply", null, $T0D().op_Subtraction(currentPos.MemberwiseClone(), meanPos).MemberwiseClone(), insetOffset).MemberwiseClone(), meanPos);
      (newVertex = newVertex.MemberwiseClone(), 
        $S0A().Call($T0F().prototype, "_ctor", null, newVertex, geometry.CreateVertHandleId(), newPos.MemberwiseClone()));
      var nextNext = geometry.GetHalfEdgeByHandle(next.NextHalfEdge).MemberwiseClone();
      (edge = edge.MemberwiseClone(), 
        $T03().prototype._ctor.call(edge, geometry.CreateHalfEdgeHandleId()));
      (edge2Twin = edge2Twin.MemberwiseClone(), 
        $T03().prototype._ctor.call(edge2Twin, geometry.CreateHalfEdgeHandleId()));
      (edge2 = edge2.MemberwiseClone(), 
        $T03().prototype._ctor.call(edge2, geometry.CreateHalfEdgeHandleId()));
      (edge3 = edge3.MemberwiseClone(), 
        $T03().prototype._ctor.call(edge3, geometry.CreateHalfEdgeHandleId()));
      (newFace = newFace.MemberwiseClone(), 
        $T02().prototype._ctor.call(newFace, geometry.CreateFaceHandleId()));
      edgeStorage.Add(countEdges, JSIL.Array.New($T01(), [edge.Handle, edge2Twin.Handle, edge3.Handle, newVertex.Handle]));
      newVertex.IncidentHalfEdge = (edge3.Handle | 0);
      newFace.OuterHalfEdge = (edge.Handle | 0);
      edge.OriginVertex = (nextNext.OriginVertex | 0);
      edge3.OriginVertex = (newVertex.Handle | 0);
      edge2Twin.OriginVertex = (newVertex.Handle | 0);
      edge2.TwinHalfEdge = (edge2Twin.Handle | 0);
      edge2Twin.TwinHalfEdge = (edge2.Handle | 0);
      edge.NextHalfEdge = (edge2.Handle | 0);
      edge2.NextHalfEdge = (edge3.Handle | 0);
      edge3.NextHalfEdge = (next.Handle | 0);
      next.NextHalfEdge = (edge.Handle | 0);
      edge.PrevHalfEdge = (next.Handle | 0);
      edge2.PrevHalfEdge = (edge.Handle | 0);
      edge3.PrevHalfEdge = (edge2.Handle | 0);
      next.PrevHalfEdge = (edge3.Handle | 0);
      edge.IncidentFace = (newFace.Handle | 0);
      edge2.IncidentFace = (newFace.Handle | 0);
      edge3.IncidentFace = (newFace.Handle | 0);
      next.IncidentFace = (newFace.Handle | 0);
      edge2Twin.IncidentFace = (face.Handle | 0);
      newFace.FaceData.FaceNormal = face.FaceData.FaceNormal.MemberwiseClone();
      (geometry.Geometry$DictVertices$value).Add(newVertex.Handle, newVertex.MemberwiseClone());
      (geometry.Geometry$DictFaces$value).Add(newFace.Handle, newFace.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(edge.Handle, edge.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(edge2Twin.Handle, edge2Twin.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(edge2.Handle, edge2.MemberwiseClone());
      (geometry.Geometry$DictHalfEdges$value).Add(edge3.Handle, edge3.MemberwiseClone());
      geometry.ReplaceHalfEdge(next.MemberwiseClone());
      countEdges = ((countEdges + 1) | 0);
      next = geometry.GetHalfEdgeByHandle(nextEdge).MemberwiseClone();
    } while ($T03().op_Inequality(start, next));

    for (var i = 0; i < countEdges; i = ((i + 1) | 0)) {
      var prevFace = ((i - 1) | 0);
      var nextFace = ((i + 1) | 0);
      var faceData = edgeStorage.get_Item(i);
      var flag3 = i === 0;
      if (flag3) {
        prevFace = ((countEdges - 1) | 0);
      }
      var flag4 = i === ((countEdges - 1) | 0);
      if (flag4) {
        nextFace = 0;
        face.OuterHalfEdge = (faceData[1] | 0);
        geometry.ReplaceFace(face.MemberwiseClone());
      }
      var prevFaceData = edgeStorage.get_Item(prevFace);
      var nextFaceData = edgeStorage.get_Item(nextFace);
      var edge2Twin2 = geometry.GetHalfEdgeByHandle(faceData[1]).MemberwiseClone();
      var edge4 = geometry.GetHalfEdgeByHandle(faceData[2]).MemberwiseClone();
      var edge3Twin = geometry.GetHalfEdgeByHandle(prevFaceData[0]).MemberwiseClone();
      var edge5 = geometry.GetHalfEdgeByHandle(edge2Twin2.TwinHalfEdge).MemberwiseClone();
      edge2Twin2.PrevHalfEdge = (prevFaceData[1] | 0);
      edge2Twin2.NextHalfEdge = (nextFaceData[1] | 0);
      edge5.OriginVertex = (nextFaceData[3] | 0);
      edge3Twin.TwinHalfEdge = (edge4.Handle | 0);
      edge4.TwinHalfEdge = (edge3Twin.Handle | 0);
      geometry.ReplaceHalfEdge(edge2Twin2.MemberwiseClone());
      geometry.ReplaceHalfEdge(edge5.MemberwiseClone());
      geometry.ReplaceHalfEdge(edge3Twin.MemberwiseClone());
      geometry.ReplaceHalfEdge(edge4.MemberwiseClone());
    }
    return geometry;
  }; 

  function GeomEditing_IsNewEdgeToHole (holes, pHandle, qHandle, face) {
    var $temp00;
    var flag = (holes.get_Count() | 0) === 0;
    if (flag) {
      var result = false;
    } else {
      var enumerator = $T08().prototype.GetEnumerator.call(holes);

      while ($T1B().prototype.MoveNext.call(enumerator)) {
        var hole = $T1B().prototype.get_Current.call(enumerator).MemberwiseClone();

        for (var a$0 = hole.get_Value()._items, i$0 = 0, l$0 = (hole.get_Value()._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var heHandle = a$0[i$0];
          var flag2 = ((pHandle | 0) !== (heHandle.OriginVertex | 0)) && 
          ((qHandle | 0) !== (heHandle.OriginVertex | 0));
          if (!flag2) {
            (face.InnerHalfEdges).Remove(hole.get_Key());
            result = true;
            return result;
          }
        }
      }
      result = false;
    }
    return result;
  }; 

  function GeomEditing_UpdateHalfEdgeOrigin (edge, newVHandle) {
    edge.OriginVertex = (newVHandle | 0);
    return edge;
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.GeomEditing", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "AssignFaceHandle", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $asm09.TypeRef("Fusee.Jometri.Face")
        ]), 
      GeomEditing_AssignFaceHandle
    );

    $.Method({Static:true , Public:false}, "GetHoles", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])]), [$asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face")]), 
      GeomEditing_GetHoles
    );

    $.Method({Static:true , Public:true }, "InsertDiagonal", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Int32
        ]), 
      GeomEditing_InsertDiagonal
    );

    $.Method({Static:true , Public:true }, "InsertVertex", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Int32, $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      GeomEditing_InsertVertex
    );

    $.Method({Static:true , Public:true }, "InsetFace", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Single
        ]), 
      GeomEditing_InsetFace
    );

    $.Method({Static:true , Public:false}, "IsNewEdgeToHole", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])]), $.Int32, 
          $.Int32, $asm09.TypeRef("Fusee.Jometri.Face")
        ]), 
      GeomEditing_IsNewEdgeToHole
    );

    $.Method({Static:true , Public:false}, "UpdateHalfEdgeOrigin", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.HalfEdge"), [$asm09.TypeRef("Fusee.Jometri.HalfEdge"), $.Int32]), 
      GeomEditing_UpdateHalfEdgeOrigin
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Fusee.Jometri.NamespaceDoc", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.SubdivisionSurface */ 

(function SubdivisionSurface$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.Fusee.Jometri.GeomEditing)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Face, [$asm0F.System.Int32]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Vertex")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0F.System.Single, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Vertex, [$asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Face).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Face).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge).GetEnumerator)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge).get_Current)) ();
  };


  function SubdivisionSurface__ctor () {
  }; 

  function SubdivisionSurface_AddFaceVerticesAndNewFaces (geometry, newGeometry, allFaceVertices) {
    var faceVertex = new ($T02())(), h = new ($T03())(), h2 = new ($T03())();
    var allFaces = geometry.GetAllFaces();
    var enumerator = $IM00().Call(allFaces, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var face = $IM02().Call(enumerator, null).MemberwiseClone();
        (faceVertex = faceVertex.MemberwiseClone(), 
          $S00().Call($T02().prototype, "_ctor", null, faceVertex, 
            newGeometry.CreateVertHandleId(), 
            allFaceVertices.get_Item(face.Handle).VertData.Pos.MemberwiseClone()
          ));
        var startEdge = geometry.GetHalfEdgeByHandle(face.OuterHalfEdge);
        var nextEdge = startEdge.MemberwiseClone();
        var halfEdges2 = $S01().Construct();
        var halfEdges3 = $S01().Construct();
        (newGeometry.Geometry$DictVertices$value).Add(faceVertex.Handle, faceVertex.MemberwiseClone());
        var i = 0;

        do {
          (h = h.MemberwiseClone(), 
            $T03().prototype._ctor.call(h, newGeometry.CreateHalfEdgeHandleId()));
          (h2 = h2.MemberwiseClone(), 
            $T03().prototype._ctor.call(h2, newGeometry.CreateHalfEdgeHandleId()));
          var h3 = newGeometry.GetHalfEdgeByHandle(nextEdge.PrevHalfEdge).MemberwiseClone();
          var h4 = newGeometry.GetHalfEdgeByHandle(nextEdge.Handle).MemberwiseClone();
          var newFace = (
            (i === 0)
               ? face
               : $S02().Construct(newGeometry.CreateFaceHandleId()))
          .MemberwiseClone();
          nextEdge = geometry.GetHalfEdgeByHandle(nextEdge.NextHalfEdge).MemberwiseClone();
          h.NextHalfEdge = (h2.Handle | 0);
          h2.NextHalfEdge = (h3.Handle | 0);
          h3.NextHalfEdge = (h4.Handle | 0);
          h4.NextHalfEdge = (h.Handle | 0);
          h.PrevHalfEdge = (h4.Handle | 0);
          h2.PrevHalfEdge = (h.Handle | 0);
          h3.PrevHalfEdge = (h2.Handle | 0);
          h4.PrevHalfEdge = (h3.Handle | 0);
          h.OriginVertex = (nextEdge.OriginVertex | 0);
          h2.OriginVertex = (faceVertex.Handle | 0);
          h.IncidentFace = (newFace.Handle | 0);
          h2.IncidentFace = (newFace.Handle | 0);
          h3.IncidentFace = (newFace.Handle | 0);
          h4.IncidentFace = (newFace.Handle | 0);
          faceVertex.IncidentHalfEdge = (h2.Handle | 0);
          newFace.OuterHalfEdge = (h.Handle | 0);
          (newGeometry.Geometry$DictHalfEdges$value).Add(h.Handle, h.MemberwiseClone());
          (newGeometry.Geometry$DictHalfEdges$value).Add(h2.Handle, h2.MemberwiseClone());
          newGeometry.ReplaceHalfEdge(h3.MemberwiseClone());
          newGeometry.ReplaceHalfEdge(h4.MemberwiseClone());
          newGeometry.ReplaceVertex(faceVertex.MemberwiseClone());
          var flag = i === 0;
          if (flag) {
            newGeometry.ReplaceFace(newFace.MemberwiseClone());
          } else {
            (newGeometry.Geometry$DictFaces$value).Add(newFace.Handle, newFace.MemberwiseClone());
          }
          var expr_229 = $S03().Construct();
          $S04().CallVirtual("Add", null, expr_229, newGeometry.GetVertexByHandle(h.OriginVertex).MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_229, newGeometry.GetVertexByHandle(h2.OriginVertex).MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_229, newGeometry.GetVertexByHandle(h3.OriginVertex).MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_229, newGeometry.GetVertexByHandle(h4.OriginVertex).MemberwiseClone());
          var faceVertices = expr_229;
          newGeometry.SetFaceNormal(faceVertices, newFace);
          halfEdges2.Add(i, h2.MemberwiseClone());
          halfEdges3.Add(i, h.MemberwiseClone());
          var flag2 = i > 0;
          if (flag2) {
            var h1N = halfEdges3.get_Item(((i - 1) | 0)).MemberwiseClone();
            h1N.TwinHalfEdge = (halfEdges2.get_Item(i).Handle | 0);
            var h2N = halfEdges2.get_Item(i).MemberwiseClone();
            h2N.TwinHalfEdge = (h1N.Handle | 0);
            newGeometry.ReplaceHalfEdge(h1N.MemberwiseClone());
            newGeometry.ReplaceHalfEdge(h2N.MemberwiseClone());
          }
          i = ((i + 1) | 0);
          nextEdge = geometry.GetHalfEdgeByHandle(nextEdge.NextHalfEdge).MemberwiseClone();
        } while ($T03().op_Inequality(startEdge, nextEdge));
        var h2Firts = halfEdges2.get_Item(0).MemberwiseClone();
        var h1Last = halfEdges3.get_Item(((i - 1) | 0)).MemberwiseClone();
        h2Firts.TwinHalfEdge = (h1Last.Handle | 0);
        h1Last.TwinHalfEdge = (h2Firts.Handle | 0);
        newGeometry.ReplaceHalfEdge(h2Firts.MemberwiseClone());
        newGeometry.ReplaceHalfEdge(h1Last.MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  function SubdivisionSurface_CatmullClarkSubdivision (geometry) {
    var $temp00, $temp01;
    var newGeometry = geometry.CloneGeometry();
    var allFaceVertices = $thisType.GetFaceVertices(geometry);
    var allEdgeVertices = $thisType.GetEdgeVertices(geometry, allFaceVertices);
    var allVertices = $T0E().ToList$b1($T02())(newGeometry.GetAllVertices());

    for (var a$0 = allVertices._items, i$0 = 0, l$0 = (allVertices._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vertex = a$0[i$0].MemberwiseClone();
      var outgoingEdges = $T0E().ToList$b1($T03())(newGeometry.GetVertexStartingHalfEdges(vertex.Handle));
      var faceVertices = $S03().Construct();
      var edgeVertices = $S03().Construct();

      for (var a$1 = outgoingEdges._items, i$1 = 0, l$1 = (outgoingEdges._size | 0); i$1 < l$1; ($temp01 = i$1, 
          i$1 = ((i$1 + 1) | 0), 
          $temp01)) {
        var edge = a$1[i$1].MemberwiseClone();
        var twin = geometry.GetHalfEdgeByHandle(edge.TwinHalfEdge);
        var flag = allFaceVertices.ContainsKey(edge.IncidentFace);
        if (flag) {
          $S04().CallVirtual("Add", null, faceVertices, allFaceVertices.get_Item(edge.IncidentFace).MemberwiseClone());
        } else {
          $S04().CallVirtual("Add", null, faceVertices, allFaceVertices.get_Item(twin.IncidentFace).MemberwiseClone());
        }
        var flag2 = allEdgeVertices.ContainsKey(edge.Handle);
        if (flag2) {
          $S04().CallVirtual("Add", null, edgeVertices, allEdgeVertices.get_Item(edge.Handle).MemberwiseClone());
        } else {
          $S04().CallVirtual("Add", null, edgeVertices, allEdgeVertices.get_Item(twin.Handle).MemberwiseClone());
        }
      }
      var meanEdgeVertexPos = $T11().GetVerticesMeanPos(edgeVertices).MemberwiseClone();
      var meanFaceVertexPos = $T11().GetVerticesMeanPos(faceVertices).MemberwiseClone();
      var edgeCount = +(outgoingEdges.get_Count());
      var newVertexPos = $T10().op_Division($T10().op_Addition(
          $T10().op_Addition(meanFaceVertexPos.MemberwiseClone(), $S05().CallStatic($T10(), "op_Multiply", null, 2, meanEdgeVertexPos.MemberwiseClone())).MemberwiseClone(), 
          $S05().CallStatic($T10(), "op_Multiply", null, edgeCount - 3, vertex.VertData.Pos.MemberwiseClone())
        ).MemberwiseClone(), edgeCount);
      var vertex2 = $S06().Construct(vertex.Handle, newVertexPos.MemberwiseClone());
      vertex2.IncidentHalfEdge = (vertex.IncidentHalfEdge | 0);
      var newVertex = vertex2;
      newGeometry.ReplaceVertex(newVertex.MemberwiseClone());
    }
    var allEdges = geometry.GetAllHalfEdges();
    var doneHe = JSIL.Array.New($T09(), ((($S07().CallStatic($T0E(), "Count$b1", [$asm09.Fusee.Jometri.HalfEdge], allEdges) | 0) + 1) | 0));
    var enumerator3 = $IM04().Call(allEdges, null);
    try {

      while ($IM01().Call(enumerator3, null)) {
        var edge2 = $IM05().Call(enumerator3, null).MemberwiseClone();
        var flag3 = (doneHe[edge2.Handle] | 0) === (edge2.TwinHalfEdge | 0);
        if (!flag3) {
          var vertexOld = (edge2.OriginVertex | 0);
          var twinEdge = geometry.GetHalfEdgeByHandle(edge2.TwinHalfEdge);
          var vertexOld2 = (twinEdge.OriginVertex | 0);
          var flag4 = allEdgeVertices.ContainsKey(edge2.Handle);
          if (flag4) {
            var edgeVertex = allEdgeVertices.get_Item(edge2.Handle).MemberwiseClone();
          } else {
            edgeVertex = allEdgeVertices.get_Item(twinEdge.Handle).MemberwiseClone();
          }
          $T16().InsertVertex(newGeometry, vertexOld, vertexOld2, edgeVertex.VertData.Pos.MemberwiseClone());
          doneHe[edge2.TwinHalfEdge] = (edge2.Handle | 0);
        }
      }
    } finally {
      if (enumerator3 !== null) {
        $IM03().Call(enumerator3, null);
      }
    }
    newGeometry.SetHighestHandles();
    geometry = newGeometry.CloneGeometry();
    $thisType.AddFaceVerticesAndNewFaces(geometry, newGeometry, allFaceVertices);
    return newGeometry;
  }; 

  function SubdivisionSurface_GetEdgeVertices (geometry, faceVertices) {
    var allEdges = geometry.GetAllHalfEdges();
    var doneHe = JSIL.Array.New($T09(), ((($S07().CallStatic($T0E(), "Count$b1", [$asm09.Fusee.Jometri.HalfEdge], allEdges) | 0) + 1) | 0));
    var allEdgeVertices = $S08().Construct();
    var enumerator = $IM04().Call(allEdges, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var edge = $IM05().Call(enumerator, null).MemberwiseClone();
        var flag = (doneHe[edge.Handle] | 0) === (edge.TwinHalfEdge | 0);
        if (!flag) {
          var face = (edge.IncidentFace | 0);
          var twin = geometry.GetHalfEdgeByHandle(edge.TwinHalfEdge).MemberwiseClone();
          var face2 = (twin.IncidentFace | 0);
          var vertex = geometry.GetVertexByHandle(edge.OriginVertex).MemberwiseClone();
          var vertex2 = geometry.GetVertexByHandle(twin.OriginVertex).MemberwiseClone();
          var cVertex = faceVertices.get_Item(face).MemberwiseClone();
          var cVertex2 = faceVertices.get_Item(face2).MemberwiseClone();
          var expr_A7 = $S03().Construct();
          $S04().CallVirtual("Add", null, expr_A7, vertex.MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_A7, vertex2.MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_A7, cVertex.MemberwiseClone());
          $S04().CallVirtual("Add", null, expr_A7, cVertex2.MemberwiseClone());
          var temp = expr_A7;
          var vertex3 = $S06().Construct(edge.Handle, $T11().GetVerticesMeanPos(temp).MemberwiseClone());
          vertex3.IncidentHalfEdge = (edge.Handle | 0);
          var finalVertex = vertex3;
          allEdgeVertices.Add(edge.Handle, finalVertex.MemberwiseClone());
          doneHe[edge.TwinHalfEdge] = (edge.Handle | 0);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    return allEdgeVertices;
  }; 

  function SubdivisionSurface_GetFaceVertices (geometry) {
    var tempVertex = new ($T02())();
    var allFaces = geometry.GetAllFaces();
    var allFaceVertices = $S08().Construct();
    var enumerator = $IM00().Call(allFaces, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var face = $IM02().Call(enumerator, null).MemberwiseClone();
        var faceVertices = $T0E().ToList$b1($T02())(geometry.GetFaceVertices(face.Handle));
        (tempVertex = tempVertex.MemberwiseClone(), 
          $S00().Call($T02().prototype, "_ctor", null, tempVertex, face.Handle, $T11().GetVerticesMeanPos(faceVertices).MemberwiseClone()));
        allFaceVertices.Add(face.Handle, tempVertex.MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    return allFaceVertices;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.SubdivisionSurface", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubdivisionSurface__ctor
    );

    $.Method({Static:true , Public:false}, "AddFaceVerticesAndNewFaces", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Geometry"), 
          $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")])
        ]), 
      SubdivisionSurface_AddFaceVerticesAndNewFaces
    );

    $.Method({Static:true , Public:true }, "CatmullClarkSubdivision", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Geometry"), [$asm09.TypeRef("Fusee.Jometri.Geometry")]), 
      SubdivisionSurface_CatmullClarkSubdivision
    );

    $.Method({Static:true , Public:false}, "GetEdgeVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]), [$asm09.TypeRef("Fusee.Jometri.Geometry"), $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")])]), 
      SubdivisionSurface_GetEdgeVertices
    );

    $.Method({Static:true , Public:false}, "GetFaceVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]), [$asm09.TypeRef("Fusee.Jometri.Geometry")]), 
      SubdivisionSurface_GetFaceVertices
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.TangentSpaceCalulator */ 

(function TangentSpaceCalulator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.Fusee.Serialization.Mesh)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm0A.Fusee.Math.Core.float4))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Fusee.Math.Core.float4)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.UInt16))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Fusee.Math.Core.float2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm12.System.Diagnostics.Debug)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.Fusee.Math.Core.float4, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };


  function TangentSpaceCalulator_CalculateBiTangents (m) {
    var flag = m === null;
    if (flag) {
      $S00().Construct("Mesh cannot be empty!");
    }
    var flag2 = !(
      (m !== null)
         ? m.get_Normals()
         : null)
     || 
    ((m.get_Normals().length | 0) < 0);
    if (flag2) {
      $S00().Construct(JSIL.ConcatString("Can not calculate bitangents, empty normals in this mesh: ", m.Name));
    }
    var flag3 = (m.get_Tangents() === null) || 
    ((m.get_Tangents().length | 0) < 1);
    if (flag3) {
      $S00().Construct(JSIL.ConcatString("Can not calculate bitangents, empty tangent list in this mesh: ", m.Name));
    }
    var flag4 = (m.get_Tangents() !== null) && 
    (m.get_Normals() !== null) && 
    ((m.get_Normals().length | 0) !== (m.get_Tangents().length | 0));
    if (flag4) {
      $S00().Construct($T04().Format("Can not calculate bitangents, quantitiy of normals: {0} and quanitity of tangents: {1} differs.", JSIL.Array.New($T06(), [$T07().$Box(m.get_Normals().length), $T07().$Box(m.get_Tangents().length)])));
    }
    var bitangents = JSIL.Array.New($T08(), m.get_Tangents().length);

    for (var i = 0; i < (m.get_Tangents().length | 0); i = ((i + 1) | 0)) {
      bitangents[i] = $S01().CallStatic($T08(), "op_Multiply", null, 
        $T08().Cross(
          m.get_Normals()[i].MemberwiseClone(), 
          (m.get_Tangents()[i]).get_xyz().MemberwiseClone()
        ).MemberwiseClone(), 
        m.get_Tangents()[i].w
      );
    }
    return bitangents;
  }; 

  function TangentSpaceCalulator_CalculateTangents (m) {
    var sdir = new ($T08())(), tdir = new ($T08())();
    var flag = m === null;
    if (flag) {
      $S00().Construct("Mesh cannot be empty!");
    }
    var flag2 = (m.get_Normals() === null) || 
    ((m.get_Normals().length | 0) < 0);
    if (flag2) {
      $S00().Construct(JSIL.ConcatString("Can not calculate tangents, empty normals in this mesh: ", m.Name));
    }
    var flag3 = m.get_UVs() === null;
    if (flag3) {
      $S00().Construct("Can not calculate tangents, no uv map");
    }
    var tangentList = JSIL.Array.New($T09(), m.get_Vertices().length);
    var tan = JSIL.Array.New($T08(), Math.imul(m.get_Vertices().length, 2));
    var tan2 = JSIL.Array.New($T08(), (((tan.length | 0) + (m.get_Vertices().length | 0)) | 0));

    for (var i = 0; i < (((m.get_Triangles().length | 0) - 3) | 0); i = ((i + 1) | 0)) {
      var i2 = (m.get_Triangles()[i] | 0);
      var i3 = (m.get_Triangles()[((1 + i) | 0)] | 0);
      var i4 = (m.get_Triangles()[((2 + i) | 0)] | 0);
      var v = m.get_Vertices()[i2];
      var v2 = m.get_Vertices()[i3];
      var v3 = m.get_Vertices()[i4];
      var w = m.get_UVs()[i2];
      var w2 = m.get_UVs()[i3];
      var w3 = m.get_UVs()[i4];
      var x = +v2.x - +v.x;
      var x2 = +v3.x - +v.x;
      var y = +v2.y - +v.y;
      var y2 = +v3.y - +v.y;
      var z = +v2.z - +v.z;
      var z2 = +v3.z - +v.z;
      var s = +w2.x - +w.x;
      var s2 = +w3.x - +w.x;
      var t = +w2.y - +w.y;
      var t2 = +w3.y - +w.y;
      var r = +(
        ((Math.abs(((s * t2) - (s2 * t)))) < 1.401298E-45)
           ? 0
           : +((1 / ((s * t2) - (s2 * t)))))
      ;
      (sdir = sdir.MemberwiseClone(), 
        $T08().prototype._ctor.call(sdir, ((t2 * x) - (t * x2)) * r, ((t2 * y) - (t * y2)) * r, ((t2 * z) - (t * z2)) * r));
      (tdir = tdir.MemberwiseClone(), 
        $T08().prototype._ctor.call(tdir, ((s * x2) - (s2 * x)) * r, ((s * y2) - (s2 * y)) * r, ((s * z2) - (s2 * z)) * r));
      tan[i2] = $T08().op_Addition(tan[i2].MemberwiseClone(), sdir);
      tan[i3] = $T08().op_Addition(tan[i3].MemberwiseClone(), sdir);
      tan[i4] = $T08().op_Addition(tan[i4].MemberwiseClone(), sdir);
      tan2[i2] = $T08().op_Addition(tan2[i2].MemberwiseClone(), tdir);
      tan2[i3] = $T08().op_Addition(tan2[i3].MemberwiseClone(), tdir);
      tan2[i4] = $T08().op_Addition(tan2[i4].MemberwiseClone(), tdir);
    }

    for (var j = 0; j < (m.get_Vertices().length | 0); j = ((j + 1) | 0)) {
      $T0F().Assert(m.get_Normals() !== null, "m.Normals != null");
      var k = m.get_Normals()[j].MemberwiseClone();
      var t3 = tan[j].MemberwiseClone();
      var tangent = $T08().op_Subtraction(t3.MemberwiseClone(), $S01().CallStatic($T08(), "op_Multiply", null, k.MemberwiseClone(), $T08().Dot(k, t3)));
      tangent.Normalize();
      var wComponent = +(
        (+$T08().Dot($T08().Cross(k.MemberwiseClone(), t3.MemberwiseClone()), tan2[j]) < 0)
           ? -1
           : 1)
      ;
      tangentList[j] = $S02().Construct(tangent, wComponent);
    }
    return tangentList;
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.TangentSpaceCalulator", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CalculateBiTangents", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float3")]), [$asm0B.TypeRef("Fusee.Serialization.Mesh")]), 
      TangentSpaceCalulator_CalculateBiTangents
    );

    $.Method({Static:true , Public:true }, "CalculateTangents", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("Fusee.Math.Core.float4")]), [$asm0B.TypeRef("Fusee.Serialization.Mesh")]), 
      TangentSpaceCalulator_CalculateTangents
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.TriStatusEdge */ 

(function TriStatusEdge$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function TriStatusEdge__ctor (geometry, face, origin, target, eventPoint) {
    this._geometry = geometry;
    this._face = face.MemberwiseClone();
    this._origin = origin.MemberwiseClone();
    this._target = target.MemberwiseClone();
    this.SetKey(eventPoint.MemberwiseClone());
  }; 

  function TriStatusEdge_SetKey (eventPoint) {
    var targetPos = (this._geometry).Get2DVertPos(this._face.MemberwiseClone(), this._target.Handle).MemberwiseClone();
    var originPos = (this._geometry).Get2DVertPos(this._face.MemberwiseClone(), this._origin.Handle).MemberwiseClone();
    var y = +(this._geometry).Get2DVertPos(this._face.MemberwiseClone(), eventPoint.Handle).y;
    var i = +(((+targetPos.y - +originPos.y) / (+targetPos.x - +originPos.x)));
    var flag = ((targetPos.y === originPos.y)) || 
    ((targetPos.x === originPos.x));
    if (flag) {
      this.IntersectionPointX = +originPos.x;
    } else {
      var b = +originPos.y - (i * +originPos.x);
      this.IntersectionPointX = +(((y - b) / i));
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.TriStatusEdge", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      TriStatusEdge__ctor
    );

    $.Method({Static:false, Public:false}, "SetKey", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      TriStatusEdge_SetKey
    );

    $.Field({Static:false, Public:false}, "IntersectionPointX", $.Single);

    $.Field({Static:false, Public:false}, "HalfEdgeHandle", $.Int32);

    $.Field({Static:false, Public:false}, "HelperVertexHandle", $.Int32);

    $.Field({Static:false, Public:false}, "IsMergeVertex", $.Boolean);

    $.Field({Static:false, Public:false}, "_origin", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "_target", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_face", $asm09.TypeRef("Fusee.Jometri.Face"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.TriSweepLineStatus */ 

(function TriSweepLineStatus$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Node$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.TriStatusEdge))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.TriStatusEdge))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Jometri.TriStatusEdge)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge)))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge)))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.TriStatusEdge).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.TriStatusEdge).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge)).GetEnumerator)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Node$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge)).get_Current)) ();
  };


  function TriSweepLineStatus__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function TriSweepLineStatus_DeleteNode$00 (key) {
    if (this._globalRoot !== null) {
      this._globalRoot = $thisType.DeleteNode(this._globalRoot, key);
    }
  }; 

  function TriSweepLineStatus_DeleteNode$01 (root, key) {
    var flag = root === null;
    if (flag) {
      var result = null;
    } else {
      var flag2 = (JSIL.CompareValues(key, root.Node$b2$Key$value)) < 0;
      if (flag2) {
        root.LeftNode = $thisType.DeleteNode(root.LeftNode, key);
      } else {
        var flag3 = (JSIL.CompareValues(key, root.Node$b2$Key$value)) > 0;
        if (flag3) {
          root.RightNode = $thisType.DeleteNode(root.RightNode, key);
        } else {
          var flag4 = (root.LeftNode === null) && 
          (root.RightNode === null);
          if (flag4) {
            result = null;
            return result;
          }
          var flag5 = root.LeftNode === null;
          if (flag5) {
            root = root.RightNode;
            result = root;
            return result;
          }
          var flag6 = root.RightNode === null;
          if (flag6) {
            root = root.LeftNode;
            result = root;
            return result;
          }
          var temp = $T00().FindMin(root.RightNode);
          root.Node$b2$Value$value = temp.Node$b2$Value$value;
          root.Node$b2$Key$value = +temp.Node$b2$Key$value;
          root.RightNode = $thisType.DeleteNode(root.RightNode, temp.Node$b2$Key$value);
        }
      }
      result = root;
    }
    return result;
  }; 

  function TriSweepLineStatus_FindLargestSmallerThanInBalanced$02 (key) {
    var res = $thisType.FindLargestSmallerThanInBalanced(this._globalRoot, key);
    return res.Node$b2$Value$value;
  }; 

  function TriSweepLineStatus_FindLargestSmallerThanInBalanced$03 (root, key) {
    var res = root;

    while (root !== null) {
      var flag = ((JSIL.CompareValues(root.Node$b2$Key$value, key)) > 0) || 
      ((JSIL.CompareValues(root.Node$b2$Key$value, key)) === 0);
      if (flag) {
        root = root.LeftNode;
      } else {
        res = root;
        root = root.RightNode;
      }
    }
    return res;
  }; 

  function TriSweepLineStatus_FindNode$04 (key) {
    var res = $thisType.FindNode(this._globalRoot, key);
    return res.Node$b2$Value$value;
  }; 

  function TriSweepLineStatus_FindNode$05 (root, key) {
    var res = null;
    var flag = root.LeftNode !== null;
    if (flag) {
      res = $thisType.FindNode(root.LeftNode, key);
    }
    var flag2 = (JSIL.CompareValues(key, root.Node$b2$Key$value)) === 0;
    if (flag2) {
      var result = root;
    } else {
      var flag3 = (res === null) && 
      (root.RightNode !== null);
      if (flag3) {
        res = $thisType.FindNode(root.RightNode, key);
      }
      result = res;
    }
    return result;
  }; 

  function TriSweepLineStatus_FindStatusEdgeWithHandle (handle) {
    var enumerator = $IM00().Call($T00().prototype.PreorderTraverseTreeValues.call(this), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var i = $IM02().Call(enumerator, null);
        var flag = (i.HalfEdgeHandle | 0) === (handle | 0);
        if (flag) {
          var result = i;
          return result;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    result = null;
    return result;
  }; 

  function TriSweepLineStatus_InsertNode$06 (key, value) {
    if (this._globalRoot === null) {
      this._globalRoot = new ($T02())(key, value);
    } else {
      $thisType.InsertNode(this._globalRoot, key, value);
    }
  }; 

  function TriSweepLineStatus_InsertNode$07 (root, key, value) {
    var flag = root === null;
    if (flag) {
      root = new ($T02())(key, value);
    } else {
      var flag2 = (JSIL.CompareValues(key, root.Node$b2$Key$value)) <= 0;
      if (flag2) {
        root.LeftNode = $thisType.InsertNode(root.LeftNode, key, value);
      } else {
        var flag3 = (JSIL.CompareValues(key, root.Node$b2$Key$value)) > 0;
        if (flag3) {
          root.RightNode = $thisType.InsertNode(root.RightNode, key, value);
        }
      }
    }
    return root;
  }; 

  function TriSweepLineStatus_UpdateNodes (eventPoint) {
    var enumerator = $IM04().Call($T00().prototype.PreorderTraverseTreeNodes.call(this), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var node = $IM05().Call(enumerator, null);
        (node.Node$b2$Value$value).SetKey(eventPoint.MemberwiseClone());
        node.Node$b2$Key$value = +node.Node$b2$Value$value.IntersectionPointX;
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Fusee.Jometri.BinarySearchTree`2", [$asm0F.TypeRef("System.Single"), $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), 
      Name: "Fusee.Jometri.TriSweepLineStatus", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TriSweepLineStatus__ctor
    );

    $.Method({Static:false, Public:true }, "DeleteNode", 
      JSIL.MethodSignature.Action($.Single), 
      TriSweepLineStatus_DeleteNode$00
    );

    $.Method({Static:true , Public:false}, "DeleteNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), $.Single]), 
      TriSweepLineStatus_DeleteNode$01
    );

    $.Method({Static:false, Public:true }, "FindLargestSmallerThanInBalanced", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.TriStatusEdge"), [$.Single]), 
      TriSweepLineStatus_FindLargestSmallerThanInBalanced$02
    );

    $.Method({Static:true , Public:false}, "FindLargestSmallerThanInBalanced", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), $.Single]), 
      TriSweepLineStatus_FindLargestSmallerThanInBalanced$03
    );

    $.Method({Static:false, Public:true }, "FindNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.TriStatusEdge"), [$.Single]), 
      TriSweepLineStatus_FindNode$04
    );

    $.Method({Static:true , Public:false}, "FindNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), [$asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), $.Single]), 
      TriSweepLineStatus_FindNode$05
    );

    $.Method({Static:false, Public:false}, "FindStatusEdgeWithHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.TriStatusEdge"), [$.Int32]), 
      TriSweepLineStatus_FindStatusEdgeWithHandle
    );

    $.Method({Static:false, Public:true }, "InsertNode", 
      new JSIL.MethodSignature(null, [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), 
      TriSweepLineStatus_InsertNode$06
    );

    $.Method({Static:true , Public:false}, "InsertNode", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), [
          $asm09.TypeRef("Fusee.Jometri.Node`2", [$.Single, $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")]), $.Single, 
          $asm09.TypeRef("Fusee.Jometri.TriStatusEdge")
        ]), 
      TriSweepLineStatus_InsertNode$07
    );

    $.Method({Static:false, Public:false}, "UpdateNodes", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      TriSweepLineStatus_UpdateNodes
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Triangulation */ 

(function Triangulation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Triangulation_$lGetLeftChain$gd__4)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Jometri.Triangulation_$l$gc__DisplayClass20_0)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Comparison$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.Fusee.Jometri.TriStatusEdge)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.Fusee.Jometri.TriSweepLineStatus)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.Fusee.Jometri.GeomEditing)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.Fusee.Jometri.BinarySearchTree$b2.Of($asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.Collections.Generic.IDictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm09.Fusee.Jometri.VertexType)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType)))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType)))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm12.System.Collections.Generic.Stack$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Comparison`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm09.Fusee.Jometri.Vertex, $asm09.Fusee.Jometri.Vertex]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32)]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.Single")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm09.Fusee.Jometri.TriStatusEdge, [$asm0F.System.Single]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm09.Fusee.Jometri.TriStatusEdge, [$asm0F.System.Single]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Single, $asm09.Fusee.Jometri.TriStatusEdge]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Face), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.Face")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType), null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Vertex")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Collections.Generic.Stack$b1.Of($asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Face).Add)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0F.System.Collections.Generic.IDictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType).Add)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType)).GetEnumerator)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType)).get_Current)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.Vertex).GetEnumerator)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.Vertex).get_Current)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Vertex).get_Count)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex).get_Item)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm0F.System.Collections.Generic.IDictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.VertexType).get_Item)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex).RemoveAt)) ();
  };


  function Triangulation_GetLeftChain (sortedVerts, face) {
    var expr_07 = new ($T02())(-2);
    expr_07.$l$g3__sortedVerts = sortedVerts;
    expr_07.$l$g3__face = face.MemberwiseClone();
    return expr_07;
  }; 

  function Triangulation_GetNextVertex (face, faceHalfEdges, currentVert) {
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var he = $IM02().Call(enumerator, null).MemberwiseClone();
        var flag = (he.OriginVertex | 0) !== (currentVert.Handle | 0);
        if (!flag) {
          var nextHe = $thisType._geometry.GetHalfEdgeByHandle(he.NextHalfEdge).MemberwiseClone();
          return $thisType._geometry.GetVertexByHandle(nextHe.OriginVertex);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    throw $S00().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), ["Face ", $T0E().$Box(face.Handle), " has no half edge with vertex ", $T0E().$Box(currentVert.Handle), " as origin."])));
  }; 

  function Triangulation_GetPrevVertex (face, faceHalfEdges, currentVert) {
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var he = $IM02().Call(enumerator, null).MemberwiseClone();
        var flag = (he.OriginVertex | 0) !== (currentVert.Handle | 0);
        if (!flag) {
          var prevHe = $thisType._geometry.GetHalfEdgeByHandle(he.PrevHalfEdge).MemberwiseClone();
          return $thisType._geometry.GetVertexByHandle(prevHe.OriginVertex);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    throw $S00().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), ["Face ", $T0E().$Box(face.Handle), " has no half edge with vertex ", $T0E().$Box(currentVert.Handle), " as origin."])));
  }; 

  function Triangulation_GetSortedVertices (geometry, face, unsortedVerts) {
    var $closure0 = new ($T11())();
    $closure0.geometry = geometry;
    $closure0.face = face.MemberwiseClone();
    var sorted = $S01().Construct();
    $T12().prototype.AddRange.call(sorted, unsortedVerts);
    $S02().Call($T12().prototype, "Sort", null, sorted, $T13().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Triangulation_$l$gc__DisplayClass20_0, "$lGetSortedVertices$gb__0", $S03(), false, false)));
    return sorted;
  }; 

  function Triangulation_HandleEndVertex (vert, faceHalfEdges, newFaces) {
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

    $loop0: 
      while ($IM01().Call(enumerator, null)) {
        var heh = $IM02().Call(enumerator, null);
        var he = heh;
        var flag = (he.OriginVertex | 0) !== (vert.Handle | 0);
        if (!flag) {
          var eMinOne = $thisType._triSweepLineStatus.FindStatusEdgeWithHandle(he.PrevHalfEdge);
          var isMergeVertex = eMinOne.IsMergeVertex;
          if (isMergeVertex) {
            $T17().InsertDiagonal($thisType._geometry, vert.Handle, eMinOne.HelperVertexHandle);
            $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
          }
          $S05().CallVirtual("DeleteNode", null, $thisType._triSweepLineStatus, eMinOne.IntersectionPointX);
          break $loop0;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  function Triangulation_HandleMergeVertex (face, vert, faceHalfEdges, newFaces) {
    var he = new ($T07())();
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

    $loop0: 
      while ($IM01().Call(enumerator, null)) {
        var heh = $IM02().Call(enumerator, null);
        he = heh;
        var flag = (he.OriginVertex | 0) === (vert.Handle | 0);
        if (flag) {
          break $loop0;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    var eMinOne = $thisType._triSweepLineStatus.FindStatusEdgeWithHandle(he.PrevHalfEdge);
    var isMergeVertex = eMinOne.IsMergeVertex;
    if (isMergeVertex) {
      $T17().InsertDiagonal($thisType._geometry, vert.Handle, eMinOne.HelperVertexHandle);
      $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
    }
    $S05().CallVirtual("DeleteNode", null, $thisType._triSweepLineStatus, eMinOne.IntersectionPointX);
    $T1A().prototype.BalanceTree.call($thisType._triSweepLineStatus);
    var redXPos = +$thisType._geometry.Get2DVertPos(face.MemberwiseClone(), vert.Handle).x;
    var ej = $S06().CallVirtual("FindLargestSmallerThanInBalanced", null, $thisType._triSweepLineStatus, redXPos);
    var isMergeVertex2 = ej.IsMergeVertex;
    if (isMergeVertex2) {
      $T17().InsertDiagonal($thisType._geometry, vert.Handle, ej.HelperVertexHandle);
      $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
    }
    $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).HelperVertexHandle = (vert.Handle | 0);
    $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).IsMergeVertex = true;
  }; 

  function Triangulation_HandleRegularVertex (face, vert, faceHalfEdges, newFaces) {
    var flag = $thisType.IsPolygonRightOfVert($thisType._geometry, face.MemberwiseClone(), faceHalfEdges, vert.MemberwiseClone());
    if (flag) {
      var enumerator = $IM00().Call(faceHalfEdges, null);
      try {

      $loop0: 
        while ($IM01().Call(enumerator, null)) {
          var he = $IM02().Call(enumerator, null).MemberwiseClone();
          var flag2 = (he.OriginVertex | 0) !== (vert.Handle | 0);
          if (!flag2) {
            var eMinOne = $thisType._triSweepLineStatus.FindStatusEdgeWithHandle(he.PrevHalfEdge);
            var isMergeVertex = eMinOne.IsMergeVertex;
            if (isMergeVertex) {
              $T17().InsertDiagonal($thisType._geometry, vert.Handle, eMinOne.HelperVertexHandle);
              $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
            }
            $S05().CallVirtual("DeleteNode", null, $thisType._triSweepLineStatus, eMinOne.IntersectionPointX);
            var halfEdge = $thisType._geometry.GetHalfEdgeByHandle(vert.IncidentHalfEdge).MemberwiseClone();
            var origin = $thisType._geometry.GetVertexByHandle(halfEdge.OriginVertex);
            var targetH = ($thisType._geometry.GetHalfEdgeByHandle(he.NextHalfEdge).OriginVertex | 0);
            var target = $thisType._geometry.GetVertexByHandle(targetH);
            var ei = new ($T15())($thisType._geometry, face.MemberwiseClone(), origin.MemberwiseClone(), target.MemberwiseClone(), vert.MemberwiseClone());
            ei.HalfEdgeHandle = (he.Handle | 0);
            ei.HelperVertexHandle = (vert.Handle | 0);
            ei.IsMergeVertex = false;
            $S08().CallVirtual("InsertNode", null, $thisType._triSweepLineStatus, ei.IntersectionPointX, ei);
            break $loop0;
          }
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
    } else {
      $T1A().prototype.BalanceTree.call($thisType._triSweepLineStatus);
      var redXPos = +$thisType._geometry.Get2DVertPos(face.MemberwiseClone(), vert.Handle).x;
      var ej = $S06().CallVirtual("FindLargestSmallerThanInBalanced", null, $thisType._triSweepLineStatus, redXPos);
      var isMergeVertex2 = ej.IsMergeVertex;
      if (isMergeVertex2) {
        $T17().InsertDiagonal($thisType._geometry, vert.Handle, ej.HelperVertexHandle);
        $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
      }
      $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).HelperVertexHandle = (vert.Handle | 0);
      $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).IsMergeVertex = false;
    }
  }; 

  function Triangulation_HandleSplitVertex (face, vert, faceHalfEdges, newFaces) {
    $T1A().prototype.BalanceTree.call($thisType._triSweepLineStatus);
    var redXPos = +$thisType._geometry.Get2DVertPos(face.MemberwiseClone(), vert.Handle).x;
    var ej = $S06().CallVirtual("FindLargestSmallerThanInBalanced", null, $thisType._triSweepLineStatus, redXPos);
    $T17().InsertDiagonal($thisType._geometry, vert.Handle, ej.HelperVertexHandle);
    $IM04().Call(newFaces, null, $thisType._geometry.Geometry$DictFaces$value.get_Item($S04().CallStatic($T19(), "Max", null, $thisType._geometry.Geometry$DictFaces$value.get_Keys())).MemberwiseClone());
    $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).HelperVertexHandle = (vert.Handle | 0);
    $S07().CallVirtual("FindNode", null, $thisType._triSweepLineStatus, ej.IntersectionPointX).IsMergeVertex = false;
    var he = new ($T07())();
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

    $loop0: 
      while ($IM01().Call(enumerator, null)) {
        var halfEdge = $IM02().Call(enumerator, null);
        var flag = (halfEdge.OriginVertex | 0) !== (vert.Handle | 0);
        if (!flag) {
          he = halfEdge;
          break $loop0;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    var origin = $thisType._geometry.GetVertexByHandle(he.OriginVertex);
    var targetH = ($thisType._geometry.GetHalfEdgeByHandle(he.NextHalfEdge).OriginVertex | 0);
    var target = $thisType._geometry.GetVertexByHandle(targetH);
    var ei = new ($T15())($thisType._geometry, face.MemberwiseClone(), origin.MemberwiseClone(), target.MemberwiseClone(), vert.MemberwiseClone());
    ei.HalfEdgeHandle = (he.Handle | 0);
    ei.HelperVertexHandle = (vert.Handle | 0);
    ei.IsMergeVertex = false;
    $S08().CallVirtual("InsertNode", null, $thisType._triSweepLineStatus, ei.IntersectionPointX, ei);
  }; 

  function Triangulation_HandleStartVertex (face, vert, faceHalfEdges) {
    var enumerator = $IM00().Call(faceHalfEdges, null);
    try {

    $loop0: 
      while ($IM01().Call(enumerator, null)) {
        var halfEdge = $IM02().Call(enumerator, null);
        var he = halfEdge;
        var flag = (he.OriginVertex | 0) !== (vert.Handle | 0);
        if (!flag) {
          var origin = $thisType._geometry.GetVertexByHandle(he.OriginVertex);
          var targetH = ($thisType._geometry.GetHalfEdgeByHandle(he.NextHalfEdge).OriginVertex | 0);
          var target = $thisType._geometry.GetVertexByHandle(targetH);
          var ei = new ($T15())($thisType._geometry, face.MemberwiseClone(), origin.MemberwiseClone(), target.MemberwiseClone(), vert.MemberwiseClone());
          ei.HalfEdgeHandle = (he.Handle | 0);
          ei.HelperVertexHandle = (vert.Handle | 0);
          ei.IsMergeVertex = false;
          $S08().CallVirtual("InsertNode", null, $thisType._triSweepLineStatus, ei.IntersectionPointX, ei);
          break $loop0;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
  }; 

  function Triangulation_HasNoSplitOrMerge (face, vertTypes) {
    var $temp00;
    var vertType = new JSIL.BoxedVariable($asm09.Fusee.Jometri.VertexType.START_VERTEX);
    var verts = $T19().ToList$b1($T04())($thisType._geometry.GetFaceVertices(face.Handle));

    for (var a$0 = verts._items, i$0 = 0, l$0 = (verts._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vert = a$0[i$0].MemberwiseClone();
      $thisType.TestVertexType(vert.MemberwiseClone(), face.MemberwiseClone(), /* ref */ vertType);
      $IM05().Call(vertTypes, null, vert.Handle, vertType.get());
    }
    var enumerator2 = $IM06().Call(vertTypes, null);
    try {

      while ($IM01().Call(enumerator2, null)) {
        var vert2 = $IM07().Call(enumerator2, null).MemberwiseClone();
        var flag = (JSIL.ObjectEqualsInstance(vert2.get_Value(), $T1E().SPLIT_VERTEX, !false, $T0D().__Type__)) || 
        (JSIL.ObjectEqualsInstance(vert2.get_Value(), $T1E().MERGE_VERTEX, !false, $T0D().__Type__));
        if (flag) {
          var result = false;
          return result;
        }
      }
    } finally {
      if (enumerator2 !== null) {
        $IM03().Call(enumerator2, null);
      }
    }
    result = true;
    return result;
  }; 

  function Triangulation_IsLeftChain (leftChain, vert) {
    var enumerator = $IM08().Call(leftChain, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var v = $IM09().Call(enumerator, null);
        var flag = (v.Handle | 0) === (vert.Handle | 0);
        if (flag) {
          var result = true;
          return result;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    result = false;
    return result;
  }; 

  function Triangulation_IsMonotone (face, vertTypes) {
    var noSplitOrMerge = $thisType.HasNoSplitOrMerge(face.MemberwiseClone(), vertTypes);
    return (noSplitOrMerge && (((face.InnerHalfEdges).get_Count() | 0) === 0));
  }; 

  function Triangulation_IsOverVert (face, middle, neighbour) {
    var redMiddle = $thisType._geometry.Get2DVertPos(face.MemberwiseClone(), middle.Handle).MemberwiseClone();
    var redNeighbour = $thisType._geometry.Get2DVertPos(face.MemberwiseClone(), neighbour.Handle).MemberwiseClone();
    var flag = +redMiddle.y < +redNeighbour.y;
    if (flag) {
      var result = true;
    } else {
      var flag2 = ((redMiddle.y === redNeighbour.y)) && 
      (+redMiddle.x > +redNeighbour.x);
      result = flag2;
    }
    return result;
  }; 

  function Triangulation_IsPolygonRightOfVert (geometry, face, faceHalfEdges, vert) {
    var prevV = $thisType.GetPrevVertex(face.MemberwiseClone(), faceHalfEdges, vert.MemberwiseClone()).MemberwiseClone();
    var nextV = $thisType.GetNextVertex(face.MemberwiseClone(), faceHalfEdges, vert.MemberwiseClone()).MemberwiseClone();
    var redPrevPos = geometry.Get2DVertPos(face.MemberwiseClone(), prevV.Handle);
    var redNextPos = geometry.Get2DVertPos(face.MemberwiseClone(), nextV.Handle);
    return (+redPrevPos.y > +redNextPos.y);
  }; 

  function Triangulation_IsUnderVert (face, middle, neighbour) {
    var redMiddle = $thisType._geometry.Get2DVertPos(face.MemberwiseClone(), middle.Handle).MemberwiseClone();
    var redNeighbour = $thisType._geometry.Get2DVertPos(face.MemberwiseClone(), neighbour.Handle).MemberwiseClone();
    var flag = +redMiddle.y > +redNeighbour.y;
    if (flag) {
      var result = true;
    } else {
      var flag2 = ((redMiddle.y === redNeighbour.y)) && 
      (+redMiddle.x < +redNeighbour.x);
      result = flag2;
    }
    return result;
  }; 

  function Triangulation_MakeMonotone (face, vertTypes) {
    var vertices = $S09().Construct($thisType._geometry.GetFaceVertices(face.Handle));
    var sortedVertices = $thisType.GetSortedVertices($thisType._geometry, face.MemberwiseClone(), $T19().ToList$b1($T04())(vertices));
    var faceHalfEdges = $T19().ToList$b1($T07())($thisType._geometry.GetFaceHalfEdges(face.Handle));
    var newFaces = $S0A().Construct();
    $thisType._triSweepLineStatus = new ($T16())();

    while (($IM0A().Call(sortedVertices, null) >>> 0) > (0 >>> 0)) {
      var current = $IM0B().Call(sortedVertices, null, 0).MemberwiseClone();
      $thisType._triSweepLineStatus.UpdateNodes(current.MemberwiseClone());
      switch (($IM0C().Call(vertTypes, null, current.Handle)).valueOf()) {
        case 0: 
          $thisType.HandleStartVertex(face.MemberwiseClone(), current.MemberwiseClone(), faceHalfEdges);
          break;

        case 1: 
          $thisType.HandleEndVertex(current.MemberwiseClone(), faceHalfEdges, newFaces);
          break;

        case 2: 
          $thisType.HandleSplitVertex(face.MemberwiseClone(), current.MemberwiseClone(), faceHalfEdges, newFaces);
          break;

        case 3: 
          $thisType.HandleMergeVertex(face.MemberwiseClone(), current.MemberwiseClone(), faceHalfEdges, newFaces);
          break;

        case 4: 
          $thisType.HandleRegularVertex(face.MemberwiseClone(), current.MemberwiseClone(), faceHalfEdges, newFaces);
          break;

        default: 
          throw $S0B().Construct();

      }
      $IM0D().Call(sortedVertices, null, 0);
    }
  }; 

  function Triangulation_TestVertexType (vert, face, /* ref */ vertType) {
    var $temp00;
    var heStartingAtFace = $T19().ToList$b1($T07())($thisType._geometry.GetVertexStartingHalfEdges(vert.Handle));
    var incidentHalfEdge = new ($T07())();

  $loop0: 
    for (var a$0 = heStartingAtFace._items, i$0 = 0, l$0 = (heStartingAtFace._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var he = a$0[i$0];
      var incidentFace = (he.IncidentFace | 0);
      var flag = !((incidentFace === face.Handle));
      if (!flag) {
        incidentHalfEdge = he;
        break $loop0;
      }
    }
    var nextHalfEdge = $thisType._geometry.GetHalfEdgeByHandle(incidentHalfEdge.NextHalfEdge).MemberwiseClone();
    var nextVert = $thisType._geometry.GetVertexByHandle(nextHalfEdge.OriginVertex).MemberwiseClone();
    var prevHalfEdge = $thisType._geometry.GetHalfEdgeByHandle(incidentHalfEdge.PrevHalfEdge).MemberwiseClone();
    var prevVert = $thisType._geometry.GetVertexByHandle(prevHalfEdge.OriginVertex).MemberwiseClone();
    var flag2 = $thisType.IsUnderVert(face.MemberwiseClone(), vert.MemberwiseClone(), nextVert.MemberwiseClone()) && 
    $thisType.IsUnderVert(face.MemberwiseClone(), vert.MemberwiseClone(), prevVert.MemberwiseClone());
    if (flag2) {
      var flag3 = $T2A().IsAngleGreaterPi(
        $thisType._geometry, 
        face.MemberwiseClone(), 
        nextVert.MemberwiseClone(), 
        vert.MemberwiseClone(), 
        prevVert.MemberwiseClone()
      );
      if (flag3) {
        vertType.set($T1E().SPLIT_VERTEX);
      } else {
        vertType.set($T1E().START_VERTEX);
      }
    } else {
      var flag4 = $thisType.IsOverVert(face.MemberwiseClone(), vert.MemberwiseClone(), nextVert.MemberwiseClone()) && 
      $thisType.IsOverVert(face.MemberwiseClone(), vert.MemberwiseClone(), prevVert.MemberwiseClone());
      if (flag4) {
        var flag5 = $T2A().IsAngleGreaterPi(
          $thisType._geometry, 
          face.MemberwiseClone(), 
          nextVert.MemberwiseClone(), 
          vert.MemberwiseClone(), 
          prevVert.MemberwiseClone()
        );
        if (flag5) {
          vertType.set($T1E().MERGE_VERTEX);
        } else {
          vertType.set($T1E().END_VERTEX);
        }
      } else {
        vertType.set($T1E().REGULAR_VERTEX);
      }
    }
  }; 

  function Triangulation_Triangulate (geometry) {
    $thisType._geometry = geometry;
    var originalFaces = $S0C().Construct($thisType._geometry.Geometry$DictFaces$value);
    var enumerator = $T18().prototype.GetEnumerator.call(originalFaces);

    while ($T2B().prototype.MoveNext.call(enumerator)) {
      var face = $T2B().prototype.get_Current.call(enumerator).MemberwiseClone();
      var vertTypes = $S0D().Construct();
      var flag = (face.get_Value().OuterHalfEdge | 0) === 0;
      if (!flag) {
        var flag2 = !$thisType.IsMonotone(face.get_Value().MemberwiseClone(), vertTypes);
        if (flag2) {
          $thisType.MakeMonotone(face.get_Value().MemberwiseClone(), vertTypes);
        }
      }
    }
    var monotoneFaces = $S0C().Construct($thisType._geometry.Geometry$DictFaces$value);
    var enumerator2 = $T18().prototype.GetEnumerator.call(monotoneFaces);

    while ($T2B().prototype.MoveNext.call(enumerator2)) {
      var face2 = $T2B().prototype.get_Current.call(enumerator2).MemberwiseClone();
      var flag3 = (face2.get_Value().OuterHalfEdge | 0) === 0;
      if (!flag3) {
        $thisType.TriangulateMonotone(face2.get_Value().MemberwiseClone());
      }
    }
  }; 

  function Triangulation_TriangulateMonotone (face) {
    var faceVertices = $S01().Construct();
    var enumerator = $IM08().Call($thisType._geometry.GetFaceVertices(face.Handle), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var vHandle = $IM09().Call(enumerator, null).MemberwiseClone();
        $S0E().CallVirtual("Add", null, faceVertices, vHandle.MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    var flag = ((faceVertices.get_Count() === 3));
    if (!flag) {
      var sortedVerts = $thisType.GetSortedVertices($thisType._geometry, face.MemberwiseClone(), faceVertices);
      var vertStack = $S0F().Construct();
      var leftChain = $T19().ToList$b1($T04())($thisType.GetLeftChain(sortedVerts, face.MemberwiseClone()));
      $T2E().prototype.Push.call(vertStack, $IM0B().Call(sortedVerts, null, 0).MemberwiseClone());
      $T2E().prototype.Push.call(vertStack, $IM0B().Call(sortedVerts, null, 1).MemberwiseClone());

      for (var i = 2; i < ((($IM0A().Call(sortedVerts, null) | 0) - 1) | 0); i = ((i + 1) | 0)) {
        var current = $IM0B().Call(sortedVerts, null, i).MemberwiseClone();
        var flag2 = (!$thisType.IsLeftChain(leftChain, current) && 
          $thisType.IsLeftChain(leftChain, $T2E().prototype.Peek.call(vertStack))) || 
        ($thisType.IsLeftChain(leftChain, current) && 
          !$thisType.IsLeftChain(leftChain, $T2E().prototype.Peek.call(vertStack)));
        if (flag2) {

          while ((vertStack.get_Count() | 0) > 0) {
            var popped = $T2E().prototype.Pop.call(vertStack).MemberwiseClone();
            var flag3 = (vertStack.get_Count() | 0) > 0;
            if (flag3) {
              $T17().InsertDiagonal($thisType._geometry, current.Handle, popped.Handle);
            }
          }
          $T2E().prototype.Push.call(vertStack, $IM0B().Call(sortedVerts, null, ((i - 1) | 0)).MemberwiseClone());
          $T2E().prototype.Push.call(vertStack, current.MemberwiseClone());
        } else {
          var popped2 = $T2E().prototype.Pop.call(vertStack).MemberwiseClone();
          var flag4 = $thisType.IsLeftChain(leftChain, popped2);
          if (flag4) {
            var next = $IM0B().Call(sortedVerts, null, i).MemberwiseClone();
            var prev = $T2E().prototype.Peek.call(vertStack).MemberwiseClone();
          } else {
            next = $T2E().prototype.Peek.call(vertStack).MemberwiseClone();
            prev = $IM0B().Call(sortedVerts, null, i).MemberwiseClone();
          }

          while (((vertStack.get_Count() | 0) > 0) && !$T2A().IsAngleGreaterOrEqualPi(
              $thisType._geometry, 
              face.MemberwiseClone(), 
              next.MemberwiseClone(), 
              popped2.MemberwiseClone(), 
              prev.MemberwiseClone()
            )) {
            popped2 = $T2E().prototype.Pop.call(vertStack).MemberwiseClone();
            var flag5 = (vertStack.get_Count() | 0) > 0;
            if (flag5) {
              var flag6 = $thisType.IsLeftChain(leftChain, popped2);
              if (flag6) {
                next = $IM0B().Call(sortedVerts, null, i).MemberwiseClone();
                prev = $T2E().prototype.Peek.call(vertStack).MemberwiseClone();
              } else {
                next = $T2E().prototype.Peek.call(vertStack).MemberwiseClone();
                prev = $IM0B().Call(sortedVerts, null, i).MemberwiseClone();
              }
            }
            $T17().InsertDiagonal($thisType._geometry, current.Handle, popped2.Handle);
          }
          $T2E().prototype.Push.call(vertStack, popped2.MemberwiseClone());
          $T2E().prototype.Push.call(vertStack, current.MemberwiseClone());
        }
      }
      var count = (vertStack.get_Count() | 0);

      for (var j = 0; j < count; j = ((j + 1) | 0)) {
        var popped3 = $T2E().prototype.Pop.call(vertStack).MemberwiseClone();
        var flag7 = j === 0;
        if (!flag7) {
          var flag8 = j !== ((count - 1) | 0);
          if (flag8) {
            $T17().InsertDiagonal($thisType._geometry, $S10().CallStatic($T19(), "Last$b1", [$asm09.Fusee.Jometri.Vertex], sortedVerts).Handle, popped3.Handle);
          }
        }
      }
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.Triangulation", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "GetLeftChain", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), $asm09.TypeRef("Fusee.Jometri.Face")]), 
      Triangulation_GetLeftChain
    );

    $.Method({Static:true , Public:false}, "GetNextVertex", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Vertex"), [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      Triangulation_GetNextVertex
    );

    $.Method({Static:true , Public:false}, "GetPrevVertex", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Vertex"), [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      Triangulation_GetPrevVertex
    );

    $.Method({Static:true , Public:false}, "GetSortedVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])
        ]), 
      Triangulation_GetSortedVertices
    );

    $.Method({Static:true , Public:false}, "HandleEndVertex", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Vertex"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
          $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("Fusee.Jometri.Face")])
        ]), 
      Triangulation_HandleEndVertex
    );

    $.Method({Static:true , Public:false}, "HandleMergeVertex", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("Fusee.Jometri.Face")])
        ]), 
      Triangulation_HandleMergeVertex
    );

    $.Method({Static:true , Public:false}, "HandleRegularVertex", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("Fusee.Jometri.Face")])
        ]), 
      Triangulation_HandleRegularVertex
    );

    $.Method({Static:true , Public:false}, "HandleSplitVertex", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), $asm0F.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("Fusee.Jometri.Face")])
        ]), 
      Triangulation_HandleSplitVertex
    );

    $.Method({Static:true , Public:false}, "HandleStartVertex", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])
        ]), 
      Triangulation_HandleStartVertex
    );

    $.Method({Static:true , Public:false}, "HasNoSplitOrMerge", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.VertexType")])]), 
      Triangulation_HasNoSplitOrMerge
    );

    $.Method({Static:true , Public:false}, "IsLeftChain", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), $asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      Triangulation_IsLeftChain
    );

    $.Method({Static:true , Public:false}, "IsMonotone", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.VertexType")])]), 
      Triangulation_IsMonotone
    );

    $.Method({Static:true , Public:false}, "IsOverVert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      Triangulation_IsOverVert
    );

    $.Method({Static:true , Public:false}, "IsPolygonRightOfVert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      Triangulation_IsPolygonRightOfVert
    );

    $.Method({Static:true , Public:false}, "IsUnderVert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Face"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      Triangulation_IsUnderVert
    );

    $.Method({Static:true , Public:false}, "MakeMonotone", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.VertexType")])]), 
      Triangulation_MakeMonotone
    );

    $.Method({Static:true , Public:false}, "TestVertexType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("Fusee.Jometri.Vertex"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Fusee.Jometri.VertexType")])
        ]), 
      Triangulation_TestVertexType
    );

    $.Method({Static:true , Public:true }, "Triangulate", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Geometry")), 
      Triangulation_Triangulate
    );

    $.Method({Static:true , Public:false}, "TriangulateMonotone", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Face")), 
      Triangulation_TriangulateMonotone
    );

    $.Field({Static:true , Public:false}, "_geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:true , Public:false}, "_triSweepLineStatus", $asm09.TypeRef("Fusee.Jometri.TriSweepLineStatus"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Triangulation+<GetLeftChain>d__4 */ 

(function $lGetLeftChain$gd__4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Triangulation)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex).get_Item)) ();
  };


  function $lGetLeftChain$gd__4__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetLeftChain$gd__4_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      if (num !== 1) {
        return false;
      }
      this.$l$g1__state = -1;
      this.$lheHandle$g5__1 = (this.$lhalfEdge$g5__7.NextHalfEdge | 0);
      this.$lhalfEdge$g5__7 = new ($T02())();
      if (($T04()._geometry.GetHalfEdgeByHandle(this.$lheHandle$g5__1).OriginVertex | 0) === (this.$lendOfChain$g5__2.Handle | 0)) {
        return false;
      }
    } else {
      this.$l$g1__state = -1;
      this.$lheHandle$g5__1 = 0;
      this.$lendOfChain$g5__2 = $S00().CallStatic($T06(), "Last$b1", [$asm09.Fusee.Jometri.Vertex], this.sortedVerts).MemberwiseClone();
      this.$lstartingAtFirstV$g5__3 = $T06().ToList$b1($T02())($T04()._geometry.GetVertexStartingHalfEdges($IM00().Call(this.sortedVerts, null, 0).Handle));
      var flag = ((this.$lstartingAtFirstV$g5__3).get_Count() | 0) > 1;
      if (flag) {
        this.$l$gs__4 = $T09().prototype.GetEnumerator.call(this.$lstartingAtFirstV$g5__3);

        while ($T0A().prototype.MoveNext.call(this.$l$gs__4)) {
          this.$lheh$g5__5 = $T0A().prototype.get_Current.call(this.$l$gs__4).MemberwiseClone();
          this.$lhe$g5__6 = this.$lheh$g5__5.MemberwiseClone();
          if ((this.$lhe$g5__6.IncidentFace | 0) === (this.face.Handle | 0)) {
            this.$lheHandle$g5__1 = (this.$lheh$g5__5.Handle | 0);
          }
          this.$lhe$g5__6 = new ($T02())();
          this.$lheh$g5__5 = new ($T02())();
        }
        this.$l$gs__4 = new ($T0A())();
      } else {
        this.$lheHandle$g5__1 = ($IM00().Call(this.sortedVerts, null, 0).IncidentHalfEdge | 0);
      }
    }
    this.$lhalfEdge$g5__7 = $T04()._geometry.GetHalfEdgeByHandle(this.$lheHandle$g5__1).MemberwiseClone();
    this.$l$g2__current = $T04()._geometry.GetVertexByHandle(this.$lhalfEdge$g5__7.OriginVertex).MemberwiseClone();
    this.$l$g1__state = 1;
    return true;
  }; 

  function $lGetLeftChain$gd__4_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetLeftChain$gd__ = this;
    } else {
      $lGetLeftChain$gd__ = new $thisType(0);
    }
    $lGetLeftChain$gd__.sortedVerts = this.$l$g3__sortedVerts;
    $lGetLeftChain$gd__.face = this.$l$g3__face.MemberwiseClone();
    return $lGetLeftChain$gd__;
  }; 

  function $lGetLeftChain$gd__4_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetLeftChain$gd__4_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator();
  }; 

  function $lGetLeftChain$gd__4_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetLeftChain$gd__4_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  }; 

  function $lGetLeftChain$gd__4_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Triangulation+<GetLeftChain>d__4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetLeftChain$gd__4__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetLeftChain$gd__4_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Vertex$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      $lGetLeftChain$gd__4_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      $lGetLeftChain$gd__4_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetLeftChain$gd__4_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetLeftChain$gd__4_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetLeftChain$gd__4_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetLeftChain$gd__4_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "sortedVerts", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Field({Static:false, Public:true }, "$l$g3__sortedVerts", $asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Field({Static:false, Public:false}, "face", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:true }, "$l$g3__face", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$lheHandle$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lendOfChain$g5__2", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$lstartingAtFirstV$g5__3", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "$l$gs__4", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "$lheh$g5__5", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lhe$g5__6", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lhalfEdge$g5__7", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.Current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Triangulation+<>c__DisplayClass20_0 */ 

(function $l$gc__DisplayClass20_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };


  function $l$gc__DisplayClass20_0__ctor () {
  }; 

  function $l$gc__DisplayClass20_0_$lGetSortedVertices$gb__0 (a, b) {
    var redA = (this.geometry).Get2DVertPos(this.face.MemberwiseClone(), a.Handle).MemberwiseClone();
    var redB = (this.geometry).Get2DVertPos(this.face.MemberwiseClone(), b.Handle).MemberwiseClone();
    var ydiff = Math.imul(-1, (JSIL.CompareValues(redA.y, redB.y)));
    var flag = (ydiff >>> 0) > (0 >>> 0);
    if (flag) {
      var result = ydiff;
    } else {
      result = (JSIL.CompareValues(redA.x, redB.x));
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Triangulation+<>c__DisplayClass20_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass20_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lGetSortedVertices$gb__0", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("Fusee.Jometri.Vertex"), $asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      $l$gc__DisplayClass20_0_$lGetSortedVertices$gb__0
    );

    $.Field({Static:false, Public:true }, "geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:true }, "face", $asm09.TypeRef("Fusee.Jometri.Face"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry */ 

(function Geometry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm09.Fusee.Jometri.Face, $asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.PolyBoundary))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.Fusee.Jometri.GeomInitializeHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetAllFaces$gd__35)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetAllHalfEdges$gd__34)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetAllVertices$gd__33)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetFaceHalfEdges$gd__47)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetFaceOuterVertices$gd__46)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetFacesAdajacentToFace$gd__44)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_0)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Func$b2.Of($asm09.Fusee.Jometri.HalfEdge, $asm0F.System.Boolean))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetFaceVertices$gd__45)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetHalfEdgeLoop$gd__42)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetHalfEdgeLoopReverse$gd__43)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetVertexAdajacentFaces$gd__37)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetVertexAdjacentVertices$gd__36)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetVertexIncidentHalfEdges$gd__38)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetVertexStartingHalfEdges$gd__39)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$lGetVertexTargetingHalfEdges$gd__40)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm09.Fusee.Jometri.FaceData)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm09.Fusee.Jometri.Face, $asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3)), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0F.TypeRef("System.Int32")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.Fusee.Jometri.Geometry, null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.Vertex")])]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge), [$asm0F.TypeRef("System.Collections.Generic.IDictionary`2", [$asm0F.TypeRef("System.Int32"), $asm09.TypeRef("Fusee.Jometri.HalfEdge")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.System.Int32, $asm0F.System.Int32]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm0A.Fusee.Math.Core.float3), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.HalfEdge), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm09.Fusee.Jometri.HalfEdge]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm09.Fusee.Jometri.HalfEdge]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0F.System.Single, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [
        $asm09.Fusee.Jometri.Geometry, $asm09.Fusee.Jometri.Face, 
        $asm0A.Fusee.Math.Core.float3
      ]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm0F.System.Int32)]))) ();
  };


  function Geometry__ctor$00 () {
    this._vertPos2DCache = $S00().Construct();
    this.Geometry$DictVertices$value = $S01().Construct();
    this.Geometry$DictHalfEdges$value = $S02().Construct();
    this.Geometry$DictFaces$value = $S03().Construct();
  }; 

  function Geometry__ctor$01 (outlines) {
    var $temp00;
    this._vertPos2DCache = $S00().Construct();
    this.Geometry$DictVertices$value = $S01().Construct();
    this.Geometry$DictHalfEdges$value = $S02().Construct();
    this.Geometry$DictFaces$value = $S03().Construct();
    $T05().CreateHalfEdgesForGeometry(this, outlines);
    var keys = $S04().Construct((this.Geometry$DictFaces$value).get_Keys());

    for (var a$0 = keys._items, i$0 = 0, l$0 = (keys._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var key = a$0[i$0];
      if (key !== 1) {
        this.SetFaceNormal(
          $T09().ToList$b1($T08())(this.GetFaceOuterVertices(key)), 
          (this.Geometry$DictFaces$value).get_Item(key)
        );
      }
    }
  }; 

  function Geometry_CloneGeometry () {
    var face = new ($T0A())();
    var expr_06 = $S05().Construct();
    expr_06.Geometry$DictVertices$value = $S06().Construct(this.Geometry$DictVertices$value);
    expr_06.Geometry$DictHalfEdges$value = $S07().Construct(this.Geometry$DictHalfEdges$value);
    expr_06.Geometry$DictFaces$value = $S03().Construct();
    var clone = expr_06;
    var enumerator = $T03().prototype.GetEnumerator.call(this.Geometry$DictFaces$value);

    while ($T0B().prototype.MoveNext.call(enumerator)) {
      var f = $T0B().prototype.get_Current.call(enumerator);
      var oldFace = f.get_Value().MemberwiseClone();
      (face = face.MemberwiseClone(), 
        $S08().Call($T0A().prototype, "_ctor", null, face, oldFace.Handle, oldFace.OuterHalfEdge));
      $T06().prototype.AddRange.call(face.InnerHalfEdges, oldFace.InnerHalfEdges);
      face.FaceData.FaceNormal = oldFace.FaceData.FaceNormal.MemberwiseClone();
      (clone.Geometry$DictFaces$value).Add(face.Handle, face.MemberwiseClone());
    }
    clone.SetHighestHandles();
    return clone;
  }; 

  function Geometry_CreateFaceHandleId () {
    var flag = (this.Geometry$HighestFaceHandle$value | 0) === 0;
    if (flag) {
      this.Geometry$HighestFaceHandle$value = 1;
    }
    var newId = (((this.Geometry$HighestFaceHandle$value | 0) + 1) | 0);
    this.Geometry$HighestFaceHandle$value = newId;
    return newId;
  }; 

  function Geometry_CreateHalfEdgeHandleId () {
    var newId = (((this.Geometry$HighestHalfEdgeHandle$value | 0) + 1) | 0);
    this.Geometry$HighestHalfEdgeHandle$value = newId;
    return newId;
  }; 

  function Geometry_CreateVertHandleId () {
    var newId = (((this.Geometry$HighestVertHandle$value | 0) + 1) | 0);
    this.Geometry$HighestVertHandle$value = newId;
    return newId;
  }; 

  function Geometry_get_DictFaces () {
    return this.Geometry$DictFaces$value;
  }; 

  function Geometry_get_DictHalfEdges () {
    return this.Geometry$DictHalfEdges$value;
  }; 

  function Geometry_get_DictVertices () {
    return this.Geometry$DictVertices$value;
  }; 

  function Geometry_get_HighestFaceHandle () {
    return this.Geometry$HighestFaceHandle$value;
  }; 

  function Geometry_get_HighestHalfEdgeHandle () {
    return this.Geometry$HighestHalfEdgeHandle$value;
  }; 

  function Geometry_get_HighestVertHandle () {
    return this.Geometry$HighestVertHandle$value;
  }; 

  function Geometry_Get2DVertPos (face, vertHandle) {
    var verts = new JSIL.BoxedVariable(null);
    var pos = new JSIL.BoxedVariable(new ($T0F())());
    var flag = (this._vertPos2DCache).TryGetValue(face.MemberwiseClone(), /* ref */ verts);
    if (flag) {
      var flag2 = (verts.get()).TryGetValue(vertHandle, /* ref */ pos);
      if (flag2) {
        var result = pos.get().MemberwiseClone();
      } else {
        var vertex = this.GetVertexByHandle(vertHandle);
        pos.set($T10().Reduce2D(vertex.VertData.Pos, face.FaceData.FaceNormal.MemberwiseClone()).MemberwiseClone());
        (verts.get()).set_Item(vertHandle, pos.get().MemberwiseClone());
        result = pos.get().MemberwiseClone();
      }
    } else {
      var vert = this.GetVertexByHandle(vertHandle).MemberwiseClone();
      pos.set($T10().Reduce2D(vert.VertData.Pos, face.FaceData.FaceNormal.MemberwiseClone()).MemberwiseClone());
      var expr_8C = $S09().Construct();
      expr_8C.Add(vert.Handle, pos.get().MemberwiseClone());
      (this._vertPos2DCache).set_Item(face, expr_8C);
      result = pos.get().MemberwiseClone();
    }
    return result;
  }; 

  function Geometry_GetAllFaces () {
    var expr_07 = new ($T11())(-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function Geometry_GetAllHalfEdges () {
    var expr_07 = new ($T12())(-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function Geometry_GetAllVertices () {
    var expr_07 = new ($T13())(-2);
    expr_07.$l$g4__this = this;
    return expr_07;
  }; 

  function Geometry_GetFaceByHandle (fHandle) {
    var flag = (this.Geometry$DictFaces$value).ContainsKey(fHandle);
    if (flag) {
      return (this.Geometry$DictFaces$value).get_Item(fHandle);
    }
    throw $S0A().Construct(JSIL.ConcatString("Face with id ", $T07().$Box(fHandle), " not found!"));
  }; 

  function Geometry_GetFaceHalfEdges (fHandle) {
    var expr_07 = new ($T16())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__fHandle = (fHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetFaceOuterVertices (fHandle) {
    var expr_07 = new ($T17())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__fHandle = (fHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetFacesAdajacentToFace (fHandle) {
    var expr_07 = new ($T18())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__fHandle = (fHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetFaceToInsertDiag (p, q, /* ref */ pStartHe, /* ref */ qStartHe) {
    var $temp00, $temp01, $temp02;
    var $closure0 = new ($T1A())();
    var vertP = this.GetVertexByHandle(p).MemberwiseClone();
    var vertQ = this.GetVertexByHandle(q).MemberwiseClone();
    $closure0.heStartingAtP = $T09().ToList$b1($T19())(this.GetVertexStartingHalfEdges(p));
    $closure0.heStartingAtQ = $T09().ToList$b1($T19())(this.GetVertexStartingHalfEdges(q));
    var heWithSameFaceQ = $S0B().Construct($S0C().CallStatic($T09(), "Where$b1", [$asm09.Fusee.Jometri.HalfEdge], $closure0.heStartingAtQ, $T1C().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_0, "$lGetFaceToInsertDiag$gb__0", $S0D(), false, false))));
    var heWithSameFaceP = $S0B().Construct($S0C().CallStatic($T09(), "Where$b1", [$asm09.Fusee.Jometri.HalfEdge], $closure0.heStartingAtP, $T1C().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_0, "$lGetFaceToInsertDiag$gb__1", $S0E(), false, false))));
    var flag = (heWithSameFaceP.get_Count() | 0) === 1;
    if (!flag) {

      for (var a$0 = heWithSameFaceP._items, i$0 = 0, l$0 = (heWithSameFaceP._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var he = a$0[i$0].MemberwiseClone();
        var face = this.GetFaceByHandle(he.IncidentFace).MemberwiseClone();
        var flag2 = (face.Handle | 0) === 1;
        if (!flag2) {
          var diagMiddPoint = $T0F().op_Addition(
            $S0F().CallStatic($T0F(), "op_Multiply", null, 0.5, vertP.VertData.Pos.MemberwiseClone()).MemberwiseClone(), 
            $S0F().CallStatic($T0F(), "op_Multiply", null, 0.5, vertQ.VertData.Pos.MemberwiseClone())
          );
          var redMidd = $T10().Reduce2D(diagMiddPoint, face.FaceData.FaceNormal.MemberwiseClone());
          var flag3 = !$S10().CallStatic($T10(), "IsPointInPolygon", null, this, face.MemberwiseClone(), redMidd);
          if (!flag3) {

            for (var a$1 = heWithSameFaceP._items, i$1 = 0, l$1 = (heWithSameFaceP._size | 0); i$1 < l$1; ($temp01 = i$1, 
                i$1 = ((i$1 + 1) | 0), 
                $temp01)) {
              var heP = a$1[i$1];
              var flag4 = (heP.IncidentFace | 0) === (face.Handle | 0);
              if (flag4) {
                pStartHe.set(heP);
              }
            }

            for (var a$2 = heWithSameFaceQ._items, i$2 = 0, l$2 = (heWithSameFaceQ._size | 0); i$2 < l$2; ($temp02 = i$2, 
                i$2 = ((i$2 + 1) | 0), 
                $temp02)) {
              var heQ = a$2[i$2];
              var flag5 = (heQ.IncidentFace | 0) === (face.Handle | 0);
              if (flag5) {
                qStartHe.set(heQ);
              }
            }
            var result = face;
            return result;
          }
        }
      }
      throw $S0A().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T1D(), ["Vertex ", $T07().$Box(p), " vertex ", $T07().$Box(q), " have no common Face!"])));
    }
    var face2 = this.GetFaceByHandle(heWithSameFaceP.get_Item(0).IncidentFace);
    pStartHe.set(heWithSameFaceP.get_Item(0).MemberwiseClone());
    qStartHe.set(heWithSameFaceQ.get_Item(0).MemberwiseClone());
    result = face2;
    return result;
  }; 

  function Geometry_GetFaceVertices (fHandle) {
    var expr_07 = new ($T1F())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__fHandle = (fHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetHalfEdgeByHandle (hehandle) {
    var flag = (this.Geometry$DictHalfEdges$value).ContainsKey(hehandle);
    if (flag) {
      return (this.Geometry$DictHalfEdges$value).get_Item(hehandle);
    }
    throw $S0A().Construct(JSIL.ConcatString("HalfEdge with id ", $T07().$Box(hehandle), " not found!"));
  }; 

  function Geometry_GetHalfEdgeLoop (heHandle) {
    var expr_07 = new ($T20())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__heHandle = (heHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetHalfEdgeLoopReverse (heHandle) {
    var expr_07 = new ($T21())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__heHandle = (heHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetVertexAdajacentFaces (vHandle) {
    var expr_07 = new ($T22())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__vHandle = (vHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetVertexAdjacentVertices (vHandle) {
    var expr_07 = new ($T23())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__vHandle = (vHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetVertexByHandle (vHandle) {
    var flag = (this.Geometry$DictVertices$value).ContainsKey(vHandle);
    if (flag) {
      return (this.Geometry$DictVertices$value).get_Item(vHandle);
    }
    throw $S0A().Construct(JSIL.ConcatString("Vertex with id ", $T07().$Box(vHandle), " not found!"));
  }; 

  function Geometry_GetVertexIncidentHalfEdges (vHandle) {
    var expr_07 = new ($T24())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__vHandle = (vHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetVertexStartingHalfEdges (vHandle) {
    var expr_07 = new ($T25())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__vHandle = (vHandle | 0);
    return expr_07;
  }; 

  function Geometry_GetVertexTargetingHalfEdges (vHandle) {
    var expr_07 = new ($T26())(-2);
    expr_07.$l$g4__this = this;
    expr_07.$l$g3__vHandle = (vHandle | 0);
    return expr_07;
  }; 

  function Geometry_ReplaceFace (face) {
    (this.Geometry$DictFaces$value).set_Item(face.Handle, face.MemberwiseClone());
  }; 

  function Geometry_ReplaceHalfEdge (halfEdge) {
    (this.Geometry$DictHalfEdges$value).set_Item(halfEdge.Handle, halfEdge.MemberwiseClone());
  }; 

  function Geometry_ReplaceVertex (vert) {
    (this.Geometry$DictVertices$value).set_Item(vert.Handle, vert.MemberwiseClone());
  }; 

  function Geometry_set_DictFaces (value) {
    this.Geometry$DictFaces$value = value;
  }; 

  function Geometry_set_DictHalfEdges (value) {
    this.Geometry$DictHalfEdges$value = value;
  }; 

  function Geometry_set_DictVertices (value) {
    this.Geometry$DictVertices$value = value;
  }; 

  function Geometry_set_HighestFaceHandle (value) {
    this.Geometry$HighestFaceHandle$value = (value | 0);
  }; 

  function Geometry_set_HighestHalfEdgeHandle (value) {
    this.Geometry$HighestHalfEdgeHandle$value = (value | 0);
  }; 

  function Geometry_set_HighestVertHandle (value) {
    this.Geometry$HighestVertHandle$value = (value | 0);
  }; 

  function Geometry_SetFaceNormal (faceOuterVertices, face) {
    var normal = $T10().CalculateFaceNormal(faceOuterVertices);
    var cur = (this.Geometry$DictFaces$value).get_Item(face.Handle).MemberwiseClone();
    var faceData = face.FaceData.MemberwiseClone();
    faceData.FaceNormal = normal.MemberwiseClone();
    cur.FaceData = faceData.MemberwiseClone();
    (this.Geometry$DictFaces$value).set_Item(face.Handle, cur.MemberwiseClone());
  }; 

  function Geometry_SetHighestHandles () {
    this.Geometry$HighestVertHandle$value = ($S11().CallStatic($T09(), "Max", null, (this.Geometry$DictVertices$value).get_Keys()) | 0);
    this.Geometry$HighestHalfEdgeHandle$value = ($S11().CallStatic($T09(), "Max", null, (this.Geometry$DictHalfEdges$value).get_Keys()) | 0);
    this.Geometry$HighestFaceHandle$value = ($S11().CallStatic($T09(), "Max", null, (this.Geometry$DictFaces$value).get_Keys()) | 0);
  }; 

  function Geometry_TwinNext (halfEdge) {
    var flag = (halfEdge.TwinHalfEdge | 0) === 0;
    if (flag) {
      var result = new ($T19())();
    } else {
      var twin = this.GetHalfEdgeByHandle(halfEdge.TwinHalfEdge).MemberwiseClone();
      result = this.GetHalfEdgeByHandle(twin.NextHalfEdge).MemberwiseClone();
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Geometry__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.PolyBoundary")])), 
      Geometry__ctor$01
    );

    $.Method({Static:false, Public:true }, "CloneGeometry", 
      JSIL.MethodSignature.Return($.Type), 
      Geometry_CloneGeometry
    );

    $.Method({Static:false, Public:false}, "CreateFaceHandleId", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_CreateFaceHandleId
    );

    $.Method({Static:false, Public:false}, "CreateHalfEdgeHandleId", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_CreateHalfEdgeHandleId
    );

    $.Method({Static:false, Public:false}, "CreateVertHandleId", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_CreateVertHandleId
    );

    $.Method({Static:false, Public:false}, "get_DictFaces", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")])), 
      Geometry_get_DictFaces
    );

    $.Method({Static:false, Public:false}, "get_DictHalfEdges", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      Geometry_get_DictHalfEdges
    );

    $.Method({Static:false, Public:false}, "get_DictVertices", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      Geometry_get_DictVertices
    );

    $.Method({Static:false, Public:false}, "get_HighestFaceHandle", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_get_HighestFaceHandle
    );

    $.Method({Static:false, Public:false}, "get_HighestHalfEdgeHandle", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_get_HighestHalfEdgeHandle
    );

    $.Method({Static:false, Public:false}, "get_HighestVertHandle", 
      JSIL.MethodSignature.Return($.Int32), 
      Geometry_get_HighestVertHandle
    );

    $.Method({Static:false, Public:false}, "Get2DVertPos", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$asm09.TypeRef("Fusee.Jometri.Face"), $.Int32]), 
      Geometry_Get2DVertPos
    );

    $.Method({Static:false, Public:true }, "GetAllFaces", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")])), 
      Geometry_GetAllFaces
    );

    $.Method({Static:false, Public:true }, "GetAllHalfEdges", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      Geometry_GetAllHalfEdges
    );

    $.Method({Static:false, Public:true }, "GetAllVertices", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      Geometry_GetAllVertices
    );

    $.Method({Static:false, Public:false}, "GetFaceByHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Face"), [$.Int32]), 
      Geometry_GetFaceByHandle
    );

    $.Method({Static:false, Public:true }, "GetFaceHalfEdges", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetFaceHalfEdges
    );

    $.Method({Static:false, Public:true }, "GetFaceOuterVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), [$.Int32]), 
      Geometry_GetFaceOuterVertices
    );

    $.Method({Static:false, Public:true }, "GetFacesAdajacentToFace", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), [$.Int32]), 
      Geometry_GetFacesAdajacentToFace
    );

    $.Method({Static:false, Public:false}, "GetFaceToInsertDiag", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Face"), [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])
        ]), 
      Geometry_GetFaceToInsertDiag
    );

    $.Method({Static:false, Public:true }, "GetFaceVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), [$.Int32]), 
      Geometry_GetFaceVertices
    );

    $.Method({Static:false, Public:false}, "GetHalfEdgeByHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.HalfEdge"), [$.Int32]), 
      Geometry_GetHalfEdgeByHandle
    );

    $.Method({Static:false, Public:true }, "GetHalfEdgeLoop", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetHalfEdgeLoop
    );

    $.Method({Static:false, Public:true }, "GetHalfEdgeLoopReverse", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetHalfEdgeLoopReverse
    );

    $.Method({Static:false, Public:true }, "GetVertexAdajacentFaces", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), [$.Int32]), 
      Geometry_GetVertexAdajacentFaces
    );

    $.Method({Static:false, Public:true }, "GetVertexAdjacentVertices", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), [$.Int32]), 
      Geometry_GetVertexAdjacentVertices
    );

    $.Method({Static:false, Public:false}, "GetVertexByHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.Vertex"), [$.Int32]), 
      Geometry_GetVertexByHandle
    );

    $.Method({Static:false, Public:true }, "GetVertexIncidentHalfEdges", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetVertexIncidentHalfEdges
    );

    $.Method({Static:false, Public:true }, "GetVertexStartingHalfEdges", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetVertexStartingHalfEdges
    );

    $.Method({Static:false, Public:true }, "GetVertexTargetingHalfEdges", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$.Int32]), 
      Geometry_GetVertexTargetingHalfEdges
    );

    $.Method({Static:false, Public:false}, "ReplaceFace", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Face")), 
      Geometry_ReplaceFace
    );

    $.Method({Static:false, Public:false}, "ReplaceHalfEdge", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      Geometry_ReplaceHalfEdge
    );

    $.Method({Static:false, Public:false}, "ReplaceVertex", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      Geometry_ReplaceVertex
    );

    $.Method({Static:false, Public:false}, "set_DictFaces", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")])), 
      Geometry_set_DictFaces
    );

    $.Method({Static:false, Public:false}, "set_DictHalfEdges", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      Geometry_set_DictHalfEdges
    );

    $.Method({Static:false, Public:false}, "set_DictVertices", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      Geometry_set_DictVertices
    );

    $.Method({Static:false, Public:false}, "set_HighestFaceHandle", 
      JSIL.MethodSignature.Action($.Int32), 
      Geometry_set_HighestFaceHandle
    );

    $.Method({Static:false, Public:false}, "set_HighestHalfEdgeHandle", 
      JSIL.MethodSignature.Action($.Int32), 
      Geometry_set_HighestHalfEdgeHandle
    );

    $.Method({Static:false, Public:false}, "set_HighestVertHandle", 
      JSIL.MethodSignature.Action($.Int32), 
      Geometry_set_HighestVertHandle
    );

    $.Method({Static:false, Public:true }, "SetFaceNormal", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), $asm09.TypeRef("Fusee.Jometri.Face")]), 
      Geometry_SetFaceNormal
    );

    $.Method({Static:false, Public:false}, "SetHighestHandles", 
      JSIL.MethodSignature.Void, 
      Geometry_SetHighestHandles
    );

    $.Method({Static:false, Public:false}, "TwinNext", 
      new JSIL.MethodSignature($asm09.TypeRef("Fusee.Jometri.HalfEdge"), [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      Geometry_TwinNext
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_vertPos2DCache", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("Fusee.Jometri.Face"), $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0A.TypeRef("Fusee.Math.Core.float3")])]));

    $.Field({Static:false, Public:false}, "Geometry$DictVertices$value", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Field({Static:false, Public:false}, "Geometry$DictHalfEdges$value", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "Geometry$DictFaces$value", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")]));

    $.Field({Static:false, Public:false}, "Geometry$HighestHalfEdgeHandle$value", $.Int32);

    $.Field({Static:false, Public:false}, "Geometry$HighestVertHandle$value", $.Int32);

    $.Field({Static:false, Public:false}, "Geometry$HighestFaceHandle$value", $.Int32);

    $.Property({Static:false, Public:false}, "DictVertices", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Property({Static:false, Public:false}, "DictHalfEdges", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Property({Static:false, Public:false}, "DictFaces", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")]));

    $.Property({Static:false, Public:false}, "HighestHalfEdgeHandle", $.Int32);

    $.Property({Static:false, Public:false}, "HighestVertHandle", $.Int32);

    $.Property({Static:false, Public:false}, "HighestFaceHandle", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetAllVertices>d__33 */ 

(function $lGetAllVertices$gd__33$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetAllVertices$gd__33__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetAllVertices$gd__33_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__1, null);
  }; 

  function $lGetAllVertices$gd__33_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lvert$g5__2 = new ($T05())();
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = $T06().prototype.GetEnumerator.call(this.$l$g4__this.Geometry$DictVertices$value);
        this.$l$g1__state = -3;
      }
      if (!$T08().prototype.MoveNext.call(this.$l$gs__1)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = new ($T08())();
        result = false;
      } else {
        this.$lvert$g5__2 = $T08().prototype.get_Current.call(this.$l$gs__1).MemberwiseClone();
        this.$l$g2__current = (this.$lvert$g5__2).get_Value().MemberwiseClone();
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetAllVertices$gd__33_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetAllVertices$gd__ = this;
    } else {
      $lGetAllVertices$gd__ = new $thisType(0);
      $lGetAllVertices$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lGetAllVertices$gd__;
  }; 

  function $lGetAllVertices$gd__33_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllVertices$gd__33_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator();
  }; 

  function $lGetAllVertices$gd__33_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllVertices$gd__33_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetAllVertices$gd__33_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetAllVertices>d__33", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetAllVertices$gd__33__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetAllVertices$gd__33_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetAllVertices$gd__33_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Vertex$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      $lGetAllVertices$gd__33_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      $lGetAllVertices$gd__33_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetAllVertices$gd__33_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetAllVertices$gd__33_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetAllVertices$gd__33_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetAllVertices$gd__33_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Field({Static:false, Public:false}, "$lvert$g5__2", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Vertex")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.Current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetAllHalfEdges>d__34 */ 

(function $lGetAllHalfEdges$gd__34$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetAllHalfEdges$gd__34__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetAllHalfEdges$gd__34_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__1, null);
  }; 

  function $lGetAllHalfEdges$gd__34_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lhe$g5__2 = new ($T05())();
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = $T06().prototype.GetEnumerator.call(this.$l$g4__this.Geometry$DictHalfEdges$value);
        this.$l$g1__state = -3;
      }
      if (!$T08().prototype.MoveNext.call(this.$l$gs__1)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = new ($T08())();
        result = false;
      } else {
        this.$lhe$g5__2 = $T08().prototype.get_Current.call(this.$l$gs__1).MemberwiseClone();
        this.$l$g2__current = (this.$lhe$g5__2).get_Value().MemberwiseClone();
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetAllHalfEdges$gd__34_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetAllHalfEdges$gd__ = this;
    } else {
      $lGetAllHalfEdges$gd__ = new $thisType(0);
      $lGetAllHalfEdges$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lGetAllHalfEdges$gd__;
  }; 

  function $lGetAllHalfEdges$gd__34_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllHalfEdges$gd__34_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetAllHalfEdges$gd__34_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllHalfEdges$gd__34_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetAllHalfEdges$gd__34_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetAllHalfEdges>d__34", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetAllHalfEdges$gd__34__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetAllHalfEdges$gd__34_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetAllHalfEdges$gd__34_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetAllHalfEdges$gd__34_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetAllHalfEdges$gd__34_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetAllHalfEdges$gd__34_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetAllHalfEdges$gd__34_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetAllHalfEdges$gd__34_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetAllHalfEdges$gd__34_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "$lhe$g5__2", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetAllFaces>d__35 */ 

(function $lGetAllFaces$gd__35$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Face))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetAllFaces$gd__35__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetAllFaces$gd__35_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__1, null);
  }; 

  function $lGetAllFaces$gd__35_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lface$g5__2 = new ($T05())();
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = $T06().prototype.GetEnumerator.call(this.$l$g4__this.Geometry$DictFaces$value);
        this.$l$g1__state = -3;
      }
      if (!$T08().prototype.MoveNext.call(this.$l$gs__1)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = new ($T08())();
        result = false;
      } else {
        this.$lface$g5__2 = $T08().prototype.get_Current.call(this.$l$gs__1).MemberwiseClone();
        this.$l$g2__current = (this.$lface$g5__2).get_Value().MemberwiseClone();
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetAllFaces$gd__35_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetAllFaces$gd__ = this;
    } else {
      $lGetAllFaces$gd__ = new $thisType(0);
      $lGetAllFaces$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lGetAllFaces$gd__;
  }; 

  function $lGetAllFaces$gd__35_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllFaces$gd__35_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator();
  }; 

  function $lGetAllFaces$gd__35_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetAllFaces$gd__35_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetAllFaces$gd__35_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetAllFaces>d__35", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetAllFaces$gd__35__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetAllFaces$gd__35_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetAllFaces$gd__35_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Face$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")])), 
      $lGetAllFaces$gd__35_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Face")), 
      $lGetAllFaces$gd__35_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetAllFaces$gd__35_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetAllFaces$gd__35_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetAllFaces$gd__35_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetAllFaces$gd__35_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")]));

    $.Field({Static:false, Public:false}, "$lface$g5__2", $asm0F.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm09.TypeRef("Fusee.Jometri.Face")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.Current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetVertexAdjacentVertices>d__36 */ 

(function $lGetVertexAdjacentVertices$gd__36$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetVertexAdjacentVertices$gd__36__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetVertexAdjacentVertices$gd__36_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$lvert$g5__1 = (this.$l$g4__this).GetVertexByHandle(this.vHandle).MemberwiseClone();
        this.$le$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lvert$g5__1.IncidentHalfEdge).MemberwiseClone();
        this.$lstartEdge$g5__3 = this.$le$g5__2.MemberwiseClone();
        this.$ltwin$g5__4 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.TwinHalfEdge).MemberwiseClone();
        this.$l$g2__current = (this.$l$g4__this).GetVertexByHandle(this.$ltwin$g5__4.OriginVertex).MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        break;

      case 2: 
        this.$l$g1__state = -1;
        break;

      default: 
        return false;

    }
    if (((this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).Handle | 0) === (this.$lstartEdge$g5__3.Handle | 0)) {
      return false;
    }
    this.$le$g5__2 = (this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).MemberwiseClone();
    this.$ltwin$g5__4 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.TwinHalfEdge).MemberwiseClone();
    this.$l$g2__current = (this.$l$g4__this).GetVertexByHandle(this.$ltwin$g5__4.OriginVertex).MemberwiseClone();
    this.$l$g1__state = 2;
    return true;
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetVertexAdjacentVertices$gd__ = this;
    } else {
      $lGetVertexAdjacentVertices$gd__ = new $thisType(0);
      $lGetVertexAdjacentVertices$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetVertexAdjacentVertices$gd__.vHandle = (this.$l$g3__vHandle | 0);
    return $lGetVertexAdjacentVertices$gd__;
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator();
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetVertexAdjacentVertices$gd__36_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetVertexAdjacentVertices>d__36", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVertexAdjacentVertices$gd__36__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVertexAdjacentVertices$gd__36_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Vertex$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      $lGetVertexAdjacentVertices$gd__36_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      $lGetVertexAdjacentVertices$gd__36_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVertexAdjacentVertices$gd__36_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVertexAdjacentVertices$gd__36_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lvert$g5__1", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$le$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lstartEdge$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$ltwin$g5__4", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.Current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetVertexAdajacentFaces>d__37 */ 

(function $lGetVertexAdajacentFaces$gd__37$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetVertexAdajacentFaces$gd__37__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetVertexAdajacentFaces$gd__37_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$lvert$g5__1 = (this.$l$g4__this).GetVertexByHandle(this.vHandle).MemberwiseClone();
        this.$le$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lvert$g5__1.IncidentHalfEdge).MemberwiseClone();
        this.$lstartEdge$g5__3 = this.$le$g5__2.MemberwiseClone();
        this.$l$g2__current = (this.$l$g4__this).GetFaceByHandle(this.$lstartEdge$g5__3.IncidentFace).MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        break;

      case 2: 
        this.$l$g1__state = -1;
        break;

      default: 
        return false;

    }
    if (((this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).Handle | 0) === (this.$lstartEdge$g5__3.Handle | 0)) {
      return false;
    }
    this.$le$g5__2 = (this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).MemberwiseClone();
    this.$l$g2__current = (this.$l$g4__this).GetFaceByHandle(this.$le$g5__2.IncidentFace).MemberwiseClone();
    this.$l$g1__state = 2;
    return true;
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetVertexAdajacentFaces$gd__ = this;
    } else {
      $lGetVertexAdajacentFaces$gd__ = new $thisType(0);
      $lGetVertexAdajacentFaces$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetVertexAdajacentFaces$gd__.vHandle = (this.$l$g3__vHandle | 0);
    return $lGetVertexAdajacentFaces$gd__;
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator();
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetVertexAdajacentFaces$gd__37_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetVertexAdajacentFaces>d__37", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVertexAdajacentFaces$gd__37__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVertexAdajacentFaces$gd__37_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Face$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")])), 
      $lGetVertexAdajacentFaces$gd__37_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Face")), 
      $lGetVertexAdajacentFaces$gd__37_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVertexAdajacentFaces$gd__37_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVertexAdajacentFaces$gd__37_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lvert$g5__1", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$le$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lstartEdge$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.Current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetVertexIncidentHalfEdges>d__38 */ 

(function $lGetVertexIncidentHalfEdges$gd__38$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetVertexIncidentHalfEdges$gd__38__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$lvert$g5__1 = (this.$l$g4__this).GetVertexByHandle(this.vHandle).MemberwiseClone();
        this.$le$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lvert$g5__1.IncidentHalfEdge).MemberwiseClone();
        this.$lstartEdge$g5__3 = this.$le$g5__2.MemberwiseClone();
        this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lstartEdge$g5__3.Handle).MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lstartEdge$g5__3.TwinHalfEdge).MemberwiseClone();
        this.$l$g1__state = 2;
        return true;

      case 2: 
        this.$l$g1__state = -1;
        break;

      case 3: 
        this.$l$g1__state = -1;
        this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.TwinHalfEdge).MemberwiseClone();
        this.$l$g1__state = 4;
        return true;

      case 4: 
        this.$l$g1__state = -1;
        break;

      default: 
        return false;

    }
    if (((this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).Handle | 0) === (this.$lstartEdge$g5__3.Handle | 0)) {
      return false;
    }
    this.$le$g5__2 = (this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).MemberwiseClone();
    this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.Handle).MemberwiseClone();
    this.$l$g1__state = 3;
    return true;
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetVertexIncidentHalfEdges$gd__ = this;
    } else {
      $lGetVertexIncidentHalfEdges$gd__ = new $thisType(0);
      $lGetVertexIncidentHalfEdges$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetVertexIncidentHalfEdges$gd__.vHandle = (this.$l$g3__vHandle | 0);
    return $lGetVertexIncidentHalfEdges$gd__;
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetVertexIncidentHalfEdges$gd__38_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetVertexIncidentHalfEdges>d__38", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVertexIncidentHalfEdges$gd__38__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVertexIncidentHalfEdges$gd__38_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetVertexIncidentHalfEdges$gd__38_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetVertexIncidentHalfEdges$gd__38_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVertexIncidentHalfEdges$gd__38_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVertexIncidentHalfEdges$gd__38_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lvert$g5__1", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$le$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lstartEdge$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetVertexStartingHalfEdges>d__39 */ 

(function $lGetVertexStartingHalfEdges$gd__39$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetVertexStartingHalfEdges$gd__39__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$lvert$g5__1 = (this.$l$g4__this).GetVertexByHandle(this.vHandle).MemberwiseClone();
        this.$le$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lvert$g5__1.IncidentHalfEdge).MemberwiseClone();
        this.$lstartEdge$g5__3 = this.$le$g5__2.MemberwiseClone();
        this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lstartEdge$g5__3.Handle).MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        break;

      case 2: 
        this.$l$g1__state = -1;
        break;

      default: 
        return false;

    }
    if (((this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).Handle | 0) === (this.$lstartEdge$g5__3.Handle | 0)) {
      return false;
    }
    this.$le$g5__2 = (this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).MemberwiseClone();
    this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.Handle).MemberwiseClone();
    this.$l$g1__state = 2;
    return true;
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetVertexStartingHalfEdges$gd__ = this;
    } else {
      $lGetVertexStartingHalfEdges$gd__ = new $thisType(0);
      $lGetVertexStartingHalfEdges$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetVertexStartingHalfEdges$gd__.vHandle = (this.$l$g3__vHandle | 0);
    return $lGetVertexStartingHalfEdges$gd__;
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetVertexStartingHalfEdges$gd__39_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetVertexStartingHalfEdges>d__39", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVertexStartingHalfEdges$gd__39__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVertexStartingHalfEdges$gd__39_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetVertexStartingHalfEdges$gd__39_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetVertexStartingHalfEdges$gd__39_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVertexStartingHalfEdges$gd__39_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVertexStartingHalfEdges$gd__39_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lvert$g5__1", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$le$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lstartEdge$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetVertexTargetingHalfEdges>d__40 */ 

(function $lGetVertexTargetingHalfEdges$gd__40$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetVertexTargetingHalfEdges$gd__40__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$lvert$g5__1 = (this.$l$g4__this).GetVertexByHandle(this.vHandle).MemberwiseClone();
        this.$le$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lvert$g5__1.IncidentHalfEdge).MemberwiseClone();
        this.$lstartEdge$g5__3 = this.$le$g5__2.MemberwiseClone();
        this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.TwinHalfEdge).MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        break;

      case 2: 
        this.$l$g1__state = -1;
        break;

      default: 
        return false;

    }
    if (((this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).Handle | 0) === (this.$lstartEdge$g5__3.Handle | 0)) {
      return false;
    }
    this.$le$g5__2 = (this.$l$g4__this).TwinNext(this.$le$g5__2.MemberwiseClone()).MemberwiseClone();
    this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$le$g5__2.TwinHalfEdge).MemberwiseClone();
    this.$l$g1__state = 2;
    return true;
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetVertexTargetingHalfEdges$gd__ = this;
    } else {
      $lGetVertexTargetingHalfEdges$gd__ = new $thisType(0);
      $lGetVertexTargetingHalfEdges$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetVertexTargetingHalfEdges$gd__.vHandle = (this.$l$g3__vHandle | 0);
    return $lGetVertexTargetingHalfEdges$gd__;
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetVertexTargetingHalfEdges$gd__40_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetVertexTargetingHalfEdges>d__40", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVertexTargetingHalfEdges$gd__40__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVertexTargetingHalfEdges$gd__40_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetVertexTargetingHalfEdges$gd__40_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetVertexTargetingHalfEdges$gd__40_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVertexTargetingHalfEdges$gd__40_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVertexTargetingHalfEdges$gd__40_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__vHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lvert$g5__1", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$le$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lstartEdge$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetHalfEdgeLoop>d__42 */ 

(function $lGetHalfEdgeLoop$gd__42$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetHalfEdgeLoop$gd__42__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetHalfEdgeLoop$gd__42_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      if (num !== 1) {
        return false;
      }
      this.$l$g1__state = -1;
      this.$lcurrentHalfEdge$g5__2 = new ($T02())();
      if ((this.$lcurrentHandle$g5__1 | 0) === (this.heHandle | 0)) {
        return false;
      }
    } else {
      this.$l$g1__state = -1;
      this.$lcurrentHandle$g5__1 = (this.heHandle | 0);
    }
    this.$lcurrentHalfEdge$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrentHandle$g5__1).MemberwiseClone();
    this.$lcurrentHandle$g5__1 = (this.$lcurrentHalfEdge$g5__2.NextHalfEdge | 0);
    this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrentHalfEdge$g5__2.Handle).MemberwiseClone();
    this.$l$g1__state = 1;
    return true;
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetHalfEdgeLoop$gd__ = this;
    } else {
      $lGetHalfEdgeLoop$gd__ = new $thisType(0);
      $lGetHalfEdgeLoop$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetHalfEdgeLoop$gd__.heHandle = (this.$l$g3__heHandle | 0);
    return $lGetHalfEdgeLoop$gd__;
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetHalfEdgeLoop$gd__42_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetHalfEdgeLoop>d__42", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetHalfEdgeLoop$gd__42__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetHalfEdgeLoop$gd__42_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetHalfEdgeLoop$gd__42_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetHalfEdgeLoop$gd__42_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgeLoop$gd__42_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgeLoop$gd__42_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "heHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__heHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lcurrentHandle$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lcurrentHalfEdge$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetHalfEdgeLoopReverse>d__43 */ 

(function $lGetHalfEdgeLoopReverse$gd__43$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetHalfEdgeLoopReverse$gd__43__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      if (num !== 1) {
        return false;
      }
      this.$l$g1__state = -1;
      this.$lcurrentHalfEdge$g5__2 = new ($T02())();
      if ((this.$lcurrentHandle$g5__1 | 0) === (this.heHandle | 0)) {
        return false;
      }
    } else {
      this.$l$g1__state = -1;
      this.$lcurrentHandle$g5__1 = (this.heHandle | 0);
    }
    this.$lcurrentHalfEdge$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrentHandle$g5__1).MemberwiseClone();
    this.$lcurrentHandle$g5__1 = (this.$lcurrentHalfEdge$g5__2.PrevHalfEdge | 0);
    this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrentHalfEdge$g5__2.Handle).MemberwiseClone();
    this.$l$g1__state = 1;
    return true;
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetHalfEdgeLoopReverse$gd__ = this;
    } else {
      $lGetHalfEdgeLoopReverse$gd__ = new $thisType(0);
      $lGetHalfEdgeLoopReverse$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetHalfEdgeLoopReverse$gd__.heHandle = (this.$l$g3__heHandle | 0);
    return $lGetHalfEdgeLoopReverse$gd__;
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetHalfEdgeLoopReverse$gd__43_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetHalfEdgeLoopReverse>d__43", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetHalfEdgeLoopReverse$gd__43__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetHalfEdgeLoopReverse$gd__43_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetHalfEdgeLoopReverse$gd__43_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetHalfEdgeLoopReverse$gd__43_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgeLoopReverse$gd__43_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgeLoopReverse$gd__43_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "heHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__heHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lcurrentHandle$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lcurrentHalfEdge$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetFacesAdajacentToFace>d__44 */ 

(function $lGetFacesAdajacentToFace$gd__44$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm0F.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetFacesAdajacentToFace$gd__44__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetFacesAdajacentToFace$gd__44_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__5, null);
  }; 

  function $lGetFacesAdajacentToFace$gd__44_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$lface$g5__1 = (this.$l$g4__this).GetFaceByHandle(this.fHandle).MemberwiseClone();
                this.$lfirstHandle$g5__2 = (this.$lface$g5__1.OuterHalfEdge | 0);
                this.$lcurrent$g5__3 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lface$g5__1.OuterHalfEdge).MemberwiseClone();
                break;

              case 1: 
                this.$l$g1__state = -1;
                this.$lcurrent$g5__3 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrent$g5__3.NextHalfEdge).MemberwiseClone();
                if ((this.$lfirstHandle$g5__2 | 0) === (this.$lcurrent$g5__3.Handle | 0)) {
                  this.$linnerComponents$g5__4 = this.$lface$g5__1.InnerHalfEdges;
                  var flag = ((this.$linnerComponents$g5__4).get_Count() | 0) === 0;
                  if (flag) {
                    var result = false;
                    return result;
                  }
                  this.$l$gs__5 = $T06().prototype.GetEnumerator.call(this.$linnerComponents$g5__4);
                  this.$l$g1__state = -3;
                  $label0 = 2 /* goto IL_1CB */ ;
                  continue $labelgroup0;
                }
                break;

              case 2: 
                this.$l$g1__state = -3;
                this.$lcur$g5__7 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcur$g5__7.NextHalfEdge).MemberwiseClone();
                if ((this.$lhe$g5__6 | 0) === (this.$lcur$g5__7.Handle | 0)) {
                  this.$lcur$g5__7 = new ($T07())();
                  $label0 = 2 /* goto IL_1CB */ ;
                  continue $labelgroup0;
                }
                $label0 = 1 /* goto IL_155 */ ;
                continue $labelgroup0;

              default: 
                result = false;
                return result;

            }
            this.$l$g2__current = (this.$l$g4__this).GetFaceByHandle(this.$lcurrent$g5__3.IncidentFace).MemberwiseClone();
            this.$l$g1__state = 1;
            result = true;
            return result;

            $label0 = 1 /* goto IL_155 */ ;
            continue $labelgroup0;
          case 1: /* IL_155 */ 
            this.$l$g2__current = (this.$l$g4__this).GetFaceByHandle(this.$lcur$g5__7.IncidentFace).MemberwiseClone();
            this.$l$g1__state = 2;
            result = true;
            return result;

            $label0 = 2 /* goto IL_1CB */ ;
            continue $labelgroup0;
          case 2: /* IL_1CB */ 
            if ($T08().prototype.MoveNext.call(this.$l$gs__5)) {
              this.$lhe$g5__6 = ($T08().prototype.get_Current.call(this.$l$gs__5) | 0);
              this.$lcur$g5__7 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lhe$g5__6).MemberwiseClone();
              $label0 = 1 /* goto IL_155 */ ;
              continue $labelgroup0;
            }
            this.$l$gm__Finally1();
            this.$l$gs__5 = new ($T08())();
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetFacesAdajacentToFace$gd__ = this;
    } else {
      $lGetFacesAdajacentToFace$gd__ = new $thisType(0);
      $lGetFacesAdajacentToFace$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetFacesAdajacentToFace$gd__.fHandle = (this.$l$g3__fHandle | 0);
    return $lGetFacesAdajacentToFace$gd__;
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator();
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetFacesAdajacentToFace$gd__44_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 2)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetFacesAdajacentToFace>d__44", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetFacesAdajacentToFace$gd__44__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetFacesAdajacentToFace$gd__44_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetFacesAdajacentToFace$gd__44_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Face$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")])), 
      $lGetFacesAdajacentToFace$gd__44_System_Collections_Generic_IEnumerable$lFusee_Jometri_Face$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Face")), 
      $lGetFacesAdajacentToFace$gd__44_System_Collections_Generic_IEnumerator$lFusee_Jometri_Face$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetFacesAdajacentToFace$gd__44_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetFacesAdajacentToFace$gd__44_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lface$g5__1", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$lfirstHandle$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lcurrent$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$linnerComponents$g5__4", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "$l$gs__5", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.Int32]));

    $.Field({Static:false, Public:false}, "$lhe$g5__6", $.Int32);

    $.Field({Static:false, Public:false}, "$lcur$g5__7", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Face$g.Current", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Face")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetFaceVertices>d__45 */ 

(function $lGetFaceVertices$gd__45$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm0F.System.Int32))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetFaceVertices$gd__45__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetFaceVertices$gd__45_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__6, null);
  }; 

  function $lGetFaceVertices$gd__45_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$lface$g5__1 = (this.$l$g4__this).GetFaceByHandle(this.fHandle).MemberwiseClone();
                if ((this.$lface$g5__1.OuterHalfEdge >>> 0) <= (0 >>> 0)) {
                  $label0 = 1 /* goto IL_10D */ ;
                  continue $labelgroup0;
                }
                this.$lfistHalfEdgeHandle$g5__3 = (this.$lface$g5__1.OuterHalfEdge | 0);
                this.$lhalfEdgeOuter$g5__4 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lfistHalfEdgeHandle$g5__3).MemberwiseClone();
                break;

              case 1: 
                this.$l$g1__state = -1;
                this.$lhalfEdgeOuter$g5__4 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lhalfEdgeOuter$g5__4.NextHalfEdge).MemberwiseClone();
                if ((this.$lhalfEdgeOuter$g5__4.Handle | 0) === (this.$lfistHalfEdgeHandle$g5__3 | 0)) {
                  this.$lhalfEdgeOuter$g5__4 = new ($T06())();
                  $label0 = 1 /* goto IL_10D */ ;
                  continue $labelgroup0;
                }
                break;

              case 2: 
                this.$l$g1__state = -3;
                this.$lhalfEdgeInner$g5__8 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lhalfEdgeInner$g5__8.NextHalfEdge).MemberwiseClone();
                if ((this.$lhalfEdgeInner$g5__8.Handle | 0) === (this.$lcomp$g5__7 | 0)) {
                  this.$lhalfEdgeInner$g5__8 = new ($T06())();
                  $label0 = 3 /* goto IL_203 */ ;
                  continue $labelgroup0;
                }
                $label0 = 2 /* goto IL_181 */ ;
                continue $labelgroup0;

              default: 
                var result = false;
                return result;

            }
            this.$loriginVert$g5__5 = (this.$lhalfEdgeOuter$g5__4.OriginVertex | 0);
            this.$l$g2__current = (this.$l$g4__this).GetVertexByHandle(this.$loriginVert$g5__5).MemberwiseClone();
            this.$l$g1__state = 1;
            result = true;
            return result;

            $label0 = 1 /* goto IL_10D */ ;
            continue $labelgroup0;
          case 1: /* IL_10D */ 
            this.$linnerComponents$g5__2 = this.$lface$g5__1.InnerHalfEdges;
            var flag2 = ((this.$linnerComponents$g5__2).get_Count() | 0) === 0;
            if (flag2) {
              result = false;
              return result;
            }
            this.$l$gs__6 = $T08().prototype.GetEnumerator.call(this.$linnerComponents$g5__2);
            this.$l$g1__state = -3;
            $label0 = 3 /* goto IL_203 */ ;
            continue $labelgroup0;

          case 2: /* IL_181 */ 
            this.$loriginVert$g5__9 = (this.$lhalfEdgeInner$g5__8.OriginVertex | 0);
            this.$l$g2__current = (this.$l$g4__this).GetVertexByHandle(this.$loriginVert$g5__9).MemberwiseClone();
            this.$l$g1__state = 2;
            result = true;
            return result;

            $label0 = 3 /* goto IL_203 */ ;
            continue $labelgroup0;
          case 3: /* IL_203 */ 
            if ($T09().prototype.MoveNext.call(this.$l$gs__6)) {
              this.$lcomp$g5__7 = ($T09().prototype.get_Current.call(this.$l$gs__6) | 0);
              this.$lhalfEdgeInner$g5__8 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcomp$g5__7).MemberwiseClone();
              $label0 = 2 /* goto IL_181 */ ;
              continue $labelgroup0;
            }
            this.$l$gm__Finally1();
            this.$l$gs__6 = new ($T09())();
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetFaceVertices$gd__45_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetFaceVertices$gd__ = this;
    } else {
      $lGetFaceVertices$gd__ = new $thisType(0);
      $lGetFaceVertices$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetFaceVertices$gd__.fHandle = (this.$l$g3__fHandle | 0);
    return $lGetFaceVertices$gd__;
  }; 

  function $lGetFaceVertices$gd__45_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceVertices$gd__45_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator();
  }; 

  function $lGetFaceVertices$gd__45_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceVertices$gd__45_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetFaceVertices$gd__45_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 2)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetFaceVertices>d__45", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetFaceVertices$gd__45__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetFaceVertices$gd__45_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetFaceVertices$gd__45_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Vertex$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      $lGetFaceVertices$gd__45_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      $lGetFaceVertices$gd__45_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetFaceVertices$gd__45_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetFaceVertices$gd__45_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetFaceVertices$gd__45_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetFaceVertices$gd__45_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lface$g5__1", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$linnerComponents$g5__2", $asm0F.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "$lfistHalfEdgeHandle$g5__3", $.Int32);

    $.Field({Static:false, Public:false}, "$lhalfEdgeOuter$g5__4", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$loriginVert$g5__5", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gs__6", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.Int32]));

    $.Field({Static:false, Public:false}, "$lcomp$g5__7", $.Int32);

    $.Field({Static:false, Public:false}, "$lhalfEdgeInner$g5__8", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$loriginVert$g5__9", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.Current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetFaceOuterVertices>d__46 */ 

(function $lGetFaceOuterVertices$gd__46$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };


  function $lGetFaceOuterVertices$gd__46__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetFaceOuterVertices$gd__46_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      if (num !== 1) {
        return false;
      }
      this.$l$g1__state = -1;
      this.$lhalfEdgeOuter$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lhalfEdgeOuter$g5__2.NextHalfEdge).MemberwiseClone();
      if ((this.$lhalfEdgeOuter$g5__2.Handle | 0) === (this.$lfistHalfEdgeHandle$g5__1 | 0)) {
        return false;
      }
    } else {
      this.$l$g1__state = -1;
      this.$lfistHalfEdgeHandle$g5__1 = ((this.$l$g4__this).GetFaceByHandle(this.fHandle).OuterHalfEdge | 0);
      this.$lhalfEdgeOuter$g5__2 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lfistHalfEdgeHandle$g5__1).MemberwiseClone();
    }
    this.$loriginVert$g5__3 = (this.$lhalfEdgeOuter$g5__2.OriginVertex | 0);
    this.$l$g2__current = (this.$l$g4__this).GetVertexByHandle(this.$loriginVert$g5__3).MemberwiseClone();
    this.$l$g1__state = 1;
    return true;
  }; 

  function $lGetFaceOuterVertices$gd__46_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetFaceOuterVertices$gd__ = this;
    } else {
      $lGetFaceOuterVertices$gd__ = new $thisType(0);
      $lGetFaceOuterVertices$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetFaceOuterVertices$gd__.fHandle = (this.$l$g3__fHandle | 0);
    return $lGetFaceOuterVertices$gd__;
  }; 

  function $lGetFaceOuterVertices$gd__46_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator();
  }; 

  function $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetFaceOuterVertices$gd__46_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetFaceOuterVertices>d__46", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetFaceOuterVertices$gd__46__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetFaceOuterVertices$gd__46_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.Vertex$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])), 
      $lGetFaceOuterVertices$gd__46_System_Collections_Generic_IEnumerable$lFusee_Jometri_Vertex$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.Vertex")), 
      $lGetFaceOuterVertices$gd__46_System_Collections_Generic_IEnumerator$lFusee_Jometri_Vertex$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetFaceOuterVertices$gd__46_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetFaceOuterVertices$gd__46_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lfistHalfEdgeHandle$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lhalfEdgeOuter$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$loriginVert$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.Vertex$g.Current", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<GetFaceHalfEdges>d__47 */ 

(function $lGetFaceHalfEdges$gd__47$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm0F.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1_Enumerator.Of($asm0F.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function $lGetFaceHalfEdges$gd__47__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetFaceHalfEdges$gd__47_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__4, null);
  }; 

  function $lGetFaceHalfEdges$gd__47_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$lface$g5__1 = (this.$l$g4__this).GetFaceByHandle(this.fHandle).MemberwiseClone();
                this.$lfirstHandle$g5__2 = (this.$lface$g5__1.OuterHalfEdge | 0);
                this.$lcurrent$g5__3 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lface$g5__1.OuterHalfEdge).MemberwiseClone();
                break;

              case 1: 
                this.$l$g1__state = -1;
                this.$lcurrent$g5__3 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrent$g5__3.NextHalfEdge).MemberwiseClone();
                if ((this.$lfirstHandle$g5__2 | 0) === (this.$lcurrent$g5__3.Handle | 0)) {
                  this.$l$gs__4 = $T05().prototype.GetEnumerator.call(this.$lface$g5__1.InnerHalfEdges);
                  this.$l$g1__state = -3;
                  $label0 = 2 /* goto IL_1A4 */ ;
                  continue $labelgroup0;
                }
                break;

              case 2: 
                this.$l$g1__state = -3;
                this.$lcur$g5__6 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcur$g5__6.NextHalfEdge).MemberwiseClone();
                if ((this.$lhe$g5__5 | 0) === (this.$lcur$g5__6.Handle | 0)) {
                  this.$lcur$g5__6 = new ($T06())();
                  $label0 = 2 /* goto IL_1A4 */ ;
                  continue $labelgroup0;
                }
                $label0 = 1 /* goto IL_130 */ ;
                continue $labelgroup0;

              default: 
                var result = false;
                return result;

            }
            this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcurrent$g5__3.Handle).MemberwiseClone();
            this.$l$g1__state = 1;
            result = true;
            return result;

            $label0 = 1 /* goto IL_130 */ ;
            continue $labelgroup0;
          case 1: /* IL_130 */ 
            this.$l$g2__current = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lcur$g5__6.Handle).MemberwiseClone();
            this.$l$g1__state = 2;
            result = true;
            return result;

            $label0 = 2 /* goto IL_1A4 */ ;
            continue $labelgroup0;
          case 2: /* IL_1A4 */ 
            if ($T08().prototype.MoveNext.call(this.$l$gs__4)) {
              this.$lhe$g5__5 = ($T08().prototype.get_Current.call(this.$l$gs__4) | 0);
              this.$lcur$g5__6 = (this.$l$g4__this).GetHalfEdgeByHandle(this.$lhe$g5__5).MemberwiseClone();
              $label0 = 1 /* goto IL_130 */ ;
              continue $labelgroup0;
            }
            this.$l$gm__Finally1();
            this.$l$gs__4 = new ($T08())();
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetFaceHalfEdges$gd__47_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetFaceHalfEdges$gd__ = this;
    } else {
      $lGetFaceHalfEdges$gd__ = new $thisType(0);
      $lGetFaceHalfEdges$gd__.$l$g4__this = this.$l$g4__this;
    }
    $lGetFaceHalfEdges$gd__.fHandle = (this.$l$g3__fHandle | 0);
    return $lGetFaceHalfEdges$gd__;
  }; 

  function $lGetFaceHalfEdges$gd__47_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetFaceHalfEdges$gd__47_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 2)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<GetFaceHalfEdges>d__47", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetFaceHalfEdges$gd__47__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetFaceHalfEdges$gd__47_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetFaceHalfEdges$gd__47_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetFaceHalfEdges$gd__47_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetFaceHalfEdges$gd__47_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetFaceHalfEdges$gd__47_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetFaceHalfEdges$gd__47_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__fHandle", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "$lface$g5__1", $asm09.TypeRef("Fusee.Jometri.Face"));

    $.Field({Static:false, Public:false}, "$lfirstHandle$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lcurrent$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gs__4", $asm0F.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.Int32]));

    $.Field({Static:false, Public:false}, "$lhe$g5__5", $.Int32);

    $.Field({Static:false, Public:false}, "$lcur$g5__6", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<>c__DisplayClass55_0 */ 

(function $l$gc__DisplayClass55_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Func$b2.Of($asm09.Fusee.Jometri.HalfEdge, $asm0F.System.Boolean))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0F.TypeRef("System.Func`2", ["!!0", $asm0F.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm09.Fusee.Jometri.HalfEdge]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm09.Fusee.Jometri.HalfEdge]))) ();
  };


  function $l$gc__DisplayClass55_0__ctor () {
  }; 

  function $l$gc__DisplayClass55_0_$lGetFaceToInsertDiag$gb__0 (x) {
    var $closure0 = new ($T01())();
    $closure0.x = x.MemberwiseClone();
    return $S00().CallStatic($T02(), "Any$b1", [$asm09.Fusee.Jometri.HalfEdge], this.heStartingAtP, $T03().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_1, "$lGetFaceToInsertDiag$gb__2", $S01(), false, false)));
  }; 

  function $l$gc__DisplayClass55_0_$lGetFaceToInsertDiag$gb__1 (x) {
    var $closure0 = new ($T04())();
    $closure0.x = x.MemberwiseClone();
    return $S00().CallStatic($T02(), "Any$b1", [$asm09.Fusee.Jometri.HalfEdge], this.heStartingAtQ, $T03().New($closure0, null, new JSIL.MethodPointerInfo($asm09.Fusee.Jometri.Geometry_$l$gc__DisplayClass55_2, "$lGetFaceToInsertDiag$gb__3", $S02(), false, false)));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<>c__DisplayClass55_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass55_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lGetFaceToInsertDiag$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      $l$gc__DisplayClass55_0_$lGetFaceToInsertDiag$gb__0
    );

    $.Method({Static:false, Public:false}, "$lGetFaceToInsertDiag$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      $l$gc__DisplayClass55_0_$lGetFaceToInsertDiag$gb__1
    );

    $.Field({Static:false, Public:true }, "heStartingAtP", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:true }, "heStartingAtQ", $asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<>c__DisplayClass55_1 */ 

(function $l$gc__DisplayClass55_1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };


  function $l$gc__DisplayClass55_1__ctor () {
  }; 

  function $l$gc__DisplayClass55_1_$lGetFaceToInsertDiag$gb__2 (z) {
    return ((z.IncidentFace | 0) === (this.x.IncidentFace | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<>c__DisplayClass55_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass55_1__ctor
    );

    $.Method({Static:false, Public:false}, "$lGetFaceToInsertDiag$gb__2", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      $l$gc__DisplayClass55_1_$lGetFaceToInsertDiag$gb__2
    );

    $.Field({Static:false, Public:true }, "x", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.Geometry+<>c__DisplayClass55_2 */ 

(function $l$gc__DisplayClass55_2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };


  function $l$gc__DisplayClass55_2__ctor () {
  }; 

  function $l$gc__DisplayClass55_2_$lGetFaceToInsertDiag$gb__3 (z) {
    return ((z.IncidentFace | 0) === (this.x.IncidentFace | 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.Geometry+<>c__DisplayClass55_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass55_2__ctor
    );

    $.Method({Static:false, Public:false}, "$lGetFaceToInsertDiag$gb__3", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      $l$gc__DisplayClass55_2_$lGetFaceToInsertDiag$gb__3
    );

    $.Field({Static:false, Public:true }, "x", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Jometri.VertexType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Jometri.VertexType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    START_VERTEX: 0, 
    END_VERTEX: 1, 
    SPLIT_VERTEX: 2, 
    MERGE_VERTEX: 3, 
    REGULAR_VERTEX: 4, 
  }
);

/* class Fusee.Jometri.GeometricOperations */ 

(function GeometricOperations$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.Fusee.Jometri.GeometricOperations_$lGetHalfEdgesWChangedWinding$gd__7)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1.Of($asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.Fusee.Jometri.Face)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0A.Fusee.Math.Core.float3))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm15.System.Linq.Enumerable)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Fusee.Math.Core.float3x3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3, $asm0F.System.Single]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3, $asm0A.Fusee.Math.Core.float3x3]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0A.Fusee.Math.Core.float3, [$asm0A.Fusee.Math.Core.float3x3, $asm0A.Fusee.Math.Core.float3]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Double, [$asm0F.System.Double, $asm0F.System.Int32]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm09.Fusee.Jometri.Vertex).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm09.Fusee.Jometri.Vertex).get_Item)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1.Of($asm0A.Fusee.Math.Core.float3).get_Count)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.Generic.IList$b1.Of($asm0A.Fusee.Math.Core.float3).get_Item)) ();
  };


  function GeometricOperations_CalculateFaceNormal (faceOuterVertices) {
    var normal = new ($T01())();

    for (var i = 0; i < ($IM00().Call(faceOuterVertices, null) | 0); i = ((i + 1) | 0)) {
      var vCur = $IM01().Call(faceOuterVertices, null, i).VertData.Pos;
      var vNext = $IM01().Call(faceOuterVertices, null, ((((i + 1) | 0) % ($IM00().Call(faceOuterVertices, null) | 0)) | 0)).VertData.Pos;
      normal.x = +normal.x + ((+vCur.y - +vNext.y) * (+vCur.z + +vNext.z));
      normal.y = +normal.y + ((+vCur.z - +vNext.z) * (+vCur.x + +vNext.x));
      normal.z = +normal.z + ((+vCur.x - +vNext.x) * (+vCur.y + +vNext.y));
    }
    normal = $S00().CallStatic($T01(), "op_Multiply", null, normal.MemberwiseClone(), -1);
    normal.Normalize();
    return normal;
  }; 

  function GeometricOperations_GetHalfEdgesWChangedWinding (geometry, originHEdges) {
    var expr_07 = new ($T06())(-2);
    expr_07.$l$g3__geometry = geometry;
    expr_07.$l$g3__originHEdges = originHEdges;
    return expr_07;
  }; 

  function GeometricOperations_GetVerticesMeanPos (vertices) {
    var $temp00;
    var centroid = new ($T01())();

    for (var a$0 = vertices._items, i$0 = 0, l$0 = (vertices._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vertex = a$0[i$0];
      centroid = $T01().op_Addition(centroid.MemberwiseClone(), vertex.VertData.Pos);
    }
    centroid = $T01().op_Division(centroid.MemberwiseClone(), +(vertices.get_Count())).MemberwiseClone();
    return centroid;
  }; 

  function GeometricOperations_IsAngleGreaterOrEqualPi (geom, face, v1, v2, v3) {
    var v1Pos = geom.Get2DVertPos(face.MemberwiseClone(), v1.Handle).MemberwiseClone();
    var v2Pos = geom.Get2DVertPos(face.MemberwiseClone(), v2.Handle);
    var v3Pos = geom.Get2DVertPos(face.MemberwiseClone(), v3.Handle).MemberwiseClone();
    var firstVec = $T01().op_Subtraction(v1Pos.MemberwiseClone(), v2Pos);
    var secondVec = $T01().op_Subtraction(v3Pos.MemberwiseClone(), v2Pos);
    var cross = (+firstVec.x * +secondVec.y) - (+firstVec.y * +secondVec.x);
    var dot = +$T01().Dot(firstVec, secondVec);
    var angle = Math.fround(Math.atan2(cross, dot));
    return (angle <= 0);
  }; 

  function GeometricOperations_IsAngleGreaterPi (geom, face, v1, v2, v3) {
    var v1Pos = geom.Get2DVertPos(face.MemberwiseClone(), v1.Handle).MemberwiseClone();
    var v2Pos = geom.Get2DVertPos(face.MemberwiseClone(), v2.Handle);
    var v3Pos = geom.Get2DVertPos(face.MemberwiseClone(), v3.Handle).MemberwiseClone();
    var firstVec = $T01().op_Subtraction(v1Pos.MemberwiseClone(), v2Pos);
    var secondVec = $T01().op_Subtraction(v3Pos.MemberwiseClone(), v2Pos);
    var det = (+firstVec.x * +secondVec.y) - (+firstVec.y * +secondVec.x);
    var dot = +$T01().Dot(firstVec, secondVec);
    var angle = Math.fround(Math.atan2(det, dot));
    var flag = (((angle * -1) === 3.14159274));
    return (!flag && (angle < 0));
  }; 

  function GeometricOperations_IsCounterClockwise (source) {
    var sum = 0;

    for (var i = 0; i < ($IM02().Call(source, null) | 0); i = ((i + 1) | 0)) {
      var current = $IM03().Call(source, null, i);
      var next = $IM03().Call(source, null, ((((i + 1) | 0) % ($IM02().Call(source, null) | 0)) | 0));
      sum += (+next.x - +current.x) * (+next.y + +current.y);
    }
    return (sum < 0);
  }; 

  function GeometricOperations_IsLineIntersectingLine (p1, p2, p3, p4) {
    var a = $T01().op_Subtraction(p2.MemberwiseClone(), p1);
    var b = $T01().op_Subtraction(p3.MemberwiseClone(), p4);
    var c = $T01().op_Subtraction(p1.MemberwiseClone(), p3);
    var tNumerator = (+b.y * +b.x) - (+b.x * +c.y);
    var iNumerator = (+a.x * +c.y) - (+a.y * +c.x);
    var denominator = (+a.y * +b.x) - (+a.x * +b.y);
    var flag = denominator > 0;
    if (flag) {
      var flag2 = (tNumerator < 0) || 
      (tNumerator > denominator);
      if (flag2) {
        var result = false;
        return result;
      }
    } else {
      var flag3 = (tNumerator > 0) || 
      (tNumerator < denominator);
      if (flag3) {
        result = false;
        return result;
      }
    }
    var flag4 = denominator > 0;
    if (flag4) {
      var flag5 = (iNumerator < 0) || 
      (iNumerator > denominator);
      if (flag5) {
        result = false;
        return result;
      }
    } else {
      var flag6 = (iNumerator > 0) || 
      (iNumerator < denominator);
      if (flag6) {
        result = false;
        return result;
      }
    }
    result = true;
    return result;
  }; 

  function GeometricOperations_IsPointInPolygon$00 (geometry, face, v) {
    var $temp00;
    var inside = false;
    var faceVerts = $T10().ToList$b1($T08())(geometry.GetFaceVertices(face.Handle));
    var vPos = geometry.Get2DVertPos(face.MemberwiseClone(), v.Handle);
    var v2 = geometry.GetVertexByHandle($S01().CallStatic($T10(), "Last$b1", [$asm09.Fusee.Jometri.Vertex], faceVerts).Handle).MemberwiseClone();
    var v1Pos = geometry.Get2DVertPos(face.MemberwiseClone(), v2.Handle).MemberwiseClone();
    var y0 = +v1Pos.y >= +vPos.y;

    for (var a$0 = faceVerts._items, i$0 = 0, l$0 = (faceVerts._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vert = a$0[i$0].MemberwiseClone();
      var e1Pos = geometry.Get2DVertPos(face.MemberwiseClone(), vert.Handle);
      var y = +e1Pos.y >= +vPos.y;
      var flag = y0 !== y;
      if (flag) {
        var flag2 = (((+e1Pos.y - +vPos.y) * (+v1Pos.x - +e1Pos.x)) >= ((+e1Pos.x - +vPos.x) * (+v1Pos.y - +e1Pos.y))) === y;
        if (flag2) {
          inside = !inside;
        }
      }
      y0 = y;
      v1Pos = e1Pos;
    }
    return inside;
  }; 

  function GeometricOperations_IsPointInPolygon$01 (geometry, face, v) {
    var $temp00;
    var inside = false;
    var faceVerts = $T10().ToList$b1($T08())(geometry.GetFaceVertices(face.Handle));
    var v2 = geometry.GetVertexByHandle($S01().CallStatic($T10(), "Last$b1", [$asm09.Fusee.Jometri.Vertex], faceVerts).Handle).MemberwiseClone();
    var v1Pos = geometry.Get2DVertPos(face.MemberwiseClone(), v2.Handle).MemberwiseClone();
    var y0 = +v1Pos.y >= +v.y;

    for (var a$0 = faceVerts._items, i$0 = 0, l$0 = (faceVerts._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var vert = a$0[i$0].MemberwiseClone();
      var e1Pos = geometry.Get2DVertPos(face.MemberwiseClone(), vert.Handle);
      var y = +e1Pos.y >= +v.y;
      var flag = y0 !== y;
      if (flag) {
        var flag2 = (((+e1Pos.y - +v.y) * (+v1Pos.x - +e1Pos.x)) >= ((+e1Pos.x - +v.x) * (+v1Pos.y - +e1Pos.y))) === y;
        if (flag2) {
          inside = !inside;
        }
      }
      y0 = y;
      v1Pos = e1Pos;
    }
    return inside;
  }; 

  function GeometricOperations_IsVertexAdjacentToVertex (geometry, p, q, vertPStartHe, vertQStartHe) {
    var nextHeP = geometry.GetHalfEdgeByHandle(vertPStartHe.NextHalfEdge);
    var nextHeQ = geometry.GetHalfEdgeByHandle(vertQStartHe.NextHalfEdge);
    return (((nextHeP.OriginVertex | 0) === (q | 0)) || ((nextHeQ.OriginVertex | 0) === (p | 0)));
  }; 

  function GeometricOperations_Reduce2D (vertPos, normal) {
    var rot = new ($T12())(), row = new ($T01())(), row2 = new ($T01())(), row3 = new ($T01())(), changeOfBasisMat = new ($T12())(), transposeMat = new ($T12())();
    normal.Normalize();
    var flag = $T01().op_Equality(normal.MemberwiseClone(), $T01().UnitZ.MemberwiseClone());
    if (flag) {
      (rot = rot.MemberwiseClone(), 
        $T12().prototype._ctor.call(rot, 
          -1, 
          0, 
          0, 
          0, 
          1, 
          0, 
          0, 
          0, 
          1
        ));
      var result = $S02().CallStatic($T12(), "op_Multiply", null, vertPos, rot);
    } else {
      var flag2 = $T01().op_Equality(normal.MemberwiseClone(), $S00().CallStatic($T01(), "op_Multiply", null, $T01().UnitZ.MemberwiseClone(), -1).MemberwiseClone());
      if (flag2) {
        result = vertPos.MemberwiseClone();
      } else {
        var v2 = $T01().Cross(normal.MemberwiseClone(), $T01().UnitZ.MemberwiseClone()).MemberwiseClone();
        v2.Normalize();
        var v3 = $T01().Cross(normal.MemberwiseClone(), v2.MemberwiseClone()).MemberwiseClone();
        v3.Normalize();
        (row = row.MemberwiseClone(), 
          $T01().prototype._ctor.call(row, v3.x, v2.x, normal.x));
        (row2 = row2.MemberwiseClone(), 
          $T01().prototype._ctor.call(row2, v3.y, v2.y, normal.y));
        (row3 = row3.MemberwiseClone(), 
          $T01().prototype._ctor.call(row3, v3.z, v2.z, normal.z));
        (changeOfBasisMat = changeOfBasisMat.MemberwiseClone(), 
          $T12().prototype._ctor.call(changeOfBasisMat, row.MemberwiseClone(), row2.MemberwiseClone(), row3.MemberwiseClone()));
        (transposeMat = transposeMat.MemberwiseClone(), 
          $T12().prototype._ctor.call(transposeMat, changeOfBasisMat.Row0.MemberwiseClone(), changeOfBasisMat.Row1.MemberwiseClone(), changeOfBasisMat.Row2.MemberwiseClone()));
        transposeMat.Transpose();
        var newVert = $S03().CallStatic($T12(), "op_Multiply", null, transposeMat, vertPos);
        var vecX = +$S04().CallStatic($T0B(), "Round", null, newVert.x, 5);
        var vecY = +$S04().CallStatic($T0B(), "Round", null, newVert.y, 5);
        var vecZ = +$S04().CallStatic($T0B(), "Round", null, newVert.z, 5);
        (newVert = newVert.MemberwiseClone(), 
          $T01().prototype._ctor.call(newVert, Math.fround(vecX), Math.fround(vecY), Math.fround(vecZ)));
        result = newVert;
      }
    }
    return result;
  }; 

  JSIL.MakeStaticClass("Fusee.Jometri.GeometricOperations", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CalculateFaceNormal", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])]), 
      GeometricOperations_CalculateFaceNormal
    );

    $.Method({Static:true , Public:true }, "GetHalfEdgesWChangedWinding", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), [$asm09.TypeRef("Fusee.Jometri.Geometry"), $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])]), 
      GeometricOperations_GetHalfEdgesWChangedWinding
    );

    $.Method({Static:true , Public:true }, "GetVerticesMeanPos", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$asm0F.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Jometri.Vertex")])]), 
      GeometricOperations_GetVerticesMeanPos
    );

    $.Method({Static:true , Public:true }, "IsAngleGreaterOrEqualPi", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      GeometricOperations_IsAngleGreaterOrEqualPi
    );

    $.Method({Static:true , Public:true }, "IsAngleGreaterPi", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex"), $asm09.TypeRef("Fusee.Jometri.Vertex"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      GeometricOperations_IsAngleGreaterPi
    );

    $.Method({Static:true , Public:true }, "IsCounterClockwise", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("Fusee.Math.Core.float3")])]), 
      GeometricOperations_IsCounterClockwise
    );

    $.Method({Static:true , Public:true }, "IsLineIntersectingLine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      GeometricOperations_IsLineIntersectingLine
    );

    $.Method({Static:true , Public:true }, "IsPointInPolygon", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm09.TypeRef("Fusee.Jometri.Vertex")
        ]), 
      GeometricOperations_IsPointInPolygon$00
    );

    $.Method({Static:true , Public:true }, "IsPointInPolygon", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $asm09.TypeRef("Fusee.Jometri.Face"), 
          $asm0A.TypeRef("Fusee.Math.Core.float3")
        ]), 
      GeometricOperations_IsPointInPolygon$01
    );

    $.Method({Static:true , Public:true }, "IsVertexAdjacentToVertex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Fusee.Jometri.Geometry"), $.Int32, 
          $.Int32, $asm09.TypeRef("Fusee.Jometri.HalfEdge"), 
          $asm09.TypeRef("Fusee.Jometri.HalfEdge")
        ]), 
      GeometricOperations_IsVertexAdjacentToVertex
    );

    $.Method({Static:true , Public:false}, "Reduce2D", 
      new JSIL.MethodSignature($asm0A.TypeRef("Fusee.Math.Core.float3"), [$asm0A.TypeRef("Fusee.Math.Core.float3"), $asm0A.TypeRef("Fusee.Math.Core.float3")]), 
      GeometricOperations_Reduce2D
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Jometri.GeometricOperations+<GetHalfEdgesWChangedWinding>d__7 */ 

(function $lGetHalfEdgesWChangedWinding$gd__7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.Int32, $asm09.Fusee.Jometri.Vertex))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.Fusee.Jometri.Geometry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.Fusee.Jometri.HalfEdge)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.Fusee.Jometri.Vertex)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Jometri.HalfEdge).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerator$b1.Of($asm09.Fusee.Jometri.HalfEdge).get_Current)) ();
  };


  function $lGetHalfEdgesWChangedWinding$gd__7__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    if (this.$l$gs__1 !== null) {
      $IM00().Call(this.$l$gs__1, null);
    }
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lvertToUpdate$g5__7 = (this.geometry.Geometry$DictVertices$value).get_Item(this.$lnewOrigin$g5__6).MemberwiseClone();
        this.$lvertToUpdate$g5__7.IncidentHalfEdge = (this.$lhe$g5__3.Handle | 0);
        (this.geometry.Geometry$DictVertices$value).set_Item(this.$lnewOrigin$g5__6, this.$lvertToUpdate$g5__7.MemberwiseClone());
        this.$lhe$g5__3 = new ($T08())();
        this.$lvertToUpdate$g5__7 = new ($T09())();
        this.$lhEdge$g5__2 = new ($T08())();
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = $IM01().Call(this.originHEdges, null);
        this.$l$g1__state = -3;
      }
      if (!$IM02().Call(this.$l$gs__1, null)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = null;
        result = false;
      } else {
        this.$lhEdge$g5__2 = $IM03().Call(this.$l$gs__1, null).MemberwiseClone();
        this.$lhe$g5__3 = this.$lhEdge$g5__2.MemberwiseClone();
        this.$lnext$g5__4 = (this.$lhe$g5__3.PrevHalfEdge | 0);
        this.$lprev$g5__5 = (this.$lhe$g5__3.NextHalfEdge | 0);
        this.$lhe$g5__3.NextHalfEdge = (this.$lnext$g5__4 | 0);
        this.$lhe$g5__3.PrevHalfEdge = (this.$lprev$g5__5 | 0);
        this.$lnewOrigin$g5__6 = ((this.geometry).GetHalfEdgeByHandle(this.$lhe$g5__3.PrevHalfEdge).OriginVertex | 0);
        this.$lhe$g5__3.OriginVertex = (this.$lnewOrigin$g5__6 | 0);
        this.$l$g2__current = this.$lhe$g5__3.MemberwiseClone();
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetHalfEdgesWChangedWinding$gd__ = this;
    } else {
      $lGetHalfEdgesWChangedWinding$gd__ = new $thisType(0);
    }
    $lGetHalfEdgesWChangedWinding$gd__.geometry = this.$l$g3__geometry;
    $lGetHalfEdgesWChangedWinding$gd__.originHEdges = this.$l$g3__originHEdges;
    return $lGetHalfEdgesWChangedWinding$gd__;
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator();
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetHalfEdgesWChangedWinding$gd__7_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "Fusee.Jometri.GeometricOperations+<GetHalfEdgesWChangedWinding>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetHalfEdgesWChangedWinding$gd__7__ctor
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgesWChangedWinding$gd__7_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetHalfEdgesWChangedWinding$gd__7_MoveNext
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Jometri.HalfEdge$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")])), 
      $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_Generic_IEnumerable$lFusee_Jometri_HalfEdge$g_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.get_Current", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Jometri.HalfEdge")), 
      $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_Generic_IEnumerator$lFusee_Jometri_HalfEdge$g_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgesWChangedWinding$gd__7_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetHalfEdgesWChangedWinding$gd__7_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:true }, "$l$g3__geometry", $asm09.TypeRef("Fusee.Jometri.Geometry"));

    $.Field({Static:false, Public:false}, "originHEdges", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:true }, "$l$g3__originHEdges", $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]));

    $.Field({Static:false, Public:false}, "$lhEdge$g5__2", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lhe$g5__3", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Field({Static:false, Public:false}, "$lnext$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$lprev$g5__5", $.Int32);

    $.Field({Static:false, Public:false}, "$lnewOrigin$g5__6", $.Int32);

    $.Field({Static:false, Public:false}, "$lvertToUpdate$g5__7", $asm09.TypeRef("Fusee.Jometri.Vertex"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Jometri.HalfEdge$g.Current", $asm09.TypeRef("Fusee.Jometri.HalfEdge"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 1 */ $asm0F.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm0F.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("Fusee.Jometri.HalfEdge")]), 
      /* 3 */ $asm0F.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

