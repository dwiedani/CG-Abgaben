/* Generated by JSIL v0.8.2 build 31050. See http://jsil.org/ for more information. */ 
'use strict';
var $asm11 = JSIL.DeclareAssembly("protobuf-net, Version=2.0.0.668, Culture=neutral, PublicKeyToken=257b51d87d2e4d67");

JSIL.DeclareNamespace("ProtoBuf");
/* enum ProtoBuf.TimeSpanScale */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.TimeSpanScale", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Days: 0, 
    Hours: 1, 
    Minutes: 2, 
    Seconds: 3, 
    Milliseconds: 4, 
    Ticks: 5, 
    MinMax: 15, 
  }
);

/* class ProtoBuf.BclHelpers */ 

(function BclHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm11.ProtoBuf.ProtoReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.UInt64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm11.ProtoBuf.SubItemToken)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Decimal)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Guid)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Int16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm11.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm11.ProtoBuf.NetObjectCache)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm11.ProtoBuf.ProtoException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Reflection.MemberInfo)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.TimeSpan)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm11.ProtoBuf.TimeSpanScale)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm11.ProtoBuf.WireType)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm11.ProtoBuf.ProtoWriter)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm0F.System.Int32))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.DateTime, [
        $asm0F.System.Int32, $asm0F.System.Int32, 
        $asm0F.System.Int32, $asm0F.System.Int32, 
        $asm0F.System.Int32, $asm0F.System.Int32, 
        $asm0F.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Decimal, [
        $asm0F.System.Int32, $asm0F.System.Int32, 
        $asm0F.System.Int32, $asm0F.System.Boolean, 
        $asm0F.System.Byte
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Guid, [
        $asm0F.System.Int32, $asm0F.System.Int16, 
        $asm0F.System.Int16, $asm0F.System.Byte, 
        $asm0F.System.Byte, $asm0F.System.Byte, 
        $asm0F.System.Byte, $asm0F.System.Byte, 
        $asm0F.System.Byte, $asm0F.System.Byte, 
        $asm0F.System.Byte
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.ProtoException, [$asm0F.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.TimeSpan, [$asm0F.System.DateTime, $asm0F.System.DateTime]))) ();
  };


  function BclHelpers_ReadDateTime (source) {
    var num = $thisType.ReadTimeSpanTicks(source);
    if ($T02().op_Equality(num, $T02().Create(0, 0, 32768))) {
      var result = $T00().MinValue.MemberwiseClone();
    } else {
      if ($T02().op_Equality(num, $T02().Create(16777215, 16777215, 32767))) {
        result = $T00().MaxValue.MemberwiseClone();
      } else {
        result = $thisType.EpochOrigin.MemberwiseClone().AddTicks(num).MemberwiseClone();
      }
    }
    return result;
  }; 

  function BclHelpers_ReadDecimal (reader) {
    var num4 = 0;
    var num = $T04().Create(0, 0, 0);
    var num2 = 0;
    var num3 = 0;
    var token = $T01().StartSubItem(reader);

    while ((num4 = (reader.ReadFieldHeader() | 0)) > 0) {
      switch (num4) {
        case 1: 
          num = reader.ReadUInt64();
          break;

        case 2: 
          num2 = (reader.ReadUInt32() >>> 0);
          break;

        case 3: 
          num3 = (reader.ReadUInt32() >>> 0);
          break;

        default: 
          reader.SkipField();
          break;

      }
    }
    $T01().EndSubItem(token, reader);
    var flag = !$T04().op_Inequality(num, $T04().Create(0, 0, 0)) && 
    (num2 === 0);
    if (flag) {
      var result = $T08().Zero;
    } else {
      var lo = (($T04().op_BitwiseAnd(num, $T04().FromNumber(-1))).ToNumber(4294967295, true) | 0);
      var mid = (($T04().op_BitwiseAnd(
          $T04().op_RightShift(num, (32 >>> 0)), 
          $T04().FromNumber(-1)
        )).ToNumber(4294967295, true) | 0);
      var hi = (num2 | 0);
      var isNegative = (num3 & 1) === 1;
      var scale = ((num3 & 510) >>> (1 >>> 0) & 0xFF);
      result = $S01().Construct(lo, mid, hi, isNegative, scale);
    }
    return result;
  }; 

  function BclHelpers_ReadGuid (source) {
    var num3 = 0;
    var num = $T04().Create(0, 0, 0);
    var num2 = $T04().Create(0, 0, 0);
    var token = $T01().StartSubItem(source);

    while ((num3 = (source.ReadFieldHeader() | 0)) > 0) {
      var num4 = num3;
      if (num4 !== 1) {
        if (num4 !== 2) {
          source.SkipField();
        } else {
          num2 = source.ReadUInt64();
        }
      } else {
        num = source.ReadUInt64();
      }
    }
    $T01().EndSubItem(token, source);
    var flag = !$T04().op_Inequality(num, $T04().Create(0, 0, 0)) && 
    $T04().op_Equality(num2, $T04().Create(0, 0, 0));
    if (flag) {
      var result = $T0A().Empty.MemberwiseClone();
    } else {
      var num5 = (($T04().op_RightShift(num, (32 >>> 0))).ToNumber(4294967295, false) >>> 0);
      var a = (num.ToNumber(4294967295, false) >>> 0);
      var num6 = (($T04().op_RightShift(num2, (32 >>> 0))).ToNumber(4294967295, false) >>> 0);
      var num7 = (num2.ToNumber(4294967295, false) >>> 0);
      result = $S02().Construct((a | 0), ((num5 + 0x8000 & 0xFFFF) - 0x8000), ((num5 >>> (16 >>> 0) + 0x8000 & 0xFFFF) - 0x8000), (num7 & 0xFF), (num7 >>> (8 >>> 0) & 0xFF), (num7 >>> (16 >>> 0) & 0xFF), (num7 >>> (24 >>> 0) & 0xFF), (num6 & 0xFF), (num6 >>> (8 >>> 0) & 0xFF), (num6 >>> (16 >>> 0) & 0xFF), (num6 >>> (24 >>> 0) & 0xFF));
    }
    return result;
  }; 

  function BclHelpers_ReadNetObject (value, source, key, $type, options) {
    var type = new JSIL.BoxedVariable($type);
    var num3 = 0;
    var token = $T01().StartSubItem(source);
    var num = -1;
    var num2 = -1;

  $loop0: 
    while ((num3 = (source.ReadFieldHeader() | 0)) > 0) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (num3) {
              case 1: 
                var key2 = (source.ReadInt32() | 0);
                value = (source.get_NetCache()).GetKeyedObject(key2);
                break;

              case 2: 
                num = (source.ReadInt32() | 0);
                break;

              case 3: 
                key2 = (source.ReadInt32() | 0);
                type.set($T0D().$Cast((source.get_NetCache()).GetKeyedObject(key2)));
                key = (source.GetTypeKey(/* ref */ type) | 0);
                break;

              case 4: 
                num2 = (source.ReadInt32() | 0);
                break;

              case 5: 
              case 6: 
              case 7: 
              case 9: 
                $label0 = 1 /* goto IL_27E */ ;
                continue $labelgroup0;

              case 8: 
                var text = source.ReadString();
                type.set(source.DeserializeType(text));
                var flag = type.get() === null;
                if (flag) {
                  throw $S03().Construct(("Unable to resolve type: " + text + " (you can use the TypeModel.DynamicTypeFormatting event to provide a custom mapping)"));
                }
                var flag2 = type.get() === $T10().__Type__;
                if (flag2) {
                  key = -1;
                } else {
                  key = (source.GetTypeKey(/* ref */ type) | 0);
                  var flag3 = (key | 0) < 0;
                  if (flag3) {
                    throw $S04().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
                  }
                }
                break;

              case 10: 
                var flag4 = type.get() === $T10().__Type__;
                var flag5 = value === null;
                var flag6 = flag5 && 
                (flag4 || 
                  ($T0E().$Cast(options & $T0E().LateSet) > $T0E().None));
                var flag7 = (num >= 0) && 
                !flag6;
                if (flag7) {
                  var flag8 = value === null;
                  if (flag8) {
                    source.TrapNextObject(num);
                  } else {
                    (source.get_NetCache()).SetKeyedObject(num, value);
                  }
                  var flag9 = num2 >= 0;
                  if (flag9) {
                    (source.get_NetCache()).SetKeyedObject(num2, type.get());
                  }
                }
                var obj = value;
                var flag10 = flag4;
                if (flag10) {
                  value = source.ReadString();
                } else {
                  value = $T01().ReadTypedObject(obj, key, source, type.get());
                }
                var flag11 = num >= 0;
                if (flag11) {
                  var flag12 = flag5 && 
                  !flag6;
                  if (flag12) {
                    obj = (source.get_NetCache()).GetKeyedObject(num);
                  }
                  var flag13 = flag6;
                  if (flag13) {
                    (source.get_NetCache()).SetKeyedObject(num, value);
                    var flag14 = num2 >= 0;
                    if (flag14) {
                      (source.get_NetCache()).SetKeyedObject(num2, type.get());
                    }
                  }
                }
                var flag15 = !((num < 0) || 
                  flag6) && 
                (obj !== value);
                if (flag15) {
                  throw $S03().Construct("A reference-tracked object changed reference during deserialization");
                }
                var flag16 = (num < 0) && 
                (num2 >= 0);
                if (flag16) {
                  (source.get_NetCache()).SetKeyedObject(num2, type.get());
                }
                break;

              default: 
                $label0 = 1 /* goto IL_27E */ ;
                continue $labelgroup0;

            }
            continue $loop0;

          case 1: /* IL_27E */ 
            source.SkipField();

            break $labelgroup0;
        }
      }
    }
    var flag17 = (num >= 0) && 
    ($T0E().$Cast(options & $T0E().AsReference) === $T0E().None);
    if (flag17) {
      throw $S03().Construct("Object key in input stream, but reference-tracking was not expected");
    }
    $T01().EndSubItem(token, source);
    return value;
  }; 

  function BclHelpers_ReadTimeSpan (source) {
    var num = $thisType.ReadTimeSpanTicks(source);
    if ($T02().op_Equality(num, $T02().Create(0, 0, 32768))) {
      var result = $T14().MinValue.MemberwiseClone();
    } else {
      if ($T02().op_Equality(num, $T02().Create(16777215, 16777215, 32767))) {
        result = $T14().MaxValue.MemberwiseClone();
      } else {
        result = $T14().FromTicks(num).MemberwiseClone();
      }
    }
    return result;
  }; 

  function BclHelpers_ReadTimeSpanTicks (source) {
    var num2 = 0;
    switch ((source.get_WireType()).valueOf()) {
      case 1: 
        var result = source.ReadInt64();
        break;

      case 2: 
      case 3: 
        var token = $T01().StartSubItem(source);
        var timeSpanScale = $T15().Days;
        var num = $T02().Create(0, 0, 0);

        while ((num2 = (source.ReadFieldHeader() | 0)) > 0) {
          var num3 = num2;
          if (num3 !== 1) {
            if (num3 !== 2) {
              source.SkipField();
            } else {
              timeSpanScale = $T15().$Cast(source.ReadInt32());
            }
          } else {
            source.Assert($T16().SignedVariant);
            num = source.ReadInt64();
          }
        }
        $T01().EndSubItem(token, source);
        var timeSpanScale2 = timeSpanScale;
        switch (timeSpanScale2.valueOf()) {
          case 0: 
            result = $T02().op_Multiplication(num, $T02().Create(6930432, 51498, 0));
            break;

          case 1: 
            result = $T02().op_Multiplication(num, $T02().Create(12871680, 2145, 0));
            break;

          case 2: 
            result = $T02().op_Multiplication(num, $T02().Create(12797440, 35, 0));
            break;

          case 3: 
            result = $T02().op_Multiplication(num, $T02().Create(10000000, 0, 0));
            break;

          case 4: 
            result = $T02().op_Multiplication(num, $T02().Create(10000, 0, 0));
            break;

          case 5: 
            result = num;
            break;

          default: 
            if (timeSpanScale2 !== $T15().MinMax) {
              throw $S03().Construct(JSIL.ConcatString("Unknown timescale: ", timeSpanScale.toString()));
            }
            var num4 = num;
            if (!$T02().op_Equality(num4, $T02().Create(16777215, 16777215, 65535))) {
              if (!$T02().op_Equality(num4, $T02().Create(1, 0, 0))) {
                throw $S03().Construct(JSIL.ConcatString("Unknown min/max value: ", (num).toString()));
              }
              result = $T02().Create(16777215, 16777215, 32767);
            } else {
              result = $T02().Create(0, 0, 32768);
            }
            break;

        }
        break;

      default: 
        throw $S03().Construct(JSIL.ConcatString("Unexpected wire-type: ", (source.get_WireType()).toString()));

    }
    return result;
  }; 

  function BclHelpers_WriteDateTime (value, dest) {
    var flag = dest === null;
    if (flag) {
      throw $S05().Construct("dest");
    }
    var wireType = dest.get_WireType();
    if (!((wireType === $T16().String) || (wireType === $T16().StartGroup))) {
      var timeSpan = $S06().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
    } else {
      var flag2 = $T00().op_Equality(value.MemberwiseClone(), $T00().MaxValue.MemberwiseClone());
      if (flag2) {
        timeSpan = $T14().MaxValue.MemberwiseClone();
      } else {
        var flag3 = $T00().op_Equality(value.MemberwiseClone(), $T00().MinValue.MemberwiseClone());
        if (flag3) {
          timeSpan = $T14().MinValue.MemberwiseClone();
        } else {
          timeSpan = $S06().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
        }
      }
    }
    $thisType.WriteTimeSpan(timeSpan.MemberwiseClone(), dest);
  }; 

  function BclHelpers_WriteDecimal (value, writer) {
    var bits = $T08().GetBits(value);
    var num = $T04().op_LeftShift(($T02().FromNumber(bits[1])).ToUInt64(), 32);
    var num2 = ($T02().op_BitwiseAnd(
        $T02().FromNumber(bits[0]), 
        ($T04().FromNumber(-1)).ToInt64()
      )).ToUInt64();
    var num3 = $T04().op_BitwiseOr(num, num2);
    var num4 = (bits[2] >>> 0);
    var num5 = ((((bits[3] | 0) >> 15) & 510) | (((bits[3] | 0) >> 31) & 1) >>> 0);
    var token = $T17().StartSubItem(null, writer);
    if ($T04().op_GreaterThan(num3, $T04().Create(0, 0, 0))) {
      $T17().WriteFieldHeader(1, $T16().Variant, writer);
      $T17().WriteUInt64(num3, writer);
    }
    if (num4 > 0) {
      $T17().WriteFieldHeader(2, $T16().Variant, writer);
      $T17().WriteUInt32(num4, writer);
    }
    if (num5 > 0) {
      $T17().WriteFieldHeader(3, $T16().Variant, writer);
      $T17().WriteUInt32(num5, writer);
    }
    $T17().EndSubItem(token, writer);
  }; 

  function BclHelpers_WriteGuid (value, dest) {
    var data = value.ToByteArray();
    var token = $T17().StartSubItem(null, dest);
    var flag = $T0A().op_Inequality(value.MemberwiseClone(), $T0A().Empty.MemberwiseClone());
    if (flag) {
      $T17().WriteFieldHeader(1, $T16().Fixed64, dest);
      $T17().WriteBytes(data, 0, 8, dest);
      $T17().WriteFieldHeader(2, $T16().Fixed64, dest);
      $T17().WriteBytes(data, 8, 8, dest);
    }
    $T17().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteNetObject (value, dest, key, options) {
    var flag6 = new JSIL.BoxedVariable(false);
    var flag12 = new JSIL.BoxedVariable(false);
    var flag = dest === null;
    if (flag) {
      throw $S05().Construct("dest");
    }
    var flag2 = $T0E().$Cast(options & $T0E().DynamicType) > $T0E().None;
    var flag3 = $T0E().$Cast(options & $T0E().AsReference) > $T0E().None;
    var wireType = dest.get_WireType();
    var token = $T17().StartSubItem(null, dest);
    var flag4 = true;
    var flag5 = flag3;
    if (flag5) {
      var value2 = ((dest.get_NetCache()).AddObjectKey(value, /* ref */ flag6) | 0);
      $T17().WriteFieldHeader((
          flag6.get()
             ? 1
             : 2)
        , $T16().Variant, dest);
      $T17().WriteInt32(value2, dest);
      var flag7 = flag6.get();
      if (flag7) {
        flag4 = false;
      }
    }
    var flag8 = flag4;
    var type = new JSIL.BoxedVariable(null);
    if (flag8) {
      var flag9 = flag2;
      if (flag9) {
        type.set(JSIL.GetType(value));
        var flag10 = !$T10().$Is(value);
        if (flag10) {
          key = (dest.GetTypeKey(/* ref */ type) | 0);
          var flag11 = (key | 0) < 0;
          if (flag11) {
            throw $S04().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
          }
        }
        var value3 = ((dest.get_NetCache()).AddObjectKey(type.get(), /* ref */ flag12) | 0);
        $T17().WriteFieldHeader((
            flag12.get()
               ? 3
               : 4)
          , $T16().Variant, dest);
        $T17().WriteInt32(value3, dest);
        var flag13 = !flag12.get();
        if (flag13) {
          $T17().WriteFieldHeader(8, $T16().String, dest);
          $T17().WriteString(dest.SerializeType(type.get()), dest);
        }
      }
      $T17().WriteFieldHeader(10, wireType, dest);
      var flag14 = $T10().$Is(value);
      if (flag14) {
        $T17().WriteString($T10().$Cast(value), dest);
      } else {
        $T17().WriteObject(value, key, dest);
      }
    }
    $T17().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteTimeSpan (timeSpan, dest) {
    var flag = dest === null;
    if (flag) {
      throw $S05().Construct("dest");
    }
    switch ((dest.get_WireType()).valueOf()) {
      case 1: 
        $T17().WriteInt64(timeSpan.get_Ticks(), dest);
        break;

      case 2: 
      case 3: 
        var num = timeSpan.get_Ticks();
        var flag2 = $T14().op_Equality(timeSpan.MemberwiseClone(), $T14().MaxValue.MemberwiseClone());
        if (flag2) {
          num = $T02().Create(1, 0, 0);
          var timeSpanScale = $T15().MinMax;
        } else {
          var flag3 = $T14().op_Equality(timeSpan.MemberwiseClone(), $T14().MinValue.MemberwiseClone());
          if (flag3) {
            num = $T02().Create(16777215, 16777215, 65535);
            timeSpanScale = $T15().MinMax;
          } else {
            var flag4 = $T02().op_Equality(
              $T02().op_Modulus(num, $T02().Create(6930432, 51498, 0)), 
              $T02().Create(0, 0, 0)
            );
            if (flag4) {
              timeSpanScale = $T15().Days;
              num = $T02().op_Division(num, $T02().Create(6930432, 51498, 0));
            } else {
              var flag5 = $T02().op_Equality(
                $T02().op_Modulus(num, $T02().Create(12871680, 2145, 0)), 
                $T02().Create(0, 0, 0)
              );
              if (flag5) {
                timeSpanScale = $T15().Hours;
                num = $T02().op_Division(num, $T02().Create(12871680, 2145, 0));
              } else {
                var flag6 = $T02().op_Equality(
                  $T02().op_Modulus(num, $T02().Create(12797440, 35, 0)), 
                  $T02().Create(0, 0, 0)
                );
                if (flag6) {
                  timeSpanScale = $T15().Minutes;
                  num = $T02().op_Division(num, $T02().Create(12797440, 35, 0));
                } else {
                  var flag7 = $T02().op_Equality(
                    $T02().op_Modulus(num, $T02().Create(10000000, 0, 0)), 
                    $T02().Create(0, 0, 0)
                  );
                  if (flag7) {
                    timeSpanScale = $T15().Seconds;
                    num = $T02().op_Division(num, $T02().Create(10000000, 0, 0));
                  } else {
                    var flag8 = $T02().op_Equality(
                      $T02().op_Modulus(num, $T02().Create(10000, 0, 0)), 
                      $T02().Create(0, 0, 0)
                    );
                    if (flag8) {
                      timeSpanScale = $T15().Milliseconds;
                      num = $T02().op_Division(num, $T02().Create(10000, 0, 0));
                    } else {
                      timeSpanScale = $T15().Ticks;
                    }
                  }
                }
              }
            }
          }
        }
        var token = $T17().StartSubItem(null, dest);
        var flag9 = $T04().op_GreaterThan(
          num.ToUInt64(), 
          ($T02().Create(0, 0, 0)).ToUInt64()
        );
        if (flag9) {
          $T17().WriteFieldHeader(1, $T16().SignedVariant, dest);
          $T17().WriteInt64(num, dest);
        }
        var flag10 = timeSpanScale > $T15().Days;
        if (flag10) {
          $T17().WriteFieldHeader(2, $T16().Variant, dest);
          $T17().WriteInt32(timeSpanScale.valueOf(), dest);
        }
        $T17().EndSubItem(token, dest);
        break;

      default: 
        throw $S03().Construct(JSIL.ConcatString("Unexpected wire-type: ", (dest.get_WireType()).toString()));

    }
  }; 

  JSIL.MakeStaticClass("ProtoBuf.BclHelpers", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "ReadDateTime", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.DateTime"), [$asm11.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDateTime
    );

    $.Method({Static:true , Public:true }, "ReadDecimal", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Decimal"), [$asm11.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDecimal
    );

    $.Method({Static:true , Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Guid"), [$asm11.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadGuid
    );

    $.Method({Static:true , Public:true }, "ReadNetObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("ProtoBuf.ProtoReader"), 
          $.Int32, $asm0F.TypeRef("System.Type"), 
          $asm11.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_ReadNetObject
    );

    $.Method({Static:true , Public:true }, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.TimeSpan"), [$asm11.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadTimeSpan
    );

    $.Method({Static:true , Public:false}, "ReadTimeSpanTicks", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadTimeSpanTicks
    );

    $.Method({Static:true , Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.DateTime"), $asm11.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDateTime
    );

    $.Method({Static:true , Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Decimal"), $asm11.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDecimal
    );

    $.Method({Static:true , Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Guid"), $asm11.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteGuid
    );

    $.Method({Static:true , Public:true }, "WriteNetObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("ProtoBuf.ProtoWriter"), 
          $.Int32, $asm11.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_WriteNetObject
    );

    $.Method({Static:true , Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.TimeSpan"), $asm11.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteTimeSpan
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EpochOrigin", $asm0F.TypeRef("System.DateTime"));


    function BclHelpers__cctor () {
      $thisType.EpochOrigin = new $asm0F.System.DateTime();
      $thisType.EpochOrigin = $S00().Construct(1970, 1, 1, 0, 0, 0, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BclHelpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.BclHelpers+NetObjectOptions */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.BclHelpers+NetObjectOptions", 
    BaseType: $asm0F.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AsReference: 1, 
    DynamicType: 2, 
    UseConstructor: 4, 
    LateSet: 8, 
  }
);

/* class ProtoBuf.BufferPool */ 

(function BufferPool$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };


  function BufferPool_GetBuffer () {
    var obj = null;

    for (var i = 0; i < ($thisType.pool.length | 0); i = ((i + 1) | 0)) {
      var flag = (obj = $thisType.pool[i]) !== null;
      if (flag) {
        var result = $T04().$Cast(obj);
        return result;
      }
    }
    result = JSIL.Array.New($T05(), 1024);
    return result;
  }; 

  function BufferPool_ReleaseBufferToPool (/* ref */ buffer) {
    var flag = buffer.get() === null;
    if (!flag) {
      var flag2 = (buffer.get().length | 0) === 1024;
      if (flag2) {

      $loop0: 
        for (var i = 0; i < ($thisType.pool.length | 0); i = ((i + 1) | 0)) {
          var flag3 = $thisType.pool[i] === null;
          if (flag3) {
            $thisType.pool[i] = buffer.get();
          }
          var flag4 = $thisType.pool[i] === null;
          if (flag4) {
            break $loop0;
          }
        }
      }
      buffer.set(null);
    }
  }; 

  function BufferPool_ResizeAndFlushLeft (/* ref */ buffer, toFitAtLeastBytes, copyFromIndex, copyBytes) {
    $T06().DebugAssert(buffer.get() !== null);
    $T06().DebugAssert((toFitAtLeastBytes | 0) > (buffer.get().length | 0));
    $T06().DebugAssert((copyFromIndex | 0) >= 0);
    $T06().DebugAssert((copyBytes | 0) >= 0);
    var num = Math.imul(buffer.get().length, 2);
    var flag = num < (toFitAtLeastBytes | 0);
    if (flag) {
      num = (toFitAtLeastBytes | 0);
    }
    var array = JSIL.Array.New($T05(), num);
    if ((copyBytes | 0) > 0) {
      $T06().BlockCopy(
        buffer.get(), 
        copyFromIndex, 
        array, 
        0, 
        copyBytes
      );
    }
    var flag3 = (buffer.get().length | 0) === 1024;
    if (flag3) {
      $thisType.ReleaseBufferToPool(/* ref */ buffer);
    }
    buffer.set(array);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      BufferPool_GetBuffer
    );

    $.Method({Static:true , Public:false}, "ReleaseBufferToPool", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])), 
      BufferPool_ReleaseBufferToPool
    );

    $.Method({Static:true , Public:false}, "ResizeAndFlushLeft", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $.Int32, 
          $.Int32, $.Int32
        ]), 
      BufferPool_ResizeAndFlushLeft
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "pool", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Object, 20);
      });


    function BufferPool__cctor () {
      $thisType.pool = JSIL.Array.New($T00(), 20);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BufferPool__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.DataFormat */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.DataFormat", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    ZigZag: 1, 
    TwosComplement: 2, 
    FixedSize: 3, 
    Group: 4, 
  }
);

/* class ProtoBuf.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Buffer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm12.System.Diagnostics.Debug)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Diagnostics.Debugger)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0F.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Reflection.ConstructorInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Reflection.MethodBase)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Reflection.MethodInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.TypeCode)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm11.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.TimeSpan)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.Guid)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm12.System.Uri)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.Nullable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0F.TypeRef("System.String")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Reflection.MethodInfo, [$asm0F.System.String, System.Array.Of($asm0F.System.Type)]))) ();
  };


  function Helpers_BlockCopy (from, fromIndex, to, toIndex, count) {
    $T03().BlockCopy(
      from, 
      fromIndex, 
      to, 
      toIndex, 
      count
    );
  }; 

  function Helpers_DebugAssert$00 (condition, message) {
    if (!condition) {
      $T06().Assert(false, message);
    }
  }; 

  function Helpers_DebugAssert$01 (condition) {
    var flag = !condition && 
    $T07().get_IsAttached();
    if (flag) {
      $T07().Break();
    }
    $T06().Assert(condition);
  }; 

  function Helpers_DebugWriteLine$02 (message) {
    $S00().CallStatic($T06(), "WriteLine", null, message);
  }; 

  function Helpers_GetConstructor (type, parameterTypes, nonPublic) {
    var constructor = type.GetConstructor(parameterTypes);
    return (
      ((constructor !== null) && (nonPublic || 
          constructor.get_IsPublic()))
         ? constructor
         : null)
    ;
  }; 

  function Helpers_GetInstanceMethod$03 (declaringType, name, types) {
    var flag = types === null;
    if (flag) {
      types = $thisType.EmptyTypes;
    }
    var methodInfo = $S01().CallVirtual("GetMethod", null, declaringType, name, types);
    var flag2 = (methodInfo !== null) && 
    methodInfo.get_IsStatic();
    if (flag2) {
      methodInfo = null;
    }
    return methodInfo;
  }; 

  function Helpers_GetTypeCode (type) {
    var typeCode = $T00().GetTypeCode(type);
    switch (typeCode.valueOf()) {
      case 0: 
      case 3: 
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 9: 
      case 10: 
      case 11: 
      case 12: 
      case 13: 
      case 14: 
      case 15: 
      case 16: 
      case 18: 
        var result = $T0D().$Cast(typeCode);
        return result;

    }
    var flag = type === $T0E().__Type__;
    if (flag) {
      result = $T0D().TimeSpan;
    } else {
      var flag2 = type === $T0F().__Type__;
      if (flag2) {
        result = $T0D().Guid;
      } else {
        var flag3 = type === $T10().__Type__;
        if (flag3) {
          result = $T0D().Uri;
        } else {
          var flag4 = type === $T01().__Type__;
          if (flag4) {
            result = $T0D().ByteArray;
          } else {
            var flag5 = type === $T00().__Type__;
            if (flag5) {
              result = $T0D().Type;
            } else {
              result = $T0D().Unknown;
            }
          }
        }
      }
    }
    return result;
  }; 

  function Helpers_GetUnderlyingType (type) {
    return $T11().GetUnderlyingType(type);
  }; 

  function Helpers_IsEnum (type) {
    return type.get_IsEnum();
  }; 

  function Helpers_IsInfinity$04 (value) {
    return $T12().IsInfinity(value);
  }; 

  function Helpers_IsInfinity$05 (value) {
    return $T13().IsInfinity(value);
  }; 

  function Helpers_IsNullOrEmpty (value) {
    return ((value === null) || ((value.length | 0) === 0));
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.Helpers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "BlockCopy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      Helpers_BlockCopy
    );

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      Helpers_DebugAssert$00
    );

    $.Method({Static:true , Public:true }, "DebugAssert", 
      JSIL.MethodSignature.Action($.Boolean), 
      Helpers_DebugAssert$01
    );

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Helpers_DebugWriteLine$02
    );

    $.Method({Static:true , Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), 
          $.Boolean
        ]), 
      Helpers_GetConstructor
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $asm0F.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")])
        ]), 
      Helpers_GetInstanceMethod$03
    );

    $.Method({Static:true , Public:true }, "GetTypeCode", 
      new JSIL.MethodSignature($asm11.TypeRef("ProtoBuf.ProtoTypeCode"), [$asm0F.TypeRef("System.Type")]), 
      Helpers_GetTypeCode
    );

    $.Method({Static:true , Public:false}, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")]), 
      Helpers_GetUnderlyingType
    );

    $.Method({Static:true , Public:false}, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Type")]), 
      Helpers_IsEnum
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Helpers_IsInfinity$04
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Double]), 
      Helpers_IsInfinity$05
    );

    $.Method({Static:true , Public:true }, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Helpers_IsNullOrEmpty
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyTypes", $jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Type")]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Type, 0);
      });


    function Helpers__cctor () {
      $thisType.EmptyTypes = JSIL.Array.New($T00(), 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Helpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.ProtoTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.ProtoTypeCode", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Unknown: 1, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18, 
    TimeSpan: 100, 
    ByteArray: 101, 
    Guid: 102, 
    Uri: 103, 
    Type: 104, 
  }
);

/* class ProtoBuf.NetObjectCache */ 

(function NetObjectCache$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm11.ProtoBuf.Meta.MutableList)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm11.ProtoBuf.ProtoException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.Int32), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.ProtoException, [$asm0F.System.String]))) ();
  };


  function NetObjectCache__ctor () {
  }; 

  function NetObjectCache_AddObjectKey (value, /* ref */ existing) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    var flag2 = value === this.rootObject;
    var num = new JSIL.BoxedVariable(0);
    if (flag2) {
      existing.set(true);
      var result = 0;
    } else {
      var text = $T04().$As(value);
      var list = this.get_List();
      if (text === null) {
        num.set(list.IndexOfReference(value));
      } else {
        if (this.stringKeys === null) {
          this.stringKeys = $S01().Construct();
          num.set(-1);
        } else {
          var flag5 = !(this.stringKeys).TryGetValue(text, /* ref */ num);
          if (flag5) {
            num.set(-1);
          }
        }
      }
      var flag6 = !existing.set((num.get() | 0) >= 0);
      if (flag6) {
        num.set(list.Add(value));
        if (text !== null) {
          (this.stringKeys).Add(text, num.get());
        }
      }
      result = (((num.get() | 0) + 1) | 0);
    }
    return result;
  }; 

  function NetObjectCache_Clear () {
    this.trapStartIndex = 0;
    this.rootObject = null;
    if (this.underlyingList !== null) {
      (this.underlyingList).Clear();
    }
    if (this.stringKeys !== null) {
      (this.stringKeys).Clear();
    }
  }; 

  function NetObjectCache_get_List () {
    if (this.underlyingList === null) {
      this.underlyingList = new ($T07())();
    }
    return this.underlyingList;
  }; 

  function NetObjectCache_GetKeyedObject (key) {
    var $temp00;
    var flag = (($temp00 = (key | 0), 
      key = (((key | 0) - 1) | 0), 
      $temp00) | 0) === 0;
    if (flag) {
      if (this.rootObject === null) {
        throw $S02().Construct("No root object assigned");
      }
      var result = this.rootObject;
    } else {
      var list = this.get_List();
      var flag3 = ((key | 0) < 0) || 
      ((key | 0) >= (list.get_Count() | 0));
      if (flag3) {
        $T09().DebugWriteLine(JSIL.ConcatString("Missing key: ", $T03().$Box(key)));
        throw $S02().Construct("Internal error; a missing key occurred");
      }
      var obj = list.get_Item(key);
      var flag4 = obj === null;
      if (flag4) {
        throw $S02().Construct("A deferred key does not have a value yet");
      }
      result = obj;
    }
    return result;
  }; 

  function NetObjectCache_RegisterTrappedObject (value) {
    if (this.rootObject === null) {
      this.rootObject = value;
    } else {
      if (this.underlyingList !== null) {

      $loop0: 
        for (var i = (this.trapStartIndex | 0); i < ((this.underlyingList).get_Count() | 0); i = ((i + 1) | 0)) {
          this.trapStartIndex = ((i + 1) | 0);
          var flag3 = (this.underlyingList).get_Item(i) === null;
          if (flag3) {
            (this.underlyingList).set_Item(i, value);
            break $loop0;
          }
        }
      }
    }
  }; 

  function NetObjectCache_SetKeyedObject (key, value) {
    var $temp00;
    var flag = (($temp00 = (key | 0), 
      key = (((key | 0) - 1) | 0), 
      $temp00) | 0) === 0;
    if (flag) {
      if (value === null) {
        throw $S00().Construct("value");
      }
      var flag3 = (this.rootObject !== null) && 
      (this.rootObject !== value);
      if (flag3) {
        throw $S02().Construct("The root object cannot be reassigned");
      }
      this.rootObject = value;
    } else {
      var list = this.get_List();
      var flag4 = (key | 0) < (list.get_Count() | 0);
      if (flag4) {
        var obj = list.get_Item(key);
        var flag5 = obj === null;
        if (flag5) {
          list.set_Item(key, value);
        } else {
          var flag6 = obj !== value;
          if (flag6) {
            throw $S02().Construct("Reference-tracked objects cannot change reference");
          }
        }
      } else {
        var flag7 = (key | 0) !== (list.Add(value) | 0);
        if (flag7) {
          throw $S02().Construct("Internal error; a key mismatch occurred");
        }
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NetObjectCache__ctor
    );

    $.Method({Static:false, Public:false}, "AddObjectKey", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      NetObjectCache_AddObjectKey
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      NetObjectCache_Clear
    );

    $.Method({Static:false, Public:false}, "get_List", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.Meta.MutableList")), 
      NetObjectCache_get_List
    );

    $.Method({Static:false, Public:false}, "GetKeyedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      NetObjectCache_GetKeyedObject
    );

    $.Method({Static:false, Public:false}, "RegisterTrappedObject", 
      JSIL.MethodSignature.Action($.Object), 
      NetObjectCache_RegisterTrappedObject
    );

    $.Method({Static:false, Public:false}, "SetKeyedObject", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      NetObjectCache_SetKeyedObject
    );

    $.Field({Static:false, Public:false}, "underlyingList", $asm11.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false}, "rootObject", $.Object);

    $.Field({Static:false, Public:false}, "trapStartIndex", $.Int32);

    $.Field({Static:false, Public:false}, "stringKeys", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Property({Static:false, Public:false}, "List", $asm11.TypeRef("ProtoBuf.Meta.MutableList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.PrefixStyle */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.PrefixStyle", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Base128: 1, 
    Fixed32: 2, 
    Fixed32BigEndian: 3, 
  }
);

/* class ProtoBuf.ProtoContractAttribute */ 

(function ProtoContractAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Attribute)) ();
  };


  function ProtoContractAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoContractAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0F.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm0F.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* class ProtoBuf.ProtoException */ 

(function ProtoException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Exception)) ();
  };


  function ProtoException__ctor$00 (message) {
    $T01().prototype._ctor.call(this, message);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Exception"), 
      Name: "ProtoBuf.ProtoException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ProtoException__ctor$00
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoReader */ 

(function ProtoReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm11.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm11.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm11.ProtoBuf.WireType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm11.ProtoBuf.ProtoException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm11.ProtoBuf.BufferPool)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.String))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm11.ProtoBuf.NetObjectCache)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm11.ProtoBuf.SubItemToken)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0F.System.IO.EndOfStreamException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.IO.MemoryStream)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.BitConverter)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.Int16)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.SByte)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.OverflowException)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm0F.System.Text.Encoding)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm11.ProtoBuf.DataFormat)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.UInt64)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0F.System.IO.SeekOrigin)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Text.UTF8Encoding, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.ProtoException, [$asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.ProtoReader, [
        $asm0F.System.IO.Stream, $asm11.ProtoBuf.Meta.TypeModel, 
        $asm11.ProtoBuf.SerializationContext, $asm0F.System.Int32
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.IO.EndOfStreamException, null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Collections.Generic.Dictionary$b2.Of($asm0F.System.String, $asm0F.System.String), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.IO.MemoryStream, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.IO.Stream, $asm0F.System.Object, 
        $asm11.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [
        $asm0F.System.IO.Stream, $asm0F.System.Object, 
        $asm0F.System.Type
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm0F.System.Byte), [$asm0F.System.Int64]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.UInt32]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int64, [$asm0F.System.UInt64]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm0F.System.Byte), [$asm0F.System.Int32]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Single]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Double]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.OverflowException, null))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [
        $asm0F.System.Int32, $asm0F.System.Object, 
        $asm11.ProtoBuf.ProtoReader
      ]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };


  function ProtoReader__ctor$00 (source, model, context, length) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      length
    );
  }; 

  function ProtoReader_AddErrorData (exception, source) {
    return exception;
  }; 

  function ProtoReader_AppendBytes (value, reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0A().String) {
      throw reader.CreateWireTypeException();
    }
    var i = (reader.ReadUInt32Variant(false) | 0);
    reader.wireType = $T0A().None;
    var flag2 = i === 0;
    if (flag2) {
      var result = (
        (value === null)
           ? $thisType.EmptyBlob
           : value)
      ;
    } else {
      var flag3 = (value === null) || 
      ((value.length | 0) === 0);
      if (flag3) {
        var num = 0;
        value = JSIL.Array.New($T01(), i);
      } else {
        num = (value.length | 0);
        var array = JSIL.Array.New($T01(), (((value.length | 0) + i) | 0));
        $T0B().BlockCopy(
          value, 
          0, 
          array, 
          0, 
          value.length
        );
        value = array;
      }
      reader.position = (((reader.position | 0) + i) | 0);

      while (i > (reader.available | 0)) {
        var flag4 = (reader.available | 0) > 0;
        if (flag4) {
          $T0B().BlockCopy(
            reader.ioBuffer, 
            reader.ioIndex, 
            value, 
            num, 
            reader.available
          );
          i = ((i - (reader.available | 0)) | 0);
          num = ((num + (reader.available | 0)) | 0);
          reader.ioIndex = reader.available = 0;
        }
        var num2 = ((
          (i > (reader.ioBuffer.length | 0))
             ? reader.ioBuffer.length
             : i)
         | 0);
        if (num2 > 0) {
          reader.Ensure(num2, true);
        }
      }
      var flag6 = i > 0;
      if (flag6) {
        $T0B().BlockCopy(
          reader.ioBuffer, 
          reader.ioIndex, 
          value, 
          num, 
          i
        );
        reader.ioIndex = (((reader.ioIndex | 0) + i) | 0);
        reader.available = (((reader.available | 0) - i) | 0);
      }
      result = value;
    }
    return result;
  }; 

  function ProtoReader_Assert (wireType) {
    var flag = this.wireType === wireType;
    if (!flag) {
      var flag2 = $T0A().$Cast(wireType & $T0A().$Cast(7)) === this.wireType;
      if (!flag2) {
        throw this.CreateWireTypeException();
      }
      this.wireType = wireType;
    }
  }; 

  function ProtoReader_CheckFullyConsumed () {
    var flag = this.isFixedLength;
    if (flag) {
      if ((this.dataRemaining >>> 0) > (0 >>> 0)) {
        throw $S02().Construct("Incorrect number of bytes consumed");
      }
    } else {
      if ((this.available >>> 0) > (0 >>> 0)) {
        throw $S02().Construct("Unconsumed data left in the buffer; this suggests corrupt input");
      }
    }
  }; 

  function ProtoReader_Create (source, model, context, len) {
    var recycled = $thisType.GetRecycled();
    var flag = recycled === null;
    if (flag) {
      var result = $S03().Construct(source, model, context, len);
    } else {
      $thisType.Init(
        recycled, 
        source, 
        model, 
        context, 
        len
      );
      result = recycled;
    }
    return result;
  }; 

  function ProtoReader_CreateException (message) {
    return $thisType.AddErrorData($S02().Construct(message), this);
  }; 

  function ProtoReader_CreateWireTypeException () {
    return this.CreateException("Invalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354");
  }; 

  function ProtoReader_DeserializeType (value) {
    return $T03().DeserializeType(this.model, value);
  }; 

  function ProtoReader_Dispose () {
    this.source = null;
    this.model = null;
    $T0F().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
    if (this.stringInterner !== null) {
      (this.stringInterner).Clear();
    }
    if (this.netCache !== null) {
      (this.netCache).Clear();
    }
  }; 

  function ProtoReader_EndSubItem (token, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var value = (token.value | 0);
    var wireType = reader.wireType;
    if (wireType !== $T0A().EndGroup) {
      var flag2 = value < (reader.position | 0);
      if (flag2) {
        throw reader.CreateException("Sub-message not read entirely");
      }
      var flag3 = ((reader.blockEnd | 0) !== (reader.position | 0)) && 
      ((reader.blockEnd | 0) !== 2147483647);
      if (flag3) {
        throw reader.CreateException("Sub-message not read correctly");
      }
      reader.blockEnd = value;
      reader.depth = (((reader.depth | 0) - 1) | 0);
    } else {
      if (value >= 0) {
        throw $thisType.AddErrorData($S04().Construct("token"), reader);
      }
      var flag5 = (-value | 0) !== (reader.fieldNumber | 0);
      if (flag5) {
        throw reader.CreateException("Wrong group was ended");
      }
      reader.wireType = $T0A().None;
      reader.depth = (((reader.depth | 0) - 1) | 0);
    }
  }; 

  function ProtoReader_Ensure (count, strict) {
    var num3 = 0;
    $T0B().DebugAssert((this.available | 0) <= (count | 0), "Asking for data without checking first");
    var flag = (count | 0) > (this.ioBuffer.length | 0);
    if (flag) {
      $T0F().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(this, "ioBuffer"), count, this.ioIndex, this.available);
      this.ioIndex = 0;
    } else {
      var flag2 = (((this.ioIndex | 0) + (count | 0)) | 0) >= (this.ioBuffer.length | 0);
      if (flag2) {
        $T0B().BlockCopy(
          this.ioBuffer, 
          this.ioIndex, 
          this.ioBuffer, 
          0, 
          this.available
        );
        this.ioIndex = 0;
      }
    }
    count = (((count | 0) - (this.available | 0)) | 0);
    var num = (((this.ioIndex | 0) + (this.available | 0)) | 0);
    var num2 = (((this.ioBuffer.length | 0) - num) | 0);
    var flag3 = this.isFixedLength;
    if (flag3) {
      var flag4 = (this.dataRemaining | 0) < num2;
      if (flag4) {
        num2 = (this.dataRemaining | 0);
      }
    }

    while (!(((count | 0) <= 0) || 
        (num2 <= 0)) && ((num3 = ((this.source).Read(this.ioBuffer, num, num2) | 0)) > 0)) {
      this.available = (((this.available | 0) + num3) | 0);
      count = (((count | 0) - num3) | 0);
      num2 = ((num2 - num3) | 0);
      num = ((num + num3) | 0);
      var flag5 = this.isFixedLength;
      if (flag5) {
        this.dataRemaining = (((this.dataRemaining | 0) - num3) | 0);
      }
    }
    var flag6 = strict && 
    ((count | 0) > 0);
    if (flag6) {
      throw $thisType.EoF(this);
    }
  }; 

  function ProtoReader_EoF (source) {
    return $thisType.AddErrorData($S05().Construct(), source);
  }; 

  function ProtoReader_get_Context () {
    return this.context;
  }; 

  function ProtoReader_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function ProtoReader_get_Model () {
    return this.model;
  }; 

  function ProtoReader_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoReader_get_WireType () {
    return this.wireType;
  }; 

  function ProtoReader_GetRecycled () {
    $thisType.lastReader = null;
    return $thisType.lastReader;
  }; 

  function ProtoReader_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoReader_HasSubValue (wireType, source) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    var flag2 = ((source.blockEnd | 0) <= (source.position | 0)) || 
    (wireType === $T0A().EndGroup);
    if (flag2) {
      var result = false;
    } else {
      source.wireType = wireType;
      result = true;
    }
    return result;
  }; 

  function ProtoReader_Hint (wireType) {
    var flag = this.wireType === wireType;
    if (!flag) {
      var flag2 = $T0A().$Cast(wireType & $T0A().$Cast(7)) === this.wireType;
      if (flag2) {
        this.wireType = wireType;
      }
    }
  }; 

  function ProtoReader_Init (reader, source, model, context, length) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    var flag2 = !source.get_CanRead();
    if (flag2) {
      throw $S06().Construct("Cannot read from stream", "source");
    }
    reader.source = source;
    reader.ioBuffer = $T0F().GetBuffer();
    reader.model = model;
    var flag3 = (length | 0) >= 0;
    reader.isFixedLength = flag3;
    reader.dataRemaining = ((
      flag3
         ? length
         : 0)
     | 0);
    var flag4 = context === null;
    if (flag4) {
      context = $T04().get_Default();
    } else {
      context.Freeze();
    }
    reader.context = context;
    reader.position = reader.available = reader.depth = reader.fieldNumber = reader.ioIndex = 0;
    reader.blockEnd = 2147483647;
    reader.internStrings = true;
    reader.wireType = $T0A().None;
    reader.trapCount = 1;
    var flag5 = reader.netCache === null;
    if (flag5) {
      reader.netCache = new ($T11())();
    }
  }; 

  function ProtoReader_Intern (value) {
    var text = new JSIL.BoxedVariable(null);
    var flag = value === null;
    if (flag) {
      var result = null;
    } else {
      var flag2 = (value.length | 0) === 0;
      if (flag2) {
        result = "";
      } else {
        if (this.stringInterner === null) {
          this.stringInterner = $S07().Construct();
          (this.stringInterner).Add(value, value);
        } else {
          var flag4 = (this.stringInterner).TryGetValue(value, /* ref */ text);
          if (flag4) {
            value = text.get();
          } else {
            (this.stringInterner).Add(value, value);
          }
        }
        result = value;
      }
    }
    return result;
  }; 

  function ProtoReader_Merge (parent, from, to) {
    var flag = parent === null;
    if (flag) {
      throw $S01().Construct("parent");
    }
    var typeModel = parent.get_Model();
    var serializationContext = parent.get_Context();
    var flag2 = typeModel === null;
    if (flag2) {
      throw $S08().Construct("Types cannot be merged unless a type-model has been specified");
    }
    var memoryStream = $S09().Construct();
    try {
      $S0A().CallVirtual("Serialize", null, typeModel, memoryStream, from, serializationContext);
      memoryStream.set_Position($T19().Create(0, 0, 0));
      var result = $S0B().CallVirtual("Deserialize", null, typeModel, memoryStream, to, null);
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
    return result;
  }; 

  function ProtoReader_NoteObject (value, reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var flag2 = (reader.trapCount >>> 0) > 0;
    if (flag2) {
      (reader.netCache).RegisterTrappedObject(value);
      reader.trapCount = (((reader.trapCount >>> 0) - 1) >>> 0);
    }
  }; 

  function ProtoReader_ReadBoolean () {
    var num = (this.ReadUInt32() >>> 0);
    if (num !== 0) {
      if (num !== 1) {
        throw this.CreateException("Unexpected boolean value");
      }
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function ProtoReader_ReadByte () {
    return $T01().$OverflowCheck((this.ReadUInt32() & 0xFF));
  }; 

  function ProtoReader_ReadDouble () {
    var wireType = this.wireType;
    if (wireType !== $T0A().Fixed64) {
      if (wireType !== $T0A().Fixed32) {
        throw this.CreateWireTypeException();
      }
      var result = this.ReadSingle();
    } else {
      var value = this.ReadInt64();
      result = +$T1C().ToDouble($S0C().CallStatic($T1C(), "GetBytes", null, value), 0);
    }
    return result;
  }; 

  function ProtoReader_ReadFieldHeader () {
    var num = new JSIL.BoxedVariable(0);
    if (((this.blockEnd | 0) <= (this.position | 0)) || (this.wireType === $T0A().EndGroup)) {
      var result = 0;
    } else {
      var flag2 = this.TryReadUInt32Variant(/* ref */ num);
      if (flag2) {
        this.wireType = $T0A().$Cast((num.get() >>> 0) & 7);
        this.fieldNumber = ((num.get() >>> 0) >>> (3 >>> 0) | 0);
        if ((this.fieldNumber | 0) < 1) {
          throw $S02().Construct(JSIL.ConcatString("Invalid field in source data: ", (this.fieldNumber).toString()));
        }
      } else {
        this.wireType = $T0A().None;
        this.fieldNumber = 0;
      }
      if (this.wireType === $T0A().EndGroup) {
        if ((this.depth | 0) <= 0) {
          throw $S02().Construct("Unexpected end-group in source data; this usually means the source data is corrupt");
        }
        result = 0;
      } else {
        result = (this.fieldNumber | 0);
      }
    }
    return result;
  }; 

  function ProtoReader_ReadInt16 () {
    return $T1D().$OverflowCheck(((this.ReadInt32() + 0x8000 & 0xFFFF) - 0x8000));
  }; 

  function ProtoReader_ReadInt32 () {
    var wireType = this.wireType;
    if (wireType <= $T0A().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        var result = (this.ReadUInt32Variant(true) | 0);
        return result;
      }
      if (wireType === $T0A().Fixed64) {
        var num = this.ReadInt64();
        result = ($T05().$OverflowCheck(num.ToNumber(4294967295, true)) | 0);
        return result;
      }
    } else {
      if (wireType === $T0A().Fixed32) {
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.position = (((this.position | 0) + 4) | 0);
        this.available = (((this.available | 0) - 4) | 0);
        var arg_88_0 = this.ioBuffer;
        var num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_A6_0 = (arg_88_0[num2] | 0);
        var arg_A3_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_C5_0 = arg_A6_0 | ((arg_A3_0[num2] | 0) << 8);
        var arg_C1_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_E4_0 = arg_C5_0 | ((arg_C1_0[num2] | 0) << 16);
        var arg_E0_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        result = arg_E4_0 | ((arg_E0_0[num2] | 0) << 24);
        return result;
      }
      if (wireType === $T0A().SignedVariant) {
        result = ($S0D().CallStatic($thisType, "Zag", null, this.ReadUInt32Variant(true)) | 0);
        return result;
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadInt64 () {
    var wireType = this.wireType;
    if (wireType <= $T0A().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        var result = (this.ReadUInt64Variant()).ToInt64();
        return result;
      }
      if (wireType === $T0A().Fixed64) {
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.position = (((this.position | 0) + 8) | 0);
        this.available = (((this.available | 0) - 8) | 0);
        var arg_8E_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_AB_0 = (arg_8E_0[num]).ToInt64();
        var arg_A7_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_C8_0 = $T19().op_BitwiseOr(arg_AB_0, $T19().op_LeftShift((arg_A7_0[num]).ToInt64(), 8));
        var arg_C3_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_E5_0 = $T19().op_BitwiseOr(arg_C8_0, $T19().op_LeftShift((arg_C3_0[num]).ToInt64(), 16));
        var arg_E0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_102_0 = $T19().op_BitwiseOr(arg_E5_0, $T19().op_LeftShift((arg_E0_0[num]).ToInt64(), 24));
        var arg_FD_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_11F_0 = $T19().op_BitwiseOr(arg_102_0, $T19().op_LeftShift((arg_FD_0[num]).ToInt64(), 32));
        var arg_11A_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_13C_0 = $T19().op_BitwiseOr(arg_11F_0, $T19().op_LeftShift((arg_11A_0[num]).ToInt64(), 40));
        var arg_137_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_159_0 = $T19().op_BitwiseOr(arg_13C_0, $T19().op_LeftShift((arg_137_0[num]).ToInt64(), 48));
        var arg_154_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        result = $T19().op_BitwiseOr(arg_159_0, $T19().op_LeftShift((arg_154_0[num]).ToInt64(), 56));
        return result;
      }
    } else {
      if (wireType === $T0A().Fixed32) {
        result = $T19().FromNumber(this.ReadInt32());
        return result;
      }
      if (wireType === $T0A().SignedVariant) {
        result = $S0E().CallStatic($thisType, "Zag", null, this.ReadUInt64Variant());
        return result;
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadSByte () {
    return $T1E().$OverflowCheck(((this.ReadInt32() + 0x80 & 0xFF) - 0x80));
  }; 

  function ProtoReader_ReadSingle () {
    var wireType = this.wireType;
    if (wireType !== $T0A().Fixed64) {
      if (wireType !== $T0A().Fixed32) {
        throw this.CreateWireTypeException();
      }
      var value = (this.ReadInt32() | 0);
      var result = +$T1C().ToSingle($S0F().CallStatic($T1C(), "GetBytes", null, value), 0);
    } else {
      var num = +this.ReadDouble();
      var num2 = Math.fround(num);
      var flag = $S10().CallStatic($T0B(), "IsInfinity", null, num2) && 
      !$S11().CallStatic($T0B(), "IsInfinity", null, num);
      if (flag) {
        throw $thisType.AddErrorData($S12().Construct(), this);
      }
      result = num2;
    }
    return result;
  }; 

  function ProtoReader_ReadString () {
    if (this.wireType === $T0A().String) {
      var num = (this.ReadUInt32Variant(false) | 0);
      if (num === 0) {
        var result = "";
      } else {
        var flag3 = (this.available | 0) < num;
        if (flag3) {
          this.Ensure(num, true);
        }
        var text = $thisType.encoding.GetString(this.ioBuffer, this.ioIndex, num);
        var flag4 = this.internStrings;
        if (flag4) {
          text = this.Intern(text);
        }
        this.available = (((this.available | 0) - num) | 0);
        this.position = (((this.position | 0) + num) | 0);
        this.ioIndex = (((this.ioIndex | 0) + num) | 0);
        result = text;
      }
      return result;
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadTypedObject ($value, key, reader, type) {
    var value = new JSIL.BoxedVariable($value);
    var flag = reader.model === null;
    if (flag) {
      throw $thisType.AddErrorData($S08().Construct("Cannot deserialize sub-objects unless a model is provided"), reader);
    }
    var token = $thisType.StartSubItem(reader);
    if ((key | 0) >= 0) {
      value.set($S13().CallVirtual("Deserialize", null, reader.model, key, value.get(), reader));
    } else {
      var flag3 = (type !== null) && 
      (reader.model).TryDeserializeAuxiliaryType(
        reader, 
        $T22().Default, 
        1, 
        type, 
        /* ref */ value, 
        true, 
        false, 
        true, 
        false
      );
      if (!flag3) {
        $T03().ThrowUnexpectedType(type);
      }
    }
    $thisType.EndSubItem(token, reader);
    return value.get();
  }; 

  function ProtoReader_ReadUInt16 () {
    return $T23().$OverflowCheck((this.ReadUInt32() & 0xFFFF));
  }; 

  function ProtoReader_ReadUInt32 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T0A().Fixed64) {
        if (wireType !== $T0A().Fixed32) {
          throw this.CreateWireTypeException();
        }
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.position = (((this.position | 0) + 4) | 0);
        this.available = (((this.available | 0) - 4) | 0);
        var arg_78_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_96_0 = (arg_78_0[num] >>> 0);
        var arg_93_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_B5_0 = arg_96_0 | ((arg_93_0[num] >>> 0) << 8);
        var arg_B1_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_D4_0 = arg_B5_0 | ((arg_B1_0[num] >>> 0) << 16);
        var arg_D0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var result = arg_D4_0 | ((arg_D0_0[num] >>> 0) << 24);
      } else {
        var num2 = this.ReadUInt64();
        result = ($T0C().$OverflowCheck(num2.ToNumber(4294967295, false)) >>> 0);
      }
    } else {
      result = (this.ReadUInt32Variant(false) >>> 0);
    }
    return result;
  }; 

  function ProtoReader_ReadUInt32Variant (trimNegative) {
    var result = new JSIL.BoxedVariable(0);
    var num = (this.TryReadUInt32VariantWithoutMoving(trimNegative, /* ref */ result) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position = (((this.position | 0) + num) | 0);
      return result.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_ReadUInt64 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T0A().Fixed64) {
        if (wireType !== $T0A().Fixed32) {
          throw this.CreateWireTypeException();
        }
        var result = $T24().FromNumber(this.ReadUInt32());
      } else {
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.position = (((this.position | 0) + 8) | 0);
        this.available = (((this.available | 0) - 8) | 0);
        var arg_7E_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_9B_0 = arg_7E_0[num];
        var arg_97_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_B8_0 = $T24().op_BitwiseOr(arg_9B_0, $T24().op_LeftShift(arg_97_0[num], 8));
        var arg_B3_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_D5_0 = $T24().op_BitwiseOr(arg_B8_0, $T24().op_LeftShift(arg_B3_0[num], 16));
        var arg_D0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_F2_0 = $T24().op_BitwiseOr(arg_D5_0, $T24().op_LeftShift(arg_D0_0[num], 24));
        var arg_ED_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_10F_0 = $T24().op_BitwiseOr(arg_F2_0, $T24().op_LeftShift(arg_ED_0[num], 32));
        var arg_10A_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_12C_0 = $T24().op_BitwiseOr(arg_10F_0, $T24().op_LeftShift(arg_10A_0[num], 40));
        var arg_127_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_149_0 = $T24().op_BitwiseOr(arg_12C_0, $T24().op_LeftShift(arg_127_0[num], 48));
        var arg_144_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        result = $T24().op_BitwiseOr(arg_149_0, $T24().op_LeftShift(arg_144_0[num], 56));
      }
    } else {
      result = this.ReadUInt64Variant();
    }
    return result;
  }; 

  function ProtoReader_ReadUInt64Variant () {
    var result = new JSIL.BoxedVariable($T24().Create(0, 0, 0));
    var num = (this.TryReadUInt64VariantWithoutMoving(/* ref */ result) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position = (((this.position | 0) + num) | 0);
      return result.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_Recycle (reader) {
    var flag = reader !== null;
    if (flag) {
      reader.Dispose();
      $thisType.lastReader = reader;
    }
  }; 

  function ProtoReader_Seek (source, count, $buffer) {
    var buffer = new JSIL.BoxedVariable($buffer);
    var num = 0, num2 = 0;
    var canSeek = source.get_CanSeek();
    if (canSeek) {
      source.Seek($T19().FromNumber(count), $T25().Current);
      count = 0;
    } else {
      var flag = buffer.get() !== null;
      if (flag) {

        for (; ((count | 0) > (buffer.get().length | 0)) && ((num = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) > 0); count = (((count | 0) - num) | 0)) {
        }

        for (; ((count | 0) > 0) && ((num = (source.Read(buffer.get(), 0, count) | 0)) > 0); count = (((count | 0) - num) | 0)) {
        }
      } else {
        buffer.set($T0F().GetBuffer());
        try {

          for (; ((count | 0) > (buffer.get().length | 0)) && ((num2 = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) > 0); count = (((count | 0) - num2) | 0)) {
          }

          for (; ((count | 0) > 0) && ((num2 = (source.Read(buffer.get(), 0, count) | 0)) > 0); count = (((count | 0) - num2) | 0)) {
          }
        } finally {
          $T0F().ReleaseBufferToPool(/* ref */ buffer);
        }
      }
    }
    var flag2 = (count | 0) > 0;
    if (flag2) {
      throw $thisType.EoF(null);
    }
  }; 

  function ProtoReader_SetRootObject (value) {
    (this.netCache).SetKeyedObject(0, value);
    this.trapCount = (((this.trapCount >>> 0) - 1) >>> 0);
  }; 

  function ProtoReader_SkipField () {
    switch ((this.wireType).valueOf()) {
      case 0: 
      case 8: 
        this.ReadUInt64Variant();
        return;

      case 1: 
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.available = (((this.available | 0) - 8) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 8) | 0);
        this.position = (((this.position | 0) + 8) | 0);
        return;

      case 2: 
        var num = (this.ReadUInt32Variant(false) | 0);
        var flag2 = num <= (this.available | 0);
        if (flag2) {
          this.available = (((this.available | 0) - num) | 0);
          this.ioIndex = (((this.ioIndex | 0) + num) | 0);
          this.position = (((this.position | 0) + num) | 0);
          return;
        }
        this.position = (((this.position | 0) + num) | 0);
        num = ((num - (this.available | 0)) | 0);
        this.ioIndex = this.available = 0;
        var flag3 = this.isFixedLength;
        if (flag3) {
          var flag4 = num > (this.dataRemaining | 0);
          if (flag4) {
            throw $thisType.EoF(this);
          }
          this.dataRemaining = (((this.dataRemaining | 0) - num) | 0);
        }
        $thisType.Seek(this.source, num, this.ioBuffer);
        return;

      case 3: 
        var num2 = (this.fieldNumber | 0);
        this.depth = (((this.depth | 0) + 1) | 0);

        while ((this.ReadFieldHeader() | 0) > 0) {
          this.SkipField();
        }
        this.depth = (((this.depth | 0) - 1) | 0);
        var flag5 = (this.wireType === $T0A().EndGroup) && 
        ((this.fieldNumber | 0) === num2);
        if (flag5) {
          this.wireType = $T0A().None;
          return;
        }
        throw this.CreateWireTypeException();

      case 5: 
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.available = (((this.available | 0) - 4) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 4) | 0);
        this.position = (((this.position | 0) + 4) | 0);
        return;

    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_StartSubItem (reader) {
    var flag = reader === null;
    if (flag) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0A().String) {
      if (wireType !== $T0A().StartGroup) {
        throw reader.CreateWireTypeException();
      }
      reader.wireType = $T0A().None;
      reader.depth = (((reader.depth | 0) + 1) | 0);
      var result = new ($T12())((-reader.fieldNumber | 0));
    } else {
      var num = (reader.ReadUInt32Variant(false) | 0);
      if (num < 0) {
        throw $thisType.AddErrorData($S14().Construct(), reader);
      }
      var value = (reader.blockEnd | 0);
      reader.blockEnd = (((reader.position | 0) + num) | 0);
      reader.depth = (((reader.depth | 0) + 1) | 0);
      result = new ($T12())(value);
    }
    return result;
  }; 

  function ProtoReader_ThrowEnumException (type, value) {
    var str = (
      (type === null)
         ? "<null>"
         : type.get_FullName())
    ;
    throw $thisType.AddErrorData($S02().Construct(("No " + str + " enum is mapped to the wire-value " + (value).toString())), this);
  }; 

  function ProtoReader_TrapNextObject (newObjectKey) {
    this.trapCount = (((this.trapCount >>> 0) + 1) >>> 0);
    (this.netCache).SetKeyedObject(newObjectKey, null);
  }; 

  function ProtoReader_TryReadFieldHeader (field) {
    var num2 = new JSIL.BoxedVariable(0);
    var wireType = $asm11.ProtoBuf.WireType.Variant;
    if (((this.blockEnd | 0) <= (this.position | 0)) || (this.wireType === $T0A().EndGroup)) {
      var result = false;
    } else {
      var num = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ num2) | 0);
      var flag2 = !((num <= 0) || 
        (((num2.get() | 0) >> 3) !== (field | 0))) && 
      ((wireType = $T0A().$Cast((num2.get() >>> 0) & 7)) !== $T0A().EndGroup);
      if (flag2) {
        this.wireType = wireType;
        this.fieldNumber = (field | 0);
        this.position = (((this.position | 0) + num) | 0);
        this.ioIndex = (((this.ioIndex | 0) + num) | 0);
        this.available = (((this.available | 0) - num) | 0);
        result = true;
      } else {
        result = false;
      }
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt32Variant$01 (/* ref */ value) {
    var num = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ value) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position = (((this.position | 0) + num) | 0);
      var result = true;
    } else {
      result = false;
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt32VariantWithoutMoving (trimNegative, /* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03;
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set(0);
      var result = 0;
    } else {
      var num = (this.ioIndex | 0);
      value.set(this.ioBuffer[($temp00 = num, 
          num = ((num + 1) | 0), 
          $temp00)]);
      var flag3 = ((value.get() >>> 0) & 128) === 0;
      if (flag3) {
        result = 1;
      } else {
        value.set((value.get() >>> 0) & 127);
        if ((this.available | 0) === 1) {
          throw $thisType.EoF(this);
        }
        var num2 = (this.ioBuffer[($temp01 = num, 
          num = ((num + 1) | 0), 
          $temp01)] | 0);
        value.set((value.get() >>> 0) | ((num2 & 127) << 7));
        var flag5 = (num2 & 128) === 0;
        if (flag5) {
          result = 2;
        } else {
          if ((this.available | 0) === 2) {
            throw $thisType.EoF(this);
          }
          num2 = (this.ioBuffer[($temp02 = num, 
            num = ((num + 1) | 0), 
            $temp02)] | 0);
          value.set((value.get() >>> 0) | ((num2 & 127) << 14));
          var flag7 = (num2 & 128) === 0;
          if (flag7) {
            result = 3;
          } else {
            if ((this.available | 0) === 3) {
              throw $thisType.EoF(this);
            }
            num2 = (this.ioBuffer[($temp03 = num, 
              num = ((num + 1) | 0), 
              $temp03)] | 0);
            value.set((value.get() >>> 0) | ((num2 & 127) << 21));
            var flag9 = (num2 & 128) === 0;
            if (flag9) {
              result = 4;
            } else {
              if ((this.available | 0) === 4) {
                throw $thisType.EoF(this);
              }
              num2 = (this.ioBuffer[num] | 0);
              value.set((value.get() >>> 0) | (num2 << 28));
              var flag11 = (num2 & 240) === 0;
              if (flag11) {
                result = 5;
              } else {
                var flag12 = !(!trimNegative || 
                  ((num2 & 240) !== 240) || 
                  ((this.available | 0) < 10) || 
                  ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
                  ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
                  ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
                  ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255)) && 
                ((this.ioBuffer[((num + 1) | 0)] | 0) === 1);
                if (!flag12) {
                  throw $thisType.AddErrorData($S12().Construct(), this);
                }
                result = 10;
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function ProtoReader_TryReadUInt64VariantWithoutMoving (/* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08;
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set($T24().Create(0, 0, 0));
      var result = 0;
    } else {
      var num = (this.ioIndex | 0);
      value.set($T24().FromNumber(this.ioBuffer[($temp00 = num, 
            num = ((num + 1) | 0), 
            $temp00)]));
      var flag3 = $T24().op_Equality(
        $T24().op_BitwiseAnd(
          value.get(), 
          $T24().Create(128, 0, 0)
        ), 
        $T24().Create(0, 0, 0)
      );
      if (flag3) {
        result = 1;
      } else {
        value.set($T24().op_BitwiseAnd(
            value.get(), 
            $T24().Create(127, 0, 0)
          ));
        if ((this.available | 0) === 1) {
          throw $thisType.EoF(this);
        }
        var num2 = $T24().FromNumber(this.ioBuffer[($temp01 = num, 
            num = ((num + 1) | 0), 
            $temp01)]);
        value.set($T24().op_BitwiseOr(
            value.get(), 
            $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 7)
          ));
        var flag5 = $T24().op_Equality(
          $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
          $T24().Create(0, 0, 0)
        );
        if (flag5) {
          result = 2;
        } else {
          if ((this.available | 0) === 2) {
            throw $thisType.EoF(this);
          }
          num2 = $T24().FromNumber(this.ioBuffer[($temp02 = num, 
              num = ((num + 1) | 0), 
              $temp02)]);
          value.set($T24().op_BitwiseOr(
              value.get(), 
              $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 14)
            ));
          var flag7 = $T24().op_Equality(
            $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
            $T24().Create(0, 0, 0)
          );
          if (flag7) {
            result = 3;
          } else {
            if ((this.available | 0) === 3) {
              throw $thisType.EoF(this);
            }
            num2 = $T24().FromNumber(this.ioBuffer[($temp03 = num, 
                num = ((num + 1) | 0), 
                $temp03)]);
            value.set($T24().op_BitwiseOr(
                value.get(), 
                $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 21)
              ));
            var flag9 = $T24().op_Equality(
              $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
              $T24().Create(0, 0, 0)
            );
            if (flag9) {
              result = 4;
            } else {
              if ((this.available | 0) === 4) {
                throw $thisType.EoF(this);
              }
              num2 = $T24().FromNumber(this.ioBuffer[($temp04 = num, 
                  num = ((num + 1) | 0), 
                  $temp04)]);
              value.set($T24().op_BitwiseOr(
                  value.get(), 
                  $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 28)
                ));
              var flag11 = $T24().op_Equality(
                $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
                $T24().Create(0, 0, 0)
              );
              if (flag11) {
                result = 5;
              } else {
                if ((this.available | 0) === 5) {
                  throw $thisType.EoF(this);
                }
                num2 = $T24().FromNumber(this.ioBuffer[($temp05 = num, 
                    num = ((num + 1) | 0), 
                    $temp05)]);
                value.set($T24().op_BitwiseOr(
                    value.get(), 
                    $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 35)
                  ));
                var flag13 = $T24().op_Equality(
                  $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
                  $T24().Create(0, 0, 0)
                );
                if (flag13) {
                  result = 6;
                } else {
                  if ((this.available | 0) === 6) {
                    throw $thisType.EoF(this);
                  }
                  num2 = $T24().FromNumber(this.ioBuffer[($temp06 = num, 
                      num = ((num + 1) | 0), 
                      $temp06)]);
                  value.set($T24().op_BitwiseOr(
                      value.get(), 
                      $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 42)
                    ));
                  var flag15 = $T24().op_Equality(
                    $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
                    $T24().Create(0, 0, 0)
                  );
                  if (flag15) {
                    result = 7;
                  } else {
                    if ((this.available | 0) === 7) {
                      throw $thisType.EoF(this);
                    }
                    num2 = $T24().FromNumber(this.ioBuffer[($temp07 = num, 
                        num = ((num + 1) | 0), 
                        $temp07)]);
                    value.set($T24().op_BitwiseOr(
                        value.get(), 
                        $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 49)
                      ));
                    var flag17 = $T24().op_Equality(
                      $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
                      $T24().Create(0, 0, 0)
                    );
                    if (flag17) {
                      result = 8;
                    } else {
                      if ((this.available | 0) === 8) {
                        throw $thisType.EoF(this);
                      }
                      num2 = $T24().FromNumber(this.ioBuffer[($temp08 = num, 
                          num = ((num + 1) | 0), 
                          $temp08)]);
                      value.set($T24().op_BitwiseOr(
                          value.get(), 
                          $T24().op_LeftShift($T24().op_BitwiseAnd(num2, $T24().Create(127, 0, 0)), 56)
                        ));
                      var flag19 = $T24().op_Equality(
                        $T24().op_BitwiseAnd(num2, $T24().Create(128, 0, 0)), 
                        $T24().Create(0, 0, 0)
                      );
                      if (flag19) {
                        result = 9;
                      } else {
                        if ((this.available | 0) === 9) {
                          throw $thisType.EoF(this);
                        }
                        num2 = $T24().FromNumber(this.ioBuffer[num]);
                        value.set($T24().op_BitwiseOr(
                            value.get(), 
                            $T24().op_LeftShift(num2, 63)
                          ));
                        var flag21 = $T24().op_GreaterThan(
                          $T24().op_BitwiseAnd(num2, $T24().Create(16777214, 16777215, 65535)), 
                          $T24().Create(0, 0, 0)
                        );
                        if (flag21) {
                          throw $thisType.AddErrorData($S12().Construct(), this);
                        }
                        result = 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function ProtoReader_Zag$02 (ziggedValue) {
    return ((-((ziggedValue >>> 0) & 1) >>> 0) ^ (((ziggedValue | 0) >> 1) & 2147483647 >>> 0) | 0);
  }; 

  function ProtoReader_Zag$03 (ziggedValue) {
    return ($T24().op_ExclusiveOr(
        $T19().op_UnaryNegation(($T24().op_BitwiseAnd(ziggedValue, $T24().Create(1, 0, 0))).ToInt64()), 
        $T24().op_BitwiseAnd(
          $T24().op_RightShift(ziggedValue, 1), 
          $T24().Create(16777215, 16777215, 32767)
        )
      )).ToInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm11.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm11.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader__ctor$00
    );

    $.Method({Static:true , Public:false}, "AddErrorData", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$asm0F.TypeRef("System.Exception"), $.Type]), 
      ProtoReader_AddErrorData
    );

    $.Method({Static:true , Public:true }, "AppendBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoReader_AppendBytes
    );

    $.Method({Static:false, Public:true }, "Assert", 
      JSIL.MethodSignature.Action($asm11.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Assert
    );

    $.Method({Static:false, Public:false}, "CheckFullyConsumed", 
      JSIL.MethodSignature.Void, 
      ProtoReader_CheckFullyConsumed
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm0F.TypeRef("System.IO.Stream"), $asm11.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm11.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader_Create
    );

    $.Method({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.String]), 
      ProtoReader_CreateException
    );

    $.Method({Static:false, Public:false}, "CreateWireTypeException", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception")), 
      ProtoReader_CreateWireTypeException
    );

    $.Method({Static:false, Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$.String]), 
      ProtoReader_DeserializeType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoReader_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoReader_EndSubItem
    );

    $.Method({Static:false, Public:false}, "Ensure", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      ProtoReader_Ensure
    );

    $.Method({Static:true , Public:false}, "EoF", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Type]), 
      ProtoReader_EoF
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.SerializationContext")), 
      ProtoReader_get_Context
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoReader_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoReader_get_NetCache
    );

    $.Method({Static:false, Public:true }, "get_WireType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetRecycled", 
      JSIL.MethodSignature.Return($.Type), 
      ProtoReader_GetRecycled
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])]), 
      ProtoReader_GetTypeKey
    );

    $.Method({Static:true , Public:true }, "HasSubValue", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("ProtoBuf.WireType"), $.Type]), 
      ProtoReader_HasSubValue
    );

    $.Method({Static:false, Public:true }, "Hint", 
      JSIL.MethodSignature.Action($asm11.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Hint
    );

    $.Method({Static:true , Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm0F.TypeRef("System.IO.Stream"), 
          $asm11.TypeRef("ProtoBuf.Meta.TypeModel"), $asm11.TypeRef("ProtoBuf.SerializationContext"), 
          $.Int32
        ]), 
      ProtoReader_Init
    );

    $.Method({Static:false, Public:false}, "Intern", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ProtoReader_Intern
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [
          $.Type, $.Object, 
          $.Object
        ]), 
      ProtoReader_Merge
    );

    $.Method({Static:true , Public:true }, "NoteObject", 
      new JSIL.MethodSignature(null, [$.Object, $.Type]), 
      ProtoReader_NoteObject
    );

    $.Method({Static:false, Public:true }, "ReadBoolean", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoReader_ReadBoolean
    );

    $.Method({Static:false, Public:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Byte), 
      ProtoReader_ReadByte
    );

    $.Method({Static:false, Public:true }, "ReadDouble", 
      JSIL.MethodSignature.Return($.Double), 
      ProtoReader_ReadDouble
    );

    $.Method({Static:false, Public:true }, "ReadFieldHeader", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadFieldHeader
    );

    $.Method({Static:false, Public:true }, "ReadInt16", 
      JSIL.MethodSignature.Return($.Int16), 
      ProtoReader_ReadInt16
    );

    $.Method({Static:false, Public:true }, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadInt32
    );

    $.Method({Static:false, Public:true }, "ReadInt64", 
      JSIL.MethodSignature.Return($.Int64), 
      ProtoReader_ReadInt64
    );

    $.Method({Static:false, Public:true }, "ReadSByte", 
      JSIL.MethodSignature.Return($.SByte), 
      ProtoReader_ReadSByte
    );

    $.Method({Static:false, Public:true }, "ReadSingle", 
      JSIL.MethodSignature.Return($.Single), 
      ProtoReader_ReadSingle
    );

    $.Method({Static:false, Public:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String), 
      ProtoReader_ReadString
    );

    $.Method({Static:true , Public:false}, "ReadTypedObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type, $asm0F.TypeRef("System.Type")
        ]), 
      ProtoReader_ReadTypedObject
    );

    $.Method({Static:false, Public:true }, "ReadUInt16", 
      JSIL.MethodSignature.Return($.UInt16), 
      ProtoReader_ReadUInt16
    );

    $.Method({Static:false, Public:true }, "ReadUInt32", 
      JSIL.MethodSignature.Return($.UInt32), 
      ProtoReader_ReadUInt32
    );

    $.Method({Static:false, Public:false}, "ReadUInt32Variant", 
      new JSIL.MethodSignature($.UInt32, [$.Boolean]), 
      ProtoReader_ReadUInt32Variant
    );

    $.Method({Static:false, Public:true }, "ReadUInt64", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64
    );

    $.Method({Static:false, Public:false}, "ReadUInt64Variant", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Recycle", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoReader_Recycle
    );

    $.Method({Static:true , Public:false}, "Seek", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      ProtoReader_Seek
    );

    $.Method({Static:false, Public:false}, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoReader_SetRootObject
    );

    $.Method({Static:false, Public:true }, "SkipField", 
      JSIL.MethodSignature.Void, 
      ProtoReader_SkipField
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm11.TypeRef("ProtoBuf.SubItemToken"), [$.Type]), 
      ProtoReader_StartSubItem
    );

    $.Method({Static:false, Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $.Int32]), 
      ProtoReader_ThrowEnumException
    );

    $.Method({Static:false, Public:false}, "TrapNextObject", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoReader_TrapNextObject
    );

    $.Method({Static:false, Public:true }, "TryReadFieldHeader", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      ProtoReader_TryReadFieldHeader
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32Variant$01
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32VariantWithoutMoving
    );

    $.Method({Static:false, Public:false}, "TryReadUInt64VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt64])]), 
      ProtoReader_TryReadUInt64VariantWithoutMoving
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      ProtoReader_Zag$02
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int64, [$.UInt64]), 
      ProtoReader_Zag$03
    );

    $.Field({Static:false, Public:false}, "source", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "model", $asm11.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "dataRemaining", $.Int32);

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "available", $.Int32);

    $.Field({Static:false, Public:false}, "blockEnd", $.Int32);

    $.Field({Static:false, Public:false}, "wireType", $asm11.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "isFixedLength", $.Boolean);

    $.Field({Static:false, Public:false}, "internStrings", $.Boolean);

    $.Field({Static:false, Public:false}, "netCache", $asm11.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "trapCount", $.UInt32);

    $.Field({Static:false, Public:false}, "context", $asm11.TypeRef("ProtoBuf.SerializationContext"));

    $.Field({Static:false, Public:false}, "stringInterner", $asm0F.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm0F.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm0F.System.Byte, 0);
      });

    $.Field({Static:true , Public:false}, "lastReader", $.Type);


    function ProtoReader__cctor () {
      $thisType.encoding = $S00().Construct();
      $thisType.EmptyBlob = JSIL.Array.New($T01(), 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoReader__cctor
    );

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "WireType", $asm11.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "Context", $asm11.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Model", $asm11.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:false}, "NetCache", $asm11.TypeRef("ProtoBuf.NetObjectCache"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoWriter */ 

(function ProtoWriter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm11.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm11.ProtoBuf.SerializationContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm11.ProtoBuf.NetObjectCache)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.ArgumentException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm11.ProtoBuf.BufferPool)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm11.ProtoBuf.WireType)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm11.ProtoBuf.Meta.MutableList)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm11.ProtoBuf.ProtoException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm11.ProtoBuf.SubItemToken)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm11.ProtoBuf.PrefixStyle)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.OverflowException)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0F.System.BitConverter)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm0F.System.String))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Int16)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm11.ProtoBuf.DataFormat)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.SByte)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Text.Encoding)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0F.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.Text.UTF8Encoding, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String, $asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.ProtoException, [$asm0F.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentException, [$asm0F.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Single]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Double]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.OverflowException, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm0F.System.Byte), [$asm0F.System.Double]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.UInt32, [$asm0F.System.Int32]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.UInt64, [$asm0F.System.Int64]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Int32, $asm0F.System.Object, 
        $asm11.ProtoBuf.ProtoWriter
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm0F.System.Byte), [$asm0F.System.Single]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [$asm0F.System.String]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Int32, [
        $asm0F.System.String, $asm0F.System.Int32, 
        $asm0F.System.Int32, System.Array.Of($asm0F.System.Byte), 
        $asm0F.System.Int32
      ]))) ();
  };


  function ProtoWriter__ctor (dest, model, context) {
    this.netCache = new ($T04())();
    this.depth = 0;
    if (dest === null) {
      throw $S01().Construct("dest");
    }
    var flag2 = !dest.get_CanWrite();
    if (flag2) {
      throw $S02().Construct("Cannot write to stream", "dest");
    }
    this.dest = dest;
    this.ioBuffer = $T08().GetBuffer();
    this.model = model;
    this.wireType = $T09().None;
    var flag3 = context === null;
    if (flag3) {
      context = $T03().get_Default();
    } else {
      context.Freeze();
    }
    this.context = context;
  }; 

  function ProtoWriter_CheckRecursionStackAndPush (instance) {
    var num = 0;
    if (this.recursionStack === null) {
      this.recursionStack = new ($T0C())();
    } else {
      var flag2 = (instance !== null) && 
      ((num = ((this.recursionStack).IndexOfReference(instance) | 0)) >= 0);
      if (flag2) {
        $T0E().DebugWriteLine("Stack:");

        for (var enumerator = (this.recursionStack).GetEnumerator(); enumerator.MoveNext(); ) {
          var current = enumerator.get_Current();
          $T0E().DebugWriteLine((
              (current === null)
                 ? "<null>"
                 : current.toString())
          );
        }
        $T0E().DebugWriteLine((
            (instance === null)
               ? "<null>"
               : instance.toString())
        );
        throw $S03().Construct(("Possible recursion detected (offset: " + (((((this.recursionStack).get_Count() | 0) - num) | 0)).toString() + " level(s)): " + instance.toString()));
      }
    }
    (this.recursionStack).Add(instance);
  }; 

  function ProtoWriter_Close () {
    if (((this.depth | 0) !== 0) || ((this.flushLock >>> 0) > (0 >>> 0))) {
      throw $S04().Construct("Unable to close stream in an incomplete state");
    }
    this.Dispose();
  }; 

  function ProtoWriter_CreateException (writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    return $S03().Construct(("Invalid serialization operation with wire-type " + (writer.wireType).toString() + " at position " + (writer.position).toString()));
  }; 

  function ProtoWriter_DemandSpace (required, writer) {
    var flag = (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) < (required | 0);
    if (flag) {
      var flag2 = (writer.flushLock | 0) === 0;
      if (flag2) {
        $thisType.Flush(writer);
        var flag3 = (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) >= (required | 0);
        if (flag3) {
          return;
        }
      }
      $T08().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(writer, "ioBuffer"), (((required | 0) + (writer.ioIndex | 0)) | 0), 0, writer.ioIndex);
    }
  }; 

  function ProtoWriter_Dispose () {
    if (this.dest !== null) {
      $thisType.Flush(this);
      this.dest = null;
    }
    this.model = null;
    $T08().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
  }; 

  function ProtoWriter_EndSubItem$00 (token, writer) {
    $thisType.EndSubItem(token, writer, $T16().Base128);
  }; 

  function ProtoWriter_EndSubItem$01 (token, writer, style) {
    var $temp00;
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().None;
    if (flag2) {
      throw $thisType.CreateException(writer);
    }
    var value = (token.value | 0);
    var flag3 = (writer.depth | 0) <= 0;
    if (flag3) {
      throw $thisType.CreateException(writer);
    }
    var num = (writer.depth | 0);
    writer.depth = ((num - 1) | 0);
    var flag4 = num > 25;
    if (flag4) {
      writer.PopRecursionStack();
    }
    writer.packedFieldNumber = 0;
    var flag5 = value < 0;
    if (flag5) {
      $thisType.WriteHeaderCore((-value | 0), $T09().EndGroup, writer);
      writer.wireType = $T09().None;
    } else {
      switch (style.valueOf()) {
        case 1: 
          var num2 = (((((writer.ioIndex | 0) - value) | 0) - 1) | 0);
          var num3 = 0;
          var num4 = (num2 >>> 0);

          while ((num4 = num4 >>> (7 >>> 0)) > 0) {
            num3 = ((num3 + 1) | 0);
          }
          var flag6 = num3 === 0;
          if (flag6) {
            writer.ioBuffer[value] = (num2 & 127 & 0xFF);
          } else {
            $thisType.DemandSpace(num3, writer);
            var array = writer.ioBuffer;
            $T0E().BlockCopy(
              array, 
              ((value + 1) | 0), 
              array, 
              ((((value + 1) | 0) + num3) | 0), 
              num2
            );
            num4 = (num2 >>> 0);

            do {
              array[($temp00 = value, 
                value = ((value + 1) | 0), 
                $temp00)] = ((num4 & 127) | 128 & 0xFF);
            } while ((num4 = num4 >>> (7 >>> 0)) > 0);
            array[((value - 1) | 0)] = ((array[((value - 1) | 0)] | 0) & -129 & 0xFF);
            writer.position = (((writer.position | 0) + num3) | 0);
            writer.ioIndex = (((writer.ioIndex | 0) + num3) | 0);
          }
          break;

        case 2: 
          num2 = (((((writer.ioIndex | 0) - value) | 0) - 4) | 0);
          $thisType.WriteInt32ToBuffer(num2, writer.ioBuffer, value);
          break;

        case 3: 
          num2 = (((((writer.ioIndex | 0) - value) | 0) - 4) | 0);
          var array2 = writer.ioBuffer;
          $thisType.WriteInt32ToBuffer(num2, array2, value);
          var b = (array2[value] | 0);
          array2[value] = (array2[((value + 3) | 0)] | 0);
          array2[((value + 3) | 0)] = b;
          b = (array2[((value + 1) | 0)] | 0);
          array2[((value + 1) | 0)] = (array2[((value + 2) | 0)] | 0);
          array2[((value + 2) | 0)] = b;
          break;

        default: 
          throw $S05().Construct("style");

      }
      num = (((writer.flushLock | 0) - 1) | 0);
      writer.flushLock = num;
      var flag7 = (num === 0) && 
      ((writer.ioIndex | 0) >= 1024);
      if (flag7) {
        $thisType.Flush(writer);
      }
    }
  }; 

  function ProtoWriter_Flush (writer) {
    var flag = ((writer.flushLock | 0) === 0) && 
    ((writer.ioIndex >>> 0) > (0 >>> 0));
    if (flag) {
      (writer.dest).Write(writer.ioBuffer, 0, writer.ioIndex);
      writer.ioIndex = 0;
    }
  }; 

  function ProtoWriter_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoWriter_get_WireType () {
    return this.wireType;
  }; 

  function ProtoWriter_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoWriter_IncrementedAndReset (length, writer) {
    $T0E().DebugAssert((length | 0) >= 0);
    writer.ioIndex = (((writer.ioIndex | 0) + (length | 0)) | 0);
    writer.position = (((writer.position | 0) + (length | 0)) | 0);
    writer.wireType = $T09().None;
  }; 

  function ProtoWriter_PopRecursionStack () {
    (this.recursionStack).RemoveLast();
  }; 

  function ProtoWriter_SerializeType (type) {
    return $T02().SerializeType(this.model, type);
  }; 

  function ProtoWriter_SetRootObject (value) {
    (this.get_NetCache()).SetKeyedObject(0, value);
  }; 

  function ProtoWriter_StartSubItem$02 (instance, writer) {
    return $thisType.StartSubItem(instance, writer, false);
  }; 

  function ProtoWriter_StartSubItem$03 (instance, writer, allowFixed) {
    var subItemToken = new ($T15())();
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var num = (((writer.depth | 0) + 1) | 0);
    writer.depth = num;
    var flag2 = num > 25;
    if (flag2) {
      writer.CheckRecursionStackAndPush(instance);
    }
    var flag3 = (writer.packedFieldNumber >>> 0) > (0 >>> 0);
    if (flag3) {
      throw $S04().Construct("Cannot begin a sub-item while performing packed encoding");
    }
    switch ((writer.wireType).valueOf()) {
      case 2: 
        var flag4 = (writer.model !== null) && 
        (writer.model).get_ForwardsOnly();
        if (flag4) {
          throw $S03().Construct("Should not be buffering data");
        }
        writer.wireType = $T09().None;
        $thisType.DemandSpace(32, writer);
        writer.flushLock = (((writer.flushLock | 0) + 1) | 0);
        writer.position = (((writer.position | 0) + 1) | 0);
        num = (writer.ioIndex | 0);
        writer.ioIndex = ((num + 1) | 0);
        var result = new ($T15())(num);
        return result;

      case 3: 
        writer.wireType = $T09().None;
        result = new ($T15())((-writer.fieldNumber | 0));
        return result;

      case 5: 
        if (!allowFixed) {
          throw $thisType.CreateException(writer);
        }
        $thisType.DemandSpace(32, writer);
        writer.flushLock = (((writer.flushLock | 0) + 1) | 0);
        subItemToken = new ($T15())(writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        result = subItemToken;
        return result;

    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_System_IDisposable_Dispose () {
    this.Dispose();
  }; 

  function ProtoWriter_ThrowEnumException (writer, enumValue) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var str = (
      (enumValue === null)
         ? "<null>"
         : ((JSIL.GetType(enumValue)).get_FullName() + "." + enumValue.toString()))
    ;
    throw $S03().Construct(("No wire-value is mapped to the enum " + str + " at position " + (writer.position).toString()));
  }; 

  function ProtoWriter_WriteBoolean (value, writer) {
    $thisType.WriteUInt32((
        value
           ? 1
           : 0)
      , writer);
  }; 

  function ProtoWriter_WriteByte (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteBytes$04 (data, writer) {
    var flag = data === null;
    if (flag) {
      throw $S01().Construct("data");
    }
    $thisType.WriteBytes(data, 0, data.length, writer);
  }; 

  function ProtoWriter_WriteBytes$05 (data, offset, length, writer) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var flag = data === null;
          if (flag) {
            throw $S01().Construct("data");
          }
          var flag2 = writer === null;
          if (flag2) {
            throw $S01().Construct("writer");
          }
          switch ((writer.wireType).valueOf()) {
            case 1: 
              if ((length | 0) !== 8) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_EE */ ;
              continue $labelgroup0;

            case 2: 
              $thisType.WriteUInt32Variant((length >>> 0), writer);
              writer.wireType = $T09().None;
              if ((length | 0) === 0) {
                return;
              }
              var flag5 = ((writer.flushLock | 0) !== 0) || 
              ((length | 0) <= (writer.ioBuffer.length | 0));
              if (flag5) {
                $label0 = 1 /* goto IL_EE */ ;
                continue $labelgroup0;
              }
              $thisType.Flush(writer);
              (writer.dest).Write(data, offset, length);
              writer.position = (((writer.position | 0) + (length | 0)) | 0);
              return;

            case 5: 
              if ((length | 0) !== 4) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_EE */ ;
              continue $labelgroup0;

          }
          throw $thisType.CreateException(writer);

          $label0 = 1 /* goto IL_EE */ ;
          continue $labelgroup0;
        case 1: /* IL_EE */ 
          $thisType.DemandSpace(length, writer);
          $T0E().BlockCopy(
            data, 
            offset, 
            writer.ioBuffer, 
            writer.ioIndex, 
            length
          );
          $thisType.IncrementedAndReset(length, writer);

          break $labelgroup0;
      }
    }
  }; 

  function ProtoWriter_WriteDouble (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType !== $T09().Fixed64) {
      if (wireType !== $T09().Fixed32) {
        throw $thisType.CreateException(writer);
      }
      var value2 = Math.fround(value);
      var flag2 = $S07().CallStatic($T0E(), "IsInfinity", null, value2) && 
      !$S08().CallStatic($T0E(), "IsInfinity", null, value);
      if (flag2) {
        throw $S09().Construct();
      }
      $thisType.WriteSingle(value2, writer);
    } else {
      $thisType.WriteInt64($T1D().ToInt64($S0A().CallStatic($T1D(), "GetBytes", null, value), 0), writer);
    }
  }; 

  function ProtoWriter_WriteFieldHeader (fieldNumber, wireType, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().None;
    if (flag2) {
      throw $S04().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T11(), ["Cannot write a ", wireType.toString(), " header until the ", (writer.wireType).toString(), " data has been written"])));
    }
    if ((fieldNumber | 0) < 0) {
      throw $S05().Construct("fieldNumber");
    }
    switch (wireType.valueOf()) {
      case 0: 
      case 1: 
      case 2: 
      case 3: 
      case 5: 
      case 8: 
        var flag4 = (writer.packedFieldNumber | 0) === 0;
        if (flag4) {
          writer.fieldNumber = (fieldNumber | 0);
          writer.wireType = wireType;
          $thisType.WriteHeaderCore(fieldNumber, wireType, writer);
        } else {
          var flag5 = (writer.packedFieldNumber | 0) === (fieldNumber | 0);
          if (flag5) {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  var wireType2 = wireType;
                  if (wireType2 <= $T09().Fixed64) {
                    if (!(((wireType2.valueOf() | 0) === 0) || (wireType2 === $T09().Fixed64))) {
                      $label0 = 1 /* goto IL_13E */ ;
                      continue $labelgroup0;
                    }
                  } else if (!((wireType2 === $T09().Fixed32) || (wireType2 === $T09().SignedVariant))) {
                    $label0 = 1 /* goto IL_13E */ ;
                    continue $labelgroup0;
                  }
                  writer.fieldNumber = (fieldNumber | 0);
                  writer.wireType = wireType;
                  return;

                  $label0 = 1 /* goto IL_13E */ ;
                  continue $labelgroup0;
                case 1: /* IL_13E */ 
                  throw $S04().Construct(JSIL.ConcatString("Wire-type cannot be encoded as packed: ", wireType.toString()));

                  break $labelgroup0;
              }
            }
          }
          throw $S04().Construct(("Field mismatch during packed encoding; expected " + (writer.packedFieldNumber).toString() + " but received " + (fieldNumber).toString()));
        }
        return;

    }
    throw $S02().Construct(JSIL.ConcatString("Invalid wire-type: ", wireType.toString()), "wireType");
  }; 

  function ProtoWriter_WriteHeaderCore (fieldNumber, wireType, writer) {
    var value = (((fieldNumber | 0) << 3) | (($T09().$Cast(wireType & $T09().$Cast(7))).valueOf() | 0) >>> 0);
    $thisType.WriteUInt32Variant(value, writer);
  }; 

  function ProtoWriter_WriteInt16 (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteInt32 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T09().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        if ((value | 0) >= 0) {
          $thisType.WriteUInt32Variant((value >>> 0), writer);
          writer.wireType = $T09().None;
        } else {
          $thisType.DemandSpace(10, writer);
          var array = writer.ioBuffer;
          var num = (writer.ioIndex | 0);
          array[num] = ((value | 0) | 128 & 0xFF);
          array[((num + 1) | 0)] = (((value | 0) >> 7) | 128 & 0xFF);
          array[((num + 2) | 0)] = (((value | 0) >> 14) | 128 & 0xFF);
          array[((num + 3) | 0)] = (((value | 0) >> 21) | 128 & 0xFF);
          array[((num + 4) | 0)] = (((value | 0) >> 28) | 128 & 0xFF);
          array[((num + 5) | 0)] = array[((num + 6) | 0)] = array[((num + 7) | 0)] = array[((num + 8) | 0)] = 255;
          array[((num + 9) | 0)] = 1;
          $thisType.IncrementedAndReset(10, writer);
        }
        return;
      }
      if (wireType === $T09().Fixed64) {
        $thisType.DemandSpace(8, writer);
        array = writer.ioBuffer;
        num = (writer.ioIndex | 0);
        array[num] = (value & 0xFF);
        array[((num + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
        array[((num + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
        array[((num + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
        array[((num + 4) | 0)] = array[((num + 5) | 0)] = array[((num + 6) | 0)] = array[((num + 7) | 0)] = 0;
        $thisType.IncrementedAndReset(8, writer);
        return;
      }
    } else {
      if (wireType === $T09().Fixed32) {
        $thisType.DemandSpace(4, writer);
        $thisType.WriteInt32ToBuffer(value, writer.ioBuffer, writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        return;
      }
      if (wireType === $T09().SignedVariant) {
        $thisType.WriteUInt32Variant($S0B().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T09().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteInt32ToBuffer (value, buffer, index) {
    buffer[index] = (value & 0xFF);
    buffer[(((index | 0) + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
    buffer[(((index | 0) + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
    buffer[(((index | 0) + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
  }; 

  function ProtoWriter_WriteInt64 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T09().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        if ($T20().op_GreaterThanOrEqual(value, $T20().Create(0, 0, 0))) {
          $thisType.WriteUInt64Variant(value.ToUInt64(), writer);
          writer.wireType = $T09().None;
        } else {
          $thisType.DemandSpace(10, writer);
          var array = writer.ioBuffer;
          var num = (writer.ioIndex | 0);
          array[num] = (($T20().op_BitwiseOr(value, $T20().Create(128, 0, 0))).ToNumber(255, false) | 0);
          array[((num + 1) | 0)] = ((($T20().op_RightShift(value, 7)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 2) | 0)] = ((($T20().op_RightShift(value, 14)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 3) | 0)] = ((($T20().op_RightShift(value, 21)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 4) | 0)] = ((($T20().op_RightShift(value, 28)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 5) | 0)] = ((($T20().op_RightShift(value, 35)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 6) | 0)] = ((($T20().op_RightShift(value, 42)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 7) | 0)] = ((($T20().op_RightShift(value, 49)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 8) | 0)] = ((($T20().op_RightShift(value, 56)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
          array[((num + 9) | 0)] = 1;
          $thisType.IncrementedAndReset(10, writer);
        }
        return;
      }
      if (wireType === $T09().Fixed64) {
        $thisType.DemandSpace(8, writer);
        array = writer.ioBuffer;
        num = (writer.ioIndex | 0);
        array[num] = (value.ToNumber(255, false) | 0);
        array[((num + 1) | 0)] = (($T20().op_RightShift(value, 8)).ToNumber(255, false) | 0);
        array[((num + 2) | 0)] = (($T20().op_RightShift(value, 16)).ToNumber(255, false) | 0);
        array[((num + 3) | 0)] = (($T20().op_RightShift(value, 24)).ToNumber(255, false) | 0);
        array[((num + 4) | 0)] = (($T20().op_RightShift(value, 32)).ToNumber(255, false) | 0);
        array[((num + 5) | 0)] = (($T20().op_RightShift(value, 40)).ToNumber(255, false) | 0);
        array[((num + 6) | 0)] = (($T20().op_RightShift(value, 48)).ToNumber(255, false) | 0);
        array[((num + 7) | 0)] = (($T20().op_RightShift(value, 56)).ToNumber(255, false) | 0);
        $thisType.IncrementedAndReset(8, writer);
        return;
      }
    } else {
      if (wireType === $T09().Fixed32) {
        $thisType.WriteInt32($T0B().$OverflowCheck(value.ToNumber(4294967295, true)), writer);
        return;
      }
      if (wireType === $T09().SignedVariant) {
        $thisType.WriteUInt64Variant($S0C().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T09().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteObject$06 (value, key, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.model === null;
    if (flag2) {
      throw $S04().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(value, writer);
    if ((key | 0) >= 0) {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    } else {
      var flag4 = (writer.model !== null) && 
      (writer.model).TrySerializeAuxiliaryType(
        writer, 
        JSIL.GetType(value), 
        $T21().Default, 
        1, 
        value, 
        false
      );
      if (!flag4) {
        $T02().ThrowUnexpectedType(JSIL.GetType(value));
      }
    }
    $thisType.EndSubItem(token, writer);
  }; 

  function ProtoWriter_WriteSByte (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteSingle (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType !== $T09().Fixed64) {
      if (wireType !== $T09().Fixed32) {
        throw $thisType.CreateException(writer);
      }
      $thisType.WriteInt32($T1D().ToInt32($S0E().CallStatic($T1D(), "GetBytes", null, value), 0), writer);
    } else {
      $thisType.WriteDouble(value, writer);
    }
  }; 

  function ProtoWriter_WriteString (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var flag2 = writer.wireType !== $T09().String;
    if (flag2) {
      throw $thisType.CreateException(writer);
    }
    if (value === null) {
      throw $S01().Construct("value");
    }
    var length = (value.length | 0);
    var flag4 = length === 0;
    if (flag4) {
      $thisType.WriteUInt32Variant(0, writer);
      writer.wireType = $T09().None;
    } else {
      var byteCount = ($S0F().CallVirtual("GetByteCount", null, $thisType.encoding, value) | 0);
      $thisType.WriteUInt32Variant((byteCount >>> 0), writer);
      $thisType.DemandSpace(byteCount, writer);
      var bytes = ($S10().CallVirtual("GetBytes", null, $thisType.encoding, 
        value, 
        0, 
        value.length, 
        writer.ioBuffer, 
        writer.ioIndex
      ) | 0);
      $T0E().DebugAssert(byteCount === bytes);
      $thisType.IncrementedAndReset(bytes, writer);
    }
  }; 

  function ProtoWriter_WriteUInt16 (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteUInt32 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T09().Fixed64) {
        if (wireType !== $T09().Fixed32) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteInt32((value | 0), writer);
      } else {
        $thisType.WriteInt64($T20().FromNumber(value), writer);
      }
    } else {
      $thisType.WriteUInt32Variant(value, writer);
      writer.wireType = $T09().None;
    }
  }; 

  function ProtoWriter_WriteUInt32Variant (value, writer) {
    $thisType.DemandSpace(5, writer);
    var num = 0;

    do {
      var arg_2E_0 = writer.ioBuffer;
      var num2 = (writer.ioIndex | 0);
      writer.ioIndex = ((num2 + 1) | 0);
      arg_2E_0[num2] = (((value >>> 0) & 127) | 128 & 0xFF);
      num = ((num + 1) | 0);
    } while ((value = (value >>> 0) >>> (7 >>> 0)) > 0);
    var expr_54_cp_0 = writer.ioBuffer;
    var expr_54_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    expr_54_cp_0[expr_54_cp_1] = (expr_54_cp_0[expr_54_cp_1] | 0) & 127;
    writer.position = (((writer.position | 0) + num) | 0);
  }; 

  function ProtoWriter_WriteUInt64 (value, writer) {
    var flag = writer === null;
    if (flag) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) !== 0) {
      if (wireType !== $T09().Fixed64) {
        if (wireType !== $T09().Fixed32) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteUInt32($T12().$OverflowCheck(value.ToNumber(4294967295, false)), writer);
      } else {
        $thisType.WriteInt64(value.ToInt64(), writer);
      }
    } else {
      $thisType.WriteUInt64Variant(value, writer);
      writer.wireType = $T09().None;
    }
  }; 

  function ProtoWriter_WriteUInt64Variant (value, writer) {
    $thisType.DemandSpace(10, writer);
    var num = 0;

    do {
      var arg_31_0 = writer.ioBuffer;
      var num2 = (writer.ioIndex | 0);
      writer.ioIndex = ((num2 + 1) | 0);
      arg_31_0[num2] = (($T25().op_BitwiseOr(
          $T25().op_BitwiseAnd(value, $T25().Create(127, 0, 0)), 
          $T25().Create(128, 0, 0)
        )).ToNumber(255, false) | 0);
      num = ((num + 1) | 0);
    } while ($T25().op_GreaterThan(
        value = $T25().op_RightShift(value, (7 >>> 0)), 
        $T25().Create(0, 0, 0)
      ));
    var expr_58_cp_0 = writer.ioBuffer;
    var expr_58_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    expr_58_cp_0[expr_58_cp_1] = (expr_58_cp_0[expr_58_cp_1] | 0) & 127;
    writer.position = (((writer.position | 0) + num) | 0);
  }; 

  function ProtoWriter_Zig$07 (value) {
    return (((value | 0) << 1) ^ ((value | 0) >> 31) >>> 0);
  }; 

  function ProtoWriter_Zig$08 (value) {
    return ($T20().op_ExclusiveOr(
        $T20().op_LeftShift(value, 1), 
        $T20().op_RightShift(value, 63)
      )).ToUInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $asm11.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm11.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      ProtoWriter__ctor
    );

    $.Method({Static:false, Public:false}, "CheckRecursionStackAndPush", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_CheckRecursionStackAndPush
    );

    $.Method({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Close
    );

    $.Method({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Exception"), [$.Type]), 
      ProtoWriter_CreateException
    );

    $.Method({Static:true , Public:false}, "DemandSpace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_DemandSpace
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoWriter_EndSubItem$00
    );

    $.Method({Static:true , Public:false}, "EndSubItem", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("ProtoBuf.SubItemToken"), $.Type, 
          $asm11.TypeRef("ProtoBuf.PrefixStyle")
        ]), 
      ProtoWriter_EndSubItem$01
    );

    $.Method({Static:true , Public:false}, "Flush", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoWriter_Flush
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoWriter_get_NetCache
    );

    $.Method({Static:false, Public:false}, "get_WireType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.WireType")), 
      ProtoWriter_get_WireType
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])]), 
      ProtoWriter_GetTypeKey
    );

    $.Method({Static:true , Public:false}, "IncrementedAndReset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_IncrementedAndReset
    );

    $.Method({Static:false, Public:false}, "PopRecursionStack", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_PopRecursionStack
    );

    $.Method({Static:false, Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Type")]), 
      ProtoWriter_SerializeType
    );

    $.Method({Static:false, Public:true }, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_SetRootObject
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm11.TypeRef("ProtoBuf.SubItemToken"), [$.Object, $.Type]), 
      ProtoWriter_StartSubItem$02
    );

    $.Method({Static:true , Public:false}, "StartSubItem", 
      new JSIL.MethodSignature($asm11.TypeRef("ProtoBuf.SubItemToken"), [
          $.Object, $.Type, 
          $.Boolean
        ]), 
      ProtoWriter_StartSubItem$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_System_IDisposable_Dispose
    )
      .Overrides($asm0F.TypeRef("System.IDisposable"), "Dispose");

    $.Method({Static:true , Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$.Type, $.Object]), 
      ProtoWriter_ThrowEnumException
    );

    $.Method({Static:true , Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Type]), 
      ProtoWriter_WriteBoolean
    );

    $.Method({Static:true , Public:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte, $.Type]), 
      ProtoWriter_WriteByte
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoWriter_WriteBytes$04
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Type
        ]), 
      ProtoWriter_WriteBytes$05
    );

    $.Method({Static:true , Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double, $.Type]), 
      ProtoWriter_WriteDouble
    );

    $.Method({Static:true , Public:true }, "WriteFieldHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteFieldHeader
    );

    $.Method({Static:true , Public:false}, "WriteHeaderCore", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteHeaderCore
    );

    $.Method({Static:true , Public:true }, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int16, $.Type]), 
      ProtoWriter_WriteInt16
    );

    $.Method({Static:true , Public:true }, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_WriteInt32
    );

    $.Method({Static:true , Public:false}, "WriteInt32ToBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      ProtoWriter_WriteInt32ToBuffer
    );

    $.Method({Static:true , Public:true }, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $.Type]), 
      ProtoWriter_WriteInt64
    );

    $.Method({Static:true , Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoWriter_WriteObject$06
    );

    $.Method({Static:true , Public:true }, "WriteSByte", 
      new JSIL.MethodSignature(null, [$.SByte, $.Type]), 
      ProtoWriter_WriteSByte
    );

    $.Method({Static:true , Public:true }, "WriteSingle", 
      new JSIL.MethodSignature(null, [$.Single, $.Type]), 
      ProtoWriter_WriteSingle
    );

    $.Method({Static:true , Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $.Type]), 
      ProtoWriter_WriteString
    );

    $.Method({Static:true , Public:true }, "WriteUInt16", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Type]), 
      ProtoWriter_WriteUInt16
    );

    $.Method({Static:true , Public:true }, "WriteUInt32", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32
    );

    $.Method({Static:true , Public:false}, "WriteUInt32Variant", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32Variant
    );

    $.Method({Static:true , Public:true }, "WriteUInt64", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64
    );

    $.Method({Static:true , Public:false}, "WriteUInt64Variant", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt32, [$.Int32]), 
      ProtoWriter_Zig$07
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt64, [$.Int64]), 
      ProtoWriter_Zig$08
    );

    $.Field({Static:false, Public:false}, "dest", $asm0F.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "model", $asm11.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "netCache", $asm11.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "flushLock", $.Int32);

    $.Field({Static:false, Public:false}, "wireType", $asm11.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "recursionStack", $asm11.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm11.TypeRef("ProtoBuf.SerializationContext"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm0F.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:false, Public:false}, "packedFieldNumber", $.Int32);


    function ProtoWriter__cctor () {
      $thisType.encoding = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoWriter__cctor
    );

    $.Property({Static:false, Public:false}, "NetCache", $asm11.TypeRef("ProtoBuf.NetObjectCache"));

    $.Property({Static:false, Public:false}, "WireType", $asm11.TypeRef("ProtoBuf.WireType"));

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.SerializationContext */ 

(function SerializationContext$Members () {
  var $, $thisType;

  function SerializationContext__ctor () {
  }; 

  function SerializationContext_Freeze () {
    this.frozen = true;
  }; 

  function SerializationContext_get_Default () {
    return $thisType.$default;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.SerializationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__ctor
    );

    $.Method({Static:false, Public:false}, "Freeze", 
      JSIL.MethodSignature.Void, 
      SerializationContext_Freeze
    );

    $.Method({Static:true , Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      SerializationContext_get_Default
    );

    $.Field({Static:false, Public:false}, "frozen", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "$default", $.Type);


    function SerializationContext__cctor () {
      $thisType.$default = new $thisType();
      $thisType.$default.Freeze();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__cctor
    );

    $.Property({Static:true , Public:false}, "Default", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.SubItemToken */ 

(function SubItemToken$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Int32)) ();
  };


  function SubItemToken__ctor (value) {
    this.value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.SubItemToken", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      SubItemToken__ctor
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.WireType */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.WireType", 
    BaseType: $asm0F.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Variant: 0, 
    Fixed64: 1, 
    String: 2, 
    StartGroup: 3, 
    EndGroup: 4, 
    Fixed32: 5, 
    SignedVariant: 8, 
  }
);

JSIL.DeclareNamespace("ProtoBuf.Meta");
/* class ProtoBuf.Meta.BasicList */ 

(function BasicList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Array)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Int32)) ();
  };


  function BasicList__ctor () {
    this.head = $thisType.nil;
  }; 

  function BasicList_Add (value) {
    return ((((this.head = (this.head).Append(value)).get_Length() | 0) - 1) | 0);
  }; 

  function BasicList_Contains (value) {

    for (var enumerator = this.GetEnumerator(); enumerator.MoveNext(); ) {
      var current = enumerator.get_Current();
      var flag = (JSIL.ObjectEquals(current, value));
      if (flag) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  }; 

  function BasicList_CopyTo (array, offset) {
    (this.head).CopyTo(array, offset);
  }; 

  function BasicList_get_Count () {
    return (this.head).get_Length();
  }; 

  function BasicList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function BasicList_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  function BasicList_IndexOfReference (instance) {
    return (this.head).IndexOfReference(instance);
  }; 

  function BasicList_System_Collections_IEnumerable_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BasicList__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_Add
    );

    $.Method({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BasicList_Contains
    );

    $.Method({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32]), 
      BasicList_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      BasicList_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      BasicList_get_Item
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm11.TypeRef("ProtoBuf.Meta.BasicList+NodeEnumerator")), 
      BasicList_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_IndexOfReference
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Collections.IEnumerator")), 
      BasicList_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false, ReadOnly:true }, "nil", $asm11.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Field({Static:false, Public:false}, "head", $asm11.TypeRef("ProtoBuf.Meta.BasicList+Node"));


    function BasicList__cctor () {
      $thisType.nil = new ($T00())(null, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BasicList__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.Meta.BasicList+NodeEnumerator */ 

(function NodeEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };


  function NodeEnumerator__ctor (node) {
    this.position = -1;
    this.node = node;
  }; 

  function NodeEnumerator_get_Current () {
    return (this.node).get_Item(this.position);
  }; 

  function NodeEnumerator_MoveNext () {
    var length = ((this.node).get_Length() | 0);
    if ((this.position | 0) <= length) {
      var num = (((this.position | 0) + 1) | 0);
      this.position = num;
      var arg_2D_0 = num < length;
    } else {
      arg_2D_0 = false;
    }
    return arg_2D_0;
  }; 

  function NodeEnumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Meta.BasicList+NodeEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("ProtoBuf.Meta.BasicList+Node")), 
      NodeEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      NodeEnumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      NodeEnumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      NodeEnumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm0F.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "node", $asm11.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList+Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Array)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Array, $asm0F.System.Array, 
        $asm0F.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Array, $asm0F.System.Int32, 
        $asm0F.System.Array, $asm0F.System.Int32, 
        $asm0F.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentOutOfRangeException, [$asm0F.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, null))) ();
  };


  function Node__ctor (data, length) {
    $T02().DebugAssert(((data === null) && 
        ((length | 0) === 0)) || (!((data === null) || 
          ((length | 0) <= 0)) && 
        ((length | 0) <= (data.length | 0))));
    this.data = data;
    this.$length = (length | 0);
  }; 

  function Node_Append (value) {
    var num = (((this.$length | 0) + 1) | 0);
    if (this.data === null) {
      var array = JSIL.Array.New($T03(), 10);
    } else {
      var flag2 = (this.$length | 0) === (this.data.length | 0);
      if (flag2) {
        array = JSIL.Array.New($T03(), Math.imul(this.data.length, 2));
        $S00().CallStatic($T05(), "Copy", null, this.data, array, this.$length);
      } else {
        array = this.data;
      }
    }
    array[this.$length] = value;
    return new $thisType(array, num);
  }; 

  function Node_Clear () {
    if (this.data !== null) {
      JSIL.Array.Erase(this.data, $T03().__Type__, 0, this.data.length);
    }
    this.$length = 0;
  }; 

  function Node_CopyTo (array, offset) {
    if ((this.$length | 0) > 0) {
      $S01().CallStatic($T05(), "Copy", null, 
        this.data, 
        0, 
        array, 
        offset, 
        this.$length
      );
    }
  }; 

  function Node_get_Item (index) {
    var flag = ((index | 0) >= 0) && 
    ((index | 0) < (this.$length | 0));
    if (flag) {
      return this.data[index];
    }
    throw $S02().Construct("index");
  }; 

  function Node_get_Length () {
    return this.$length;
  }; 

  function Node_IndexOfReference (instance) {

    for (var i = 0; i < (this.$length | 0); i = ((i + 1) | 0)) {
      var flag = instance === this.data[i];
      if (flag) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  }; 

  function Node_RemoveLastWithMutate () {
    if ((this.$length | 0) === 0) {
      throw $S03().Construct();
    }
    this.$length = (((this.$length | 0) - 1) | 0);
  }; 

  function Node_set_Item (index, value) {
    var flag = ((index | 0) >= 0) && 
    ((index | 0) < (this.$length | 0));
    if (flag) {
      this.data[index] = value;
      return;
    }
    throw $S02().Construct("index");
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32]), 
      Node__ctor
    );

    $.Method({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Object]), 
      Node_Append
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      Node_Clear
    );

    $.Method({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Array"), $.Int32]), 
      Node_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      Node_get_Item
    );

    $.Method({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32), 
      Node_get_Length
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      Node_IndexOfReference
    );

    $.Method({Static:false, Public:true }, "RemoveLastWithMutate", 
      JSIL.MethodSignature.Void, 
      Node_RemoveLastWithMutate
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      Node_set_Item
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "data", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.MutableList */ 

(function MutableList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.Object)) ();
  };


  function MutableList__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MutableList_Clear () {
    (this.head).Clear();
  }; 

  function MutableList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function MutableList_RemoveLast () {
    (this.head).RemoveLastWithMutate();
  }; 

  function MutableList_set_Item (index, value) {
    (this.head).set_Item(index, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm11.TypeRef("ProtoBuf.Meta.BasicList"), 
      Name: "ProtoBuf.Meta.MutableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MutableList__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      MutableList_Clear
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      MutableList_get_Item
    );

    $.Method({Static:false, Public:true }, "RemoveLast", 
      JSIL.MethodSignature.Void, 
      MutableList_RemoveLast
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      MutableList_set_Item
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeFormatEventArgs */ 

(function TypeFormatEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.EventArgs)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };


  function TypeFormatEventArgs__ctor$00 (formattedName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(formattedName)) {
      throw $S00().Construct("formattedName");
    }
    this.formattedName = formattedName;
  }; 

  function TypeFormatEventArgs__ctor$01 (type) {
    $T01().prototype._ctor.call(this);
    if (type === null) {
      throw $S00().Construct("type");
    }
    this.type = type;
    this.typeFixed = true;
  }; 

  function TypeFormatEventArgs_get_FormattedName () {
    return this.formattedName;
  }; 

  function TypeFormatEventArgs_get_Type () {
    return this.type;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.TypeFormatEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      TypeFormatEventArgs__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type")), 
      TypeFormatEventArgs__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_FormattedName", 
      JSIL.MethodSignature.Return($.String), 
      TypeFormatEventArgs_get_FormattedName
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Type")), 
      TypeFormatEventArgs_get_Type
    );

    $.Field({Static:false, Public:false}, "type", $asm0F.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "formattedName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "typeFixed", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm0F.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "FormattedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.TypeFormatEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.TypeFormatEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Object"), $asm11.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs")]));

/* class ProtoBuf.Meta.TypeModel */ 

(function TypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.Array)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm11.ProtoBuf.Helpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0F.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm0F.System.Type))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.Collections.Generic.List$b1)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.Activator)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0F.System.NotSupportedException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0F.System.IO.Stream)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm11.ProtoBuf.SerializationContext)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm11.ProtoBuf.ProtoReader)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm11.ProtoBuf.DataFormat)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm11.ProtoBuf.Meta.TypeFormatEventHandler)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm11.ProtoBuf.Meta.TypeFormatEventArgs)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0F.System.Collections.IEnumerable)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm11.ProtoBuf.Meta.BasicList)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm0F.System.Reflection.MethodInfo))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0F.System.Reflection.MethodInfo)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0F.System.Reflection.MethodBase)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0F.System.Reflection.MemberInfo)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm0F.System.Reflection.ParameterInfo))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0F.System.Reflection.ParameterInfo)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize(System.Array.Of($asm0F.System.Reflection.PropertyInfo))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0F.System.Reflection.BindingFlags)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0F.System.Reflection.PropertyInfo)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm11.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm11.ProtoBuf.WireType)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm0F.System.ArgumentNullException)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0F.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0F.System.Collections.Generic.ICollection$b1)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm11.ProtoBuf.ProtoWriter)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0F.System.IDisposable)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm0F.System.InvalidOperationException)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize(System.Array.Of($asm0F.System.Byte))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm11.ProtoBuf.SubItemToken)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm0F.System.Char)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0F.System.SByte)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0F.System.Byte)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm0F.System.Int16)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm0F.System.UInt16)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0F.System.UInt32)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm0F.System.Single)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm0F.System.Double)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm11.ProtoBuf.BclHelpers)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm12.System.Uri)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize(System.Array.Of($asm0F.System.Object))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm0F.System.Int64)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0F.System.UInt64)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm0F.System.Decimal)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm0F.System.DateTime)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm0F.System.TimeSpan)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm0F.System.Guid)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm0F.System.Collections.IEnumerator)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm0F.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [$asm0F.System.Type]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NotSupportedException, [$asm0F.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [
        $asm0F.System.IO.Stream, $asm0F.System.Object, 
        $asm0F.System.Type, $asm11.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Object, [
        $asm0F.System.Int32, $asm0F.System.Object, 
        $asm11.ProtoBuf.ProtoReader
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.Meta.TypeFormatEventArgs, [$asm0F.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm0F.System.Boolean, [$asm0F.System.Type]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.ArgumentNullException, [$asm0F.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.IO.Stream, $asm0F.System.Object, 
        $asm11.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Int32, $asm0F.System.Object, 
        $asm11.ProtoBuf.ProtoWriter
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm11.ProtoBuf.Meta.TypeFormatEventArgs, [$asm0F.System.Type]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.InvalidOperationException, [$asm0F.System.String]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm12.System.Uri, [$asm0F.System.String]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm0F.System.Array, $asm0F.System.Array, 
        $asm0F.System.Int32
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0F.System.NullReferenceException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.Collections.IList.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0F.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0F.System.Collections.IEnumerator.get_Current)) ();
  };


  function TypeModel__ctor () {
  }; 

  function TypeModel_CheckDictionaryAccessors (model, pair, value) {
    return (!(!pair.get_IsGenericType() || 
        (pair.GetGenericTypeDefinition() !== model.MapType($T02().__Type__))) && (pair.GetGenericArguments()[1] === value));
  }; 

  function TypeModel_CreateListInstance (listType, itemType) {
    var fullName = null;
    var type = listType;
    var isArray = listType.get_IsArray();
    if (isArray) {
      var result = (JSIL.Array.New(itemType, 0));
    } else {
      var flag = !listType.get_IsClass() || 
      listType.get_IsAbstract() || 
      ($T08().GetConstructor(listType, $T08().EmptyTypes, true) === null);
      if (flag) {
        var flag2 = false;
        var flag3 = !(!listType.get_IsInterface() || 
          ((fullName = listType.get_FullName()) === null)) && 
        ((fullName.indexOf("Dictionary")) >= 0);
        if (flag3) {
          var flag4 = listType.get_IsGenericType() && 
          (listType.GetGenericTypeDefinition() === $T09().__Type__);
          if (flag4) {
            var genericArguments = listType.GetGenericArguments();
            type = $T0B().__Type__.MakeGenericType(genericArguments);
            flag2 = true;
          }
        }
        var flag5 = !flag2;
        if (flag5) {
          type = $T0C().__Type__.MakeGenericType(JSIL.Array.New($T01(), [itemType]));
        }
      }
      result = $S00().CallStatic($T0D(), "CreateInstance", null, type);
    }
    return result;
  }; 

  function TypeModel_CreateNestedListsNotSupported () {
    return $S01().Construct("Nested or jagged lists and arrays are not supported");
  }; 

  function TypeModel_Deserialize$00 (source, value, type) {
    return $S02().CallVirtual("Deserialize", null, this, source, value, type, null);
  }; 

  function TypeModel_Deserialize$01 (source, value, $type, context) {
    var type = new JSIL.BoxedVariable($type);
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var protoReader = null;
    try {
      protoReader = $T11().Create(source, this, context, -1);
      if (value !== null) {
        protoReader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(protoReader, type.get(), value, noAutoCreate);
      protoReader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T11().Recycle(protoReader);
    }
    return result;
  }; 

  function TypeModel_DeserializeCore (reader, $type, $value, noAutoCreate) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var key = (this.GetKey(/* ref */ type) | 0);
    var flag = (key >= 0) && 
    !$T08().IsEnum(type.get());
    if (flag) {
      var result = $S03().CallVirtual("Deserialize", null, this, key, value.get(), reader);
    } else {
      this.TryDeserializeAuxiliaryType(
        reader, 
        $T12().Default, 
        1, 
        type.get(), 
        /* ref */ value, 
        true, 
        false, 
        noAutoCreate, 
        false
      );
      result = value.get();
    }
    return result;
  }; 

  function TypeModel_DeserializeType (model, value) {
    var flag = model !== null;
    if (flag) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      var flag2 = dynamicTypeFormatting !== null;
      if (flag2) {
        var typeFormatEventArgs = $S04().Construct(value);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        var flag3 = typeFormatEventArgs.get_Type() !== null;
        if (flag3) {
          var type = typeFormatEventArgs.get_Type();
          return type;
        }
      }
    }
    type = (JSIL.ReflectionGetTypeInternal($asm11.__Assembly__, value, false, false));
    return type;
  }; 

  function TypeModel_get_ForwardsOnly () {
    return this.forwardsOnly;
  }; 

  function TypeModel_GetKey$02 (/* ref */ type) {
    var flag = type.get() === null;
    if (flag) {
      var result = -1;
    } else {
      var keyImpl = (this.GetKeyImpl(type.get()) | 0);
      var flag2 = keyImpl < 0;
      if (flag2) {
        var type2 = $thisType.ResolveProxies(type.get());
        var flag3 = type2 !== null;
        if (flag3) {
          type.set(type2);
          keyImpl = (this.GetKeyImpl(type.get()) | 0);
        }
      }
      result = keyImpl;
    }
    return result;
  }; 

  function TypeModel_GetListItemType (model, listType) {
    var parameterType = null;
    $T08().DebugAssert(listType !== null);
    var flag = (listType === model.MapType($T03().__Type__)) || 
    listType.get_IsArray() || 
    !$S05().CallVirtual("IsAssignableFrom", null, model.MapType($T15().__Type__), listType);
    if (flag) {
      var result = null;
    } else {
      var basicList = new ($T16())();
      var methods = listType.GetMethods();

      for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
        var methodInfo = methods[i];
        var flag2 = methodInfo.get_IsStatic() || 
        (methodInfo.get_Name() != "Add");
        if (!flag2) {
          var parameters = methodInfo.GetParameters();
          var flag3 = ((parameters.length | 0) === 1) && 
          !basicList.Contains(parameterType = (parameters[0]).get_ParameterType());
          if (flag3) {
            basicList.Add(parameterType);
          }
        }
      }
      var name = listType.get_Name();
      var flag4 = (name !== null) && 
      (((name.indexOf("Queue")) >= 0) || 
        ((name.indexOf("Stack")) >= 0));
      if (!flag4) {
        $thisType.TestEnumerableListPatterns(model, basicList, listType);
        var interfaces = listType.GetInterfaces();

        for (var j = 0; j < (interfaces.length | 0); j = ((j + 1) | 0)) {
          var iType = interfaces[j];
          $thisType.TestEnumerableListPatterns(model, basicList, iType);
        }
      }
      var properties = listType.GetProperties($T1E().$Flags("Instance", "NonPublic", "Public"));

      for (var k = 0; k < (properties.length | 0); k = ((k + 1) | 0)) {
        var propertyInfo = properties[k];
        var flag6 = (propertyInfo.get_Name() != "Item") || 
        basicList.Contains(propertyInfo.get_PropertyType());
        if (!flag6) {
          var indexParameters = propertyInfo.GetIndexParameters();
          var flag7 = ((indexParameters.length | 0) !== 1) || 
          ((indexParameters[0]).get_ParameterType() !== model.MapType($T07().__Type__));
          if (!flag7) {
            basicList.Add(propertyInfo.get_PropertyType());
          }
        }
      }
      switch (basicList.get_Count()) {
        case 0: 
          result = null;
          return result;

        case 1: 
          result = $T01().$Cast(basicList.get_Item(0));
          return result;

        case 2: 
          var flag8 = $thisType.CheckDictionaryAccessors(
            model, 
            $T01().$Cast(basicList.get_Item(0)), 
            $T01().$Cast(basicList.get_Item(1))
          );
          if (flag8) {
            result = $T01().$Cast(basicList.get_Item(0));
            return result;
          }
          var flag9 = $thisType.CheckDictionaryAccessors(
            model, 
            $T01().$Cast(basicList.get_Item(1)), 
            $T01().$Cast(basicList.get_Item(0))
          );
          if (flag9) {
            result = $T01().$Cast(basicList.get_Item(1));
            return result;
          }
          break;

      }
      result = null;
    }
    return result;
  }; 

  function TypeModel_GetWireType (code, format, /* ref */ type, /* ref */ modelKey) {
    modelKey.set(-1);
    var flag = $T08().IsEnum(type.get());
    if (flag) {
      modelKey.set(this.GetKey(/* ref */ type));
      var result = $T21().Variant;
    } else {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (code.valueOf()) {
              case 3: 
              case 4: 
              case 5: 
              case 6: 
              case 7: 
              case 8: 
              case 9: 
              case 10: 
                result = (
                  (format === $T12().FixedSize)
                     ? $T21().Fixed32
                     : $T21().Variant)
                ;
                return result;

              case 11: 
              case 12: 
                result = (
                  (format === $T12().FixedSize)
                     ? $T21().Fixed64
                     : $T21().Variant)
                ;
                return result;

              case 13: 
                result = $T21().Fixed32;
                return result;

              case 14: 
                result = $T21().Fixed64;
                return result;

              case 15: 
              case 16: 
              case 18: 
                break;

              case 17: 
                $label0 = 1 /* goto IL_AB */ ;
                continue $labelgroup0;

              default: 
                switch (code.valueOf()) {
                  case 100: 
                  case 101: 
                  case 102: 
                  case 103: 
                    break;

                  default: 
                    $label0 = 1 /* goto IL_AB */ ;
                    continue $labelgroup0;

                }
                break;

            }
            result = $T21().String;
            return result;

            $label0 = 1 /* goto IL_AB */ ;
            continue $labelgroup0;
          case 1: /* IL_AB */ 
            var flag2 = modelKey.set(this.GetKey(/* ref */ type)) >= 0;
            if (flag2) {
              result = $T21().String;
            } else {
              result = $T21().None;
            }

            break $labelgroup0;
        }
      }
    }
    return result;
  }; 

  function TypeModel_MapType$03 (type) {
    return this.MapType(type, true);
  }; 

  function TypeModel_MapType$04 (type, demand) {
    return type;
  }; 

  function TypeModel_PrepareDeserialize (value, /* ref */ type) {
    var flag = type.get() === null;
    if (flag) {
      if (value === null) {
        throw $S06().Construct("type");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var result = true;
    var underlyingType = $T08().GetUnderlyingType(type.get());
    var flag3 = underlyingType !== null;
    if (flag3) {
      type.set(underlyingType);
      result = false;
    }
    return result;
  }; 

  function TypeModel_ResolveListAdd (model, listType, itemType, /* ref */ isList) {
    isList.set($S05().CallVirtual("IsAssignableFrom", null, model.MapType($thisType.ilist), listType));
    var array = JSIL.Array.New($T01(), [itemType]);
    var instanceMethod = $T08().GetInstanceMethod(listType, "Add", array);
    var flag = instanceMethod === null;
    if (flag) {
      var flag2 = listType.get_IsInterface() && 
      (listType === (model.MapType($T23().__Type__)).MakeGenericType(array));
      var type = (model.MapType($T24().__Type__)).MakeGenericType(array);
      var flag3 = flag2 || 
      $S05().CallVirtual("IsAssignableFrom", null, type, listType);
      if (flag3) {
        instanceMethod = $T08().GetInstanceMethod(type, "Add", array);
      }
    }
    var flag4 = instanceMethod === null;
    if (flag4) {
      var interfaces = listType.GetInterfaces();

    $loop0: 
      for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
        var type2 = interfaces[i];
        var flag5 = !(!(type2.get_Name() == "IProducerConsumerCollection`1") || 
          !type2.get_IsGenericType()) && 
        ((type2.GetGenericTypeDefinition()).get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1");
        if (flag5) {
          instanceMethod = $T08().GetInstanceMethod(type2, "TryAdd", array);
          var flag6 = instanceMethod !== null;
          if (flag6) {
            break $loop0;
          }
        }
      }
    }
    var flag7 = instanceMethod === null;
    if (flag7) {
      array[0] = model.MapType($T05().__Type__);
      instanceMethod = $T08().GetInstanceMethod(listType, "Add", array);
    }
    var flag8 = (instanceMethod === null) & isList.get();
    if (flag8) {
      instanceMethod = $T08().GetInstanceMethod(model.MapType($thisType.ilist), "Add", array);
    }
    return instanceMethod;
  }; 

  function TypeModel_ResolveProxies (type) {
    var flag = type === null;
    if (flag) {
      var result = null;
    } else {
      var isGenericParameter = type.get_IsGenericParameter();
      if (isGenericParameter) {
        result = null;
      } else {
        var underlyingType = $T08().GetUnderlyingType(type);
        if (underlyingType !== null) {
          result = underlyingType;
        } else {
          var fullName = type.get_FullName();
          var flag3 = (fullName !== null) && 
          (System.String.StartsWith(fullName, "System.Data.Entity.DynamicProxies."));
          if (flag3) {
            result = type.get_BaseType();
          } else {
            var interfaces = type.GetInterfaces();

            for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
              var fullName2 = (interfaces[i]).get_FullName();
              if ((fullName2 == "NHibernate.Proxy.INHibernateProxy") || 
                (fullName2 == "NHibernate.Proxy.DynamicProxy.IProxy") || (fullName2 == "NHibernate.Intercept.IFieldInterceptorAccessor")) {
                result = type.get_BaseType();
                return result;
              }
            }
            result = null;
          }
        }
      }
    }
    return result;
  }; 

  function TypeModel_Serialize$05 (dest, value) {
    $S07().CallVirtual("Serialize", null, this, dest, value, null);
  }; 

  function TypeModel_Serialize$06 (dest, value, context) {
    var protoWriter = new ($T25())(dest, this, context);
    try {
      protoWriter.SetRootObject(value);
      this.SerializeCore(protoWriter, value);
      protoWriter.Close();
    } finally {
      if (protoWriter !== null) {
        $IM00().Call(protoWriter, null);
      }
    }
  }; 

  function TypeModel_SerializeCore (writer, value) {
    if (value === null) {
      throw $S06().Construct("value");
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value));
    var key = (this.GetKey(/* ref */ type) | 0);
    if (key >= 0) {
      $S08().CallVirtual("Serialize", null, this, key, value, writer);
    } else {
      var flag3 = !this.TrySerializeAuxiliaryType(
        writer, 
        type.get(), 
        $T12().Default, 
        1, 
        value, 
        false
      );
      if (flag3) {
        $thisType.ThrowUnexpectedType(type.get());
      }
    }
  }; 

  function TypeModel_SerializeType (model, type) {
    var flag = model !== null;
    if (flag) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      var flag2 = dynamicTypeFormatting !== null;
      if (flag2) {
        var typeFormatEventArgs = $S09().Construct(type);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        var flag3 = !$T08().IsNullOrEmpty(typeFormatEventArgs.get_FormattedName());
        if (flag3) {
          var result = typeFormatEventArgs.get_FormattedName();
          return result;
        }
      }
    }
    result = type.get_AssemblyQualifiedName();
    return result;
  }; 

  function TypeModel_TestEnumerableListPatterns (model, candidates, iType) {
    var isGenericType = iType.get_IsGenericType();
    if (isGenericType) {
      var genericTypeDefinition = iType.GetGenericTypeDefinition();
      var flag = (genericTypeDefinition === model.MapType($T23().__Type__)) || 
      (genericTypeDefinition === model.MapType($T24().__Type__)) || 
      (genericTypeDefinition.get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1");
      if (flag) {
        var genericArguments = iType.GetGenericArguments();
        var flag2 = !candidates.Contains(genericArguments[0]);
        if (flag2) {
          candidates.Add(genericArguments[0]);
        }
      }
    }
  }; 

  function TypeModel_ThrowUnexpectedSubtype (expected, actual) {
    var flag = expected !== $thisType.ResolveProxies(actual);
    if (flag) {
      throw $S0A().Construct(JSIL.ConcatString("Unexpected sub-type: ", actual.get_FullName()));
    }
  }; 

  function TypeModel_ThrowUnexpectedType (type) {
    var str = (
      (type === null)
         ? "(unknown)"
         : type.get_FullName())
    ;
    var flag = type !== null;
    if (flag) {
      var baseType = type.get_BaseType();
      var flag2 = !((baseType === null) || 
        !baseType.get_IsGenericType()) && 
      ((baseType.GetGenericTypeDefinition()).get_Name() == "GeneratedMessage`2");
      if (flag2) {
        throw $S0A().Construct(JSIL.ConcatString("Are you mixing protobuf-net and protobuf-csharp-port? See http://stackoverflow.com/q/11564914; type: ", str));
      }
    }
    throw $S0A().Construct(JSIL.ConcatString("Type is not expected, and no contract can be inferred: ", str));
  }; 

  function TypeModel_TryDeserializeAuxiliaryType (reader, format, tag, $type, /* ref */ value, skipOtherFields, asListItem, autoCreate, insideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var flag = type.get() === null;
          if (flag) {
            throw $S06().Construct("type");
          }
          var typeCode = $T08().GetTypeCode(type.get());
          var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
          var flag2 = false;
          if (wireType === $T21().None) {
            var type2 = $thisType.GetListItemType(this, type.get());
            var flag4 = !((type2 !== null) || 
              !(type.get()).get_IsArray() || 
              (((type.get()).GetArrayRank() | 0) !== 1)) && 
            (type.get() !== $T28().__Type__);
            if (flag4) {
              type2 = (type.get()).GetElementType();
            }
            var flag5 = type2 !== null;
            if (flag5) {
              if (insideList) {
                throw $thisType.CreateNestedListsNotSupported();
              }
              flag2 = this.TryDeserializeList(
                this, 
                reader, 
                format, 
                tag, 
                type.get(), 
                type2, 
                /* ref */ value
              );
              var flag6 = !flag2 & autoCreate;
              if (flag6) {
                value.set($thisType.CreateListInstance(type.get(), type2));
              }
              var result = flag2;
              return result;
            } else {
              $thisType.ThrowUnexpectedType(type.get());
            }
          }

        $loop0: 
          while (true) {
            var flag7 = flag2 & asListItem;
            if (flag7) {
              break $loop0;
            }
            var num2 = (reader.ReadFieldHeader() | 0);
            if (num2 <= 0) {
              break $loop0;
            }
            if (num2 !== (tag | 0)) {
              if (!skipOtherFields) {
                $label0 = 1 /* goto IL_12E */ ;
                continue $labelgroup0;
              }
              reader.SkipField();
            } else {
              flag2 = true;
              reader.Hint(wireType);
              var flag10 = (num.get() | 0) >= 0;
              if (flag10) {
                var wireType2 = wireType;
                if (!((wireType2 === $T21().String) || (wireType2 === $T21().StartGroup))) {
                  value.set($S03().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
                } else {
                  var token = $T11().StartSubItem(reader);
                  value.set($S03().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
                  $T11().EndSubItem(token, reader);
                }
              } else {
                var protoTypeCode = typeCode;
                switch (protoTypeCode.valueOf()) {
                  case 3: 
                    value.set($T04().$Box(reader.ReadBoolean()));
                    break;

                  case 4: 
                    value.set($T2A().$Box(String.fromCharCode(reader.ReadUInt16())));
                    break;

                  case 5: 
                    value.set($T2B().$Box(reader.ReadSByte()));
                    break;

                  case 6: 
                    value.set($T2C().$Box(reader.ReadByte()));
                    break;

                  case 7: 
                    value.set($T2D().$Box(reader.ReadInt16()));
                    break;

                  case 8: 
                    value.set($T2E().$Box(reader.ReadUInt16()));
                    break;

                  case 9: 
                    value.set($T07().$Box(reader.ReadInt32()));
                    break;

                  case 10: 
                    value.set($T2F().$Box(reader.ReadUInt32()));
                    break;

                  case 11: 
                    value.set(reader.ReadInt64());
                    break;

                  case 12: 
                    value.set(reader.ReadUInt64());
                    break;

                  case 13: 
                    value.set($T30().$Box(reader.ReadSingle()));
                    break;

                  case 14: 
                    value.set($T31().$Box(reader.ReadDouble()));
                    break;

                  case 15: 
                    value.set($T32().ReadDecimal(reader));
                    break;

                  case 16: 
                    value.set($T32().ReadDateTime(reader));
                    break;

                  case 17: 
                    break;

                  case 18: 
                    value.set(reader.ReadString());
                    break;

                  default: 
                    switch (protoTypeCode.valueOf()) {
                      case 100: 
                        value.set($T32().ReadTimeSpan(reader));
                        break;

                      case 101: 
                        value.set($T11().AppendBytes($T28().$Cast(value.get()), reader));
                        break;

                      case 102: 
                        value.set($T32().ReadGuid(reader));
                        break;

                      case 103: 
                        value.set($S0B().Construct(reader.ReadString()));
                        break;

                    }
                    break;

                }
              }
            }
          }
          break $labelgroup0;

        case 1: /* IL_12E */ 
          throw $T11().AddErrorData($S0A().Construct(("Expected field " + (tag).toString() + ", but found " + (num2).toString())), reader);
          break $labelgroup0;

      }
    }
    /* Original label IL_37A */ 
    var flag11 = (!flag2 && 
      !asListItem) & autoCreate;
    if (flag11) {
      var flag12 = type.get() !== $T03().__Type__;
      if (flag12) {
        value.set($S00().CallStatic($T0D(), "CreateInstance", null, type.get()));
      }
    }
    result = flag2;
    return result;
  }; 

  function TypeModel_TryDeserializeList (model, reader, format, tag, listType, itemType, /* ref */ value) {
    var flag = new JSIL.BoxedVariable(false);
    var methodInfo = $thisType.ResolveListAdd(model, listType, itemType, /* ref */ flag);
    var flag2 = methodInfo === null;
    if (flag2) {
      throw $S01().Construct(JSIL.ConcatString("Unknown list variant: ", listType.get_FullName()));
    }
    var result = false;
    var obj = new JSIL.BoxedVariable(null);
    var list = $T00().$As(value.get());
    var array = (
      flag.get()
         ? null
         : JSIL.Array.New($T05(), 1))
    ;
    var basicList = (
      listType.get_IsArray()
         ? new ($T16())()
         : null)
    ;

    while (this.TryDeserializeAuxiliaryType(
        reader, 
        format, 
        tag, 
        itemType, 
        /* ref */ obj, 
        true, 
        true, 
        true, 
        true
      )) {
      result = true;
      var flag3 = (value.get() === null) && 
      (basicList === null);
      if (flag3) {
        value.set($thisType.CreateListInstance(listType, itemType));
        list = $T00().$As(value.get());
      }
      var flag4 = list !== null;
      if (flag4) {
        $IM01().Call(list, null, obj.get());
      } else {
        var flag5 = basicList !== null;
        if (flag5) {
          basicList.Add(obj.get());
        } else {
          array[0] = obj.get();
          methodInfo.Invoke(value.get(), array);
        }
      }
      obj.set(null);
    }
    var flag6 = basicList !== null;
    if (flag6) {
      var flag7 = value.get() !== null;
      if (flag7) {
        var flag8 = (basicList.get_Count() | 0) === 0;
        if (!flag8) {
          var array2 = $T06().$Cast(value.get());
          var array3 = (JSIL.Array.New(itemType, (((array2.length | 0) + (basicList.get_Count() | 0)) | 0)));
          $S0C().CallStatic($T06(), "Copy", null, array2, array3, array2.length);
          basicList.CopyTo(array3, array2.length);
          value.set(array3);
        }
      } else {
        array3 = (JSIL.Array.New(itemType, basicList.get_Count()));
        basicList.CopyTo(array3, 0);
        value.set(array3);
      }
    }
    return result;
  }; 

  function TypeModel_TrySerializeAuxiliaryType (writer, $type, format, tag, value, isInsideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);
    var flag = type.get() === null;
    if (flag) {
      type.set(JSIL.GetType(value));
    }
    var typeCode = $T08().GetTypeCode(type.get());
    var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
    var flag2 = (num.get() | 0) >= 0;
    if (flag2) {
      var flag3 = $T08().IsEnum(type.get());
      if (flag3) {
        $S08().CallVirtual("Serialize", null, this, num.get(), value, writer);
        var result = true;
      } else {
        $T25().WriteFieldHeader(tag, wireType, writer);
        switch (wireType.valueOf()) {
          case -1: 
            throw $T25().CreateException(writer);

          case 2: 
          case 3: 
            var token = $T25().StartSubItem(value, writer);
            $S08().CallVirtual("Serialize", null, this, num.get(), value, writer);
            $T25().EndSubItem(token, writer);
            result = true;
            return result;

        }
        $S08().CallVirtual("Serialize", null, this, num.get(), value, writer);
        result = true;
      }
    } else {
      if (wireType !== $T21().None) {
        $T25().WriteFieldHeader(tag, wireType, writer);
      }
      var protoTypeCode = typeCode;
      switch (protoTypeCode.valueOf()) {
        case 3: 
          $T25().WriteBoolean($T04().$Cast(value), writer);
          result = true;
          return result;

        case 4: 
          $T25().WriteUInt16(($T2A().$Cast(value)).charCodeAt(0), writer);
          result = true;
          return result;

        case 5: 
          $T25().WriteSByte($T2B().$Cast(value), writer);
          result = true;
          return result;

        case 6: 
          $T25().WriteByte($T2C().$Cast(value), writer);
          result = true;
          return result;

        case 7: 
          $T25().WriteInt16($T2D().$Cast(value), writer);
          result = true;
          return result;

        case 8: 
          $T25().WriteUInt16($T2E().$Cast(value), writer);
          result = true;
          return result;

        case 9: 
          $T25().WriteInt32($T07().$Cast(value), writer);
          result = true;
          return result;

        case 10: 
          $T25().WriteUInt32($T2F().$Cast(value), writer);
          result = true;
          return result;

        case 11: 
          $T25().WriteInt64($T35().$Cast(value), writer);
          result = true;
          return result;

        case 12: 
          $T25().WriteUInt64($T36().$Cast(value), writer);
          result = true;
          return result;

        case 13: 
          $T25().WriteSingle($T30().$Cast(value), writer);
          result = true;
          return result;

        case 14: 
          $T25().WriteDouble($T31().$Cast(value), writer);
          result = true;
          return result;

        case 15: 
          $T32().WriteDecimal($T37().$Cast(value), writer);
          result = true;
          return result;

        case 16: 
          $T32().WriteDateTime($T38().$Cast(value).MemberwiseClone(), writer);
          result = true;
          return result;

        case 17: 
          break;

        case 18: 
          $T25().WriteString($T03().$Cast(value), writer);
          result = true;
          return result;

        default: 
          switch (protoTypeCode.valueOf()) {
            case 100: 
              $T32().WriteTimeSpan($T39().$Cast(value).MemberwiseClone(), writer);
              result = true;
              return result;

            case 101: 
              $T25().WriteBytes($T28().$Cast(value), writer);
              result = true;
              return result;

            case 102: 
              $T32().WriteGuid($T3A().$Cast(value).MemberwiseClone(), writer);
              result = true;
              return result;

            case 103: 
              $T25().WriteString(($T33().$Cast(value)).get_AbsoluteUri(), writer);
              result = true;
              return result;

          }
          break;

      }
      $T08().DebugAssert(wireType === $T21().None);
      var enumerable = $T15().$As(value);
      var flag5 = enumerable !== null;
      if (flag5) {
        if (isInsideList) {
          throw $thisType.CreateNestedListsNotSupported();
        }
        var enumerator = $IM02().Call(enumerable, null);
        try {

          while ($IM03().Call(enumerator, null)) {
            var current = $IM04().Call(enumerator, null);
            if (current === null) {
              throw $S0D().Construct();
            }
            var flag7 = !this.TrySerializeAuxiliaryType(
              writer, 
              null, 
              format, 
              tag, 
              current, 
              true
            );
            if (flag7) {
              $thisType.ThrowUnexpectedType(JSIL.GetType(current));
            }
          }
        } finally {
          var disposable = $T26().$As(enumerator);
          if (disposable !== null) {
            $IM00().Call(disposable, null);
          }
        }
        result = true;
      } else {
        result = false;
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__ctor
    );

    $.Method({Static:true , Public:false}, "CheckDictionaryAccessors", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type")
        ]), 
      TypeModel_CheckDictionaryAccessors
    );

    $.Method({Static:true , Public:false}, "CreateListInstance", 
      new JSIL.MethodSignature($.Object, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")]), 
      TypeModel_CreateListInstance
    );

    $.Method({Static:true , Public:false}, "CreateNestedListsNotSupported", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Exception")), 
      TypeModel_CreateNestedListsNotSupported
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm0F.TypeRef("System.IO.Stream"), $.Object, 
          $asm0F.TypeRef("System.Type")
        ]), 
      TypeModel_Deserialize$00
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm0F.TypeRef("System.IO.Stream"), $.Object, 
          $asm0F.TypeRef("System.Type"), $asm11.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$01
    );

    $.Method({Static:false, Public:false}, "DeserializeCore", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("ProtoBuf.ProtoReader"), $asm0F.TypeRef("System.Type"), 
          $.Object, $.Boolean
        ]), 
      TypeModel_DeserializeCore
    );

    $.Method({Static:true , Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$.Type, $.String]), 
      TypeModel_DeserializeType
    );

    $.Method({Static:false, Public:true }, "get_ForwardsOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeModel_get_ForwardsOnly
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])]), 
      TypeModel_GetKey$02
    );

    $.Method({Static:true , Public:false}, "GetListItemType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$.Type, $asm0F.TypeRef("System.Type")]), 
      TypeModel_GetListItemType
    );

    $.Method({Static:false, Public:false}, "GetWireType", 
      new JSIL.MethodSignature($asm11.TypeRef("ProtoBuf.WireType"), [
          $asm11.TypeRef("ProtoBuf.ProtoTypeCode"), $asm11.TypeRef("ProtoBuf.DataFormat"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeModel_GetWireType
    );

    $.Method({Static:false, Public:false}, "MapType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")]), 
      TypeModel_MapType$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MapType", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type"), $.Boolean]), 
      TypeModel_MapType$04
    );

    $.Method({Static:false, Public:false}, "PrepareDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm0F.TypeRef("System.Type")])]), 
      TypeModel_PrepareDeserialize
    );

    $.Method({Static:true , Public:false}, "ResolveListAdd", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Reflection.MethodInfo"), [
          $.Type, $asm0F.TypeRef("System.Type"), 
          $asm0F.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      TypeModel_ResolveListAdd
    );

    $.Method({Static:true , Public:false}, "ResolveProxies", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Type"), [$asm0F.TypeRef("System.Type")]), 
      TypeModel_ResolveProxies
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.IO.Stream"), $.Object]), 
      TypeModel_Serialize$05
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm0F.TypeRef("System.IO.Stream"), $.Object, 
          $asm11.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Serialize$06
    );

    $.Method({Static:false, Public:false}, "SerializeCore", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("ProtoBuf.ProtoWriter"), $.Object]), 
      TypeModel_SerializeCore
    );

    $.Method({Static:true , Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$.Type, $asm0F.TypeRef("System.Type")]), 
      TypeModel_SerializeType
    );

    $.Method({Static:true , Public:false}, "TestEnumerableListPatterns", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm11.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm0F.TypeRef("System.Type")
        ]), 
      TypeModel_TestEnumerableListPatterns
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedSubtype", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type")]), 
      TypeModel_ThrowUnexpectedSubtype
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedType", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Type")), 
      TypeModel_ThrowUnexpectedType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("ProtoBuf.ProtoReader"), $asm11.TypeRef("ProtoBuf.DataFormat"), 
          $.Int32, $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ]), 
      TypeModel_TryDeserializeAuxiliaryType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeList", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm11.TypeRef("ProtoBuf.ProtoReader"), 
          $asm11.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $asm0F.TypeRef("System.Type"), $asm0F.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      TypeModel_TryDeserializeList
    );

    $.Method({Static:false, Public:false}, "TrySerializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("ProtoBuf.ProtoWriter"), $asm0F.TypeRef("System.Type"), 
          $asm11.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $.Object, $.Boolean
        ]), 
      TypeModel_TrySerializeAuxiliaryType
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ilist", $asm0F.TypeRef("System.Type"), function ($pi) {
        return $asm0F.System.Collections.IList.__Type__;
      });

    $.Field({Static:false, Public:false}, "DynamicTypeFormatting", $asm11.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler"));

    $.Field({Static:false, Public:false}, "forwardsOnly", $.Boolean);


    function TypeModel__cctor () {
      $thisType.ilist = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__cctor
    );

    $.Property({Static:false, Public:true }, "ForwardsOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

